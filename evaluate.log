2025-05-12 03:29:42,591 - evaluator - INFO - Тестовый набор данных уже существует: evaluation/test_dataset.json
2025-05-12 03:29:42,592 - evaluator - INFO - Загружено файлов: 2712
2025-05-12 03:29:42,592 - evaluator - INFO - Файлов с ошибками: 0
2025-05-12 03:29:42,592 - evaluator - INFO - Данные уже загружены, пропускаем этап загрузки
2025-05-12 03:29:42,592 - evaluator - INFO - Запуск оценки с использованием датасета: evaluation/test_dataset.json
2025-05-12 03:29:42,592 - evaluator - INFO - Запуск команды: /Users/tochka/Documents/RAG/rag/venv/bin/python evaluation/evaluate.py --dataset evaluation/test_dataset.json --output results/eval_results.json
2025-05-12 03:29:42,909 - evaluator - ERROR - Ошибка при запуске скрипта оценки: /Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/urllib3/__init__.py:35: NotOpenSSLWarning: urllib3 v2 only supports OpenSSL 1.1.1+, currently the 'ssl' module is compiled with 'LibreSSL 2.8.3'. See: https://github.com/urllib3/urllib3/issues/3020
  warnings.warn(
Traceback (most recent call last):
  File "/Users/tochka/Documents/RAG/rag/evaluation/evaluate.py", line 5, in <module>
    from metrics import compute_all_metrics
  File "/Users/tochka/Documents/RAG/rag/evaluation/metrics.py", line 1, in <module>
    from rouge_score import rouge_scorer
ModuleNotFoundError: No module named 'rouge_score'

2025-05-12 03:32:58,363 - evaluator - INFO - Тестовый набор данных уже существует: evaluation/test_dataset.json
2025-05-12 03:32:58,364 - evaluator - INFO - Загружено файлов: 2712
2025-05-12 03:32:58,364 - evaluator - INFO - Файлов с ошибками: 0
2025-05-12 03:32:58,364 - evaluator - INFO - Данные уже загружены, пропускаем этап загрузки
2025-05-12 03:32:58,364 - evaluator - INFO - Запуск оценки с использованием датасета: evaluation/test_dataset.json
2025-05-12 03:32:58,364 - evaluator - INFO - Запуск команды: /Users/tochka/Documents/RAG/rag/venv/bin/python evaluation/evaluate.py --dataset evaluation/test_dataset.json --output results/eval_results.json
2025-05-12 03:32:59,417 - evaluator - ERROR - Ошибка при запуске скрипта оценки: /Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/urllib3/__init__.py:35: NotOpenSSLWarning: urllib3 v2 only supports OpenSSL 1.1.1+, currently the 'ssl' module is compiled with 'LibreSSL 2.8.3'. See: https://github.com/urllib3/urllib3/issues/3020
  warnings.warn(
Traceback (most recent call last):
  File "/Users/tochka/Documents/RAG/rag/evaluation/evaluate.py", line 5, in <module>
    from metrics import compute_all_metrics
  File "/Users/tochka/Documents/RAG/rag/evaluation/metrics.py", line 2, in <module>
    from bert_score import score as bert_score
ModuleNotFoundError: No module named 'bert_score'

2025-05-12 03:35:12,165 - evaluator - INFO - Тестовый набор данных уже существует: evaluation/test_dataset.json
2025-05-12 03:35:12,166 - evaluator - INFO - Загружено файлов: 2712
2025-05-12 03:35:12,166 - evaluator - INFO - Файлов с ошибками: 0
2025-05-12 03:35:12,166 - evaluator - INFO - Данные уже загружены, пропускаем этап загрузки
2025-05-12 03:35:12,166 - evaluator - INFO - Запуск оценки с использованием датасета: evaluation/test_dataset.json
2025-05-12 03:35:12,166 - evaluator - INFO - Запуск команды: /Users/tochka/Documents/RAG/rag/venv/bin/python evaluation/evaluate.py --dataset evaluation/test_dataset.json --output results/eval_results.json
2025-05-12 03:35:29,266 - evaluator - INFO - Тестовый набор данных уже существует: evaluation/test_dataset.json
2025-05-12 03:35:29,267 - evaluator - INFO - Загружено файлов: 2712
2025-05-12 03:35:29,267 - evaluator - INFO - Файлов с ошибками: 0
2025-05-12 03:35:29,267 - evaluator - INFO - Данные уже загружены, пропускаем этап загрузки
2025-05-12 03:35:29,267 - evaluator - INFO - Запуск оценки с использованием датасета: evaluation/test_dataset.json
2025-05-12 03:35:29,267 - evaluator - INFO - Запуск команды: /Users/tochka/Documents/RAG/rag/venv/bin/python evaluation/evaluate.py --dataset evaluation/test_dataset.json --output results/eval_results.json
2025-05-12 04:10:43,528 - evaluate - INFO - Оценка вопроса: Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:11:08,200 - absl - INFO - Using default tokenizer.
2025-05-12 04:11:08,201 - evaluate.metrics - WARNING - Пустой ответ или ожидаемый ответ для BERTScore
2025-05-12 04:11:10,639 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:11:10,658 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 502 Bad Gateway"
2025-05-12 04:11:10,658 - openai._base_client - INFO - Retrying request to /chat/completions in 0.445152 seconds
2025-05-12 04:11:11,430 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:11:11,433 - ragas.metrics._faithfulness - WARNING - No statements were generated from the answer.
2025-05-12 04:11:12,018 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:11:12,939 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:11:13,374 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:11:13,930 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:11:15,147 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 04:11:15,555 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 04:11:16,568 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 0
2025-05-12 04:11:16,569 - evaluate - ERROR - OpenAI API error (llm_relevance): 

You tried to access openai.ChatCompletion, but this is no longer supported in openai>=1.0.0 - see the README at https://github.com/openai/openai-python for the API.

You can run `openai migrate` to automatically upgrade your codebase to use the 1.0.0 interface. 

Alternatively, you can pin your installation to the old version, e.g. `pip install openai==0.28`

A detailed migration guide is available here: https://github.com/openai/openai-python/discussions/742

2025-05-12 04:11:16,569 - evaluate - ERROR - OpenAI API error (llm_faithfulness): 

You tried to access openai.ChatCompletion, but this is no longer supported in openai>=1.0.0 - see the README at https://github.com/openai/openai-python for the API.

You can run `openai migrate` to automatically upgrade your codebase to use the 1.0.0 interface. 

Alternatively, you can pin your installation to the old version, e.g. `pip install openai==0.28`

A detailed migration guide is available here: https://github.com/openai/openai-python/discussions/742

2025-05-12 04:11:16,569 - evaluate - INFO - Оценка вопроса: Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:11:44,278 - absl - INFO - Using default tokenizer.
2025-05-12 04:11:44,279 - evaluate.metrics - WARNING - Пустой ответ или ожидаемый ответ для BERTScore
2025-05-12 04:11:46,022 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:11:46,561 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:11:46,821 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:11:46,823 - ragas.metrics._faithfulness - WARNING - No statements were generated from the answer.
2025-05-12 04:11:48,052 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:11:49,020 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:11:49,653 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:11:50,308 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 04:11:50,987 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 04:11:51,825 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 0
2025-05-12 04:11:51,825 - evaluate - ERROR - OpenAI API error (llm_relevance): 

You tried to access openai.ChatCompletion, but this is no longer supported in openai>=1.0.0 - see the README at https://github.com/openai/openai-python for the API.

You can run `openai migrate` to automatically upgrade your codebase to use the 1.0.0 interface. 

Alternatively, you can pin your installation to the old version, e.g. `pip install openai==0.28`

A detailed migration guide is available here: https://github.com/openai/openai-python/discussions/742

2025-05-12 04:11:51,825 - evaluate - ERROR - OpenAI API error (llm_faithfulness): 

You tried to access openai.ChatCompletion, but this is no longer supported in openai>=1.0.0 - see the README at https://github.com/openai/openai-python for the API.

You can run `openai migrate` to automatically upgrade your codebase to use the 1.0.0 interface. 

Alternatively, you can pin your installation to the old version, e.g. `pip install openai==0.28`

A detailed migration guide is available here: https://github.com/openai/openai-python/discussions/742

2025-05-12 04:11:51,825 - evaluate - INFO - Оценка вопроса: Как можно проверить подлинность диплома в России?
2025-05-12 04:12:06,924 - absl - INFO - Using default tokenizer.
2025-05-12 04:12:06,925 - evaluate.metrics - WARNING - Пустой ответ или ожидаемый ответ для BERTScore
2025-05-12 04:12:08,404 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:12:08,750 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:12:09,217 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:12:09,219 - ragas.metrics._faithfulness - WARNING - No statements were generated from the answer.
2025-05-12 04:12:09,692 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:12:10,645 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:12:11,563 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 04:12:11,952 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 04:12:12,100 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:12:13,219 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 0
2025-05-12 04:12:13,219 - evaluate - ERROR - OpenAI API error (llm_relevance): 

You tried to access openai.ChatCompletion, but this is no longer supported in openai>=1.0.0 - see the README at https://github.com/openai/openai-python for the API.

You can run `openai migrate` to automatically upgrade your codebase to use the 1.0.0 interface. 

Alternatively, you can pin your installation to the old version, e.g. `pip install openai==0.28`

A detailed migration guide is available here: https://github.com/openai/openai-python/discussions/742

2025-05-12 04:12:13,219 - evaluate - ERROR - OpenAI API error (llm_faithfulness): 

You tried to access openai.ChatCompletion, but this is no longer supported in openai>=1.0.0 - see the README at https://github.com/openai/openai-python for the API.

You can run `openai migrate` to automatically upgrade your codebase to use the 1.0.0 interface. 

Alternatively, you can pin your installation to the old version, e.g. `pip install openai==0.28`

A detailed migration guide is available here: https://github.com/openai/openai-python/discussions/742

2025-05-12 04:12:13,219 - evaluate - INFO - Оценка вопроса: Какие компании попадают под внеплановую проверку Роскомнадзора?
2025-05-12 04:12:20,151 - absl - INFO - Using default tokenizer.
2025-05-12 04:12:20,152 - evaluate.metrics - WARNING - Пустой ответ или ожидаемый ответ для BERTScore
2025-05-12 04:12:21,460 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:12:21,812 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:12:22,320 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:12:22,323 - ragas.metrics._faithfulness - WARNING - No statements were generated from the answer.
2025-05-12 04:12:22,831 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:12:23,548 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:12:23,966 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:12:24,675 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 04:12:25,159 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 04:12:26,574 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 0
2025-05-12 04:12:26,574 - evaluate - ERROR - OpenAI API error (llm_relevance): 

You tried to access openai.ChatCompletion, but this is no longer supported in openai>=1.0.0 - see the README at https://github.com/openai/openai-python for the API.

You can run `openai migrate` to automatically upgrade your codebase to use the 1.0.0 interface. 

Alternatively, you can pin your installation to the old version, e.g. `pip install openai==0.28`

A detailed migration guide is available here: https://github.com/openai/openai-python/discussions/742

2025-05-12 04:12:26,575 - evaluate - ERROR - OpenAI API error (llm_faithfulness): 

You tried to access openai.ChatCompletion, but this is no longer supported in openai>=1.0.0 - see the README at https://github.com/openai/openai-python for the API.

You can run `openai migrate` to automatically upgrade your codebase to use the 1.0.0 interface. 

Alternatively, you can pin your installation to the old version, e.g. `pip install openai==0.28`

A detailed migration guide is available here: https://github.com/openai/openai-python/discussions/742

2025-05-12 04:12:26,575 - evaluate - INFO - Оценка вопроса: Что грозит бизнесу при нарушении 115-ФЗ?
2025-05-12 04:12:36,893 - absl - INFO - Using default tokenizer.
2025-05-12 04:12:36,893 - evaluate.metrics - WARNING - Пустой ответ или ожидаемый ответ для BERTScore
2025-05-12 04:12:37,368 - asyncio - ERROR - Task exception was never retrieved
future: <Task finished name='Task-158' coro=<AsyncClient.aclose() done, defined at /Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpx/_client.py:2024> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpx/_client.py", line 2031, in aclose
    await self._transport.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 389, in aclose
    await self._pool.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/anyio/streams/tls.py", line 193, in aclose
    await self.transport_stream.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/anyio/_backends/_asyncio.py", line 1261, in aclose
    self._transport.close()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/selector_events.py", line 700, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 746, in call_soon
    self._check_closed()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 510, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
2025-05-12 04:12:37,473 - asyncio - ERROR - Task exception was never retrieved
future: <Task finished name='Task-160' coro=<AsyncClient.aclose() done, defined at /Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpx/_client.py:2024> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpx/_client.py", line 2031, in aclose
    await self._transport.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 389, in aclose
    await self._pool.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/anyio/streams/tls.py", line 193, in aclose
    await self.transport_stream.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/anyio/_backends/_asyncio.py", line 1261, in aclose
    self._transport.close()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/selector_events.py", line 700, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 746, in call_soon
    self._check_closed()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 510, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
2025-05-12 04:12:37,475 - asyncio - ERROR - Task exception was never retrieved
future: <Task finished name='Task-162' coro=<AsyncClient.aclose() done, defined at /Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpx/_client.py:2024> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpx/_client.py", line 2031, in aclose
    await self._transport.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 389, in aclose
    await self._pool.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/anyio/streams/tls.py", line 193, in aclose
    await self.transport_stream.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/anyio/_backends/_asyncio.py", line 1261, in aclose
    self._transport.close()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/selector_events.py", line 700, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 746, in call_soon
    self._check_closed()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 510, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
2025-05-12 04:12:38,396 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:12:38,583 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:12:39,522 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:12:39,523 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:12:39,525 - ragas.metrics._faithfulness - WARNING - No statements were generated from the answer.
2025-05-12 04:12:40,444 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:12:41,264 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 04:12:41,777 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 04:12:41,855 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:12:42,674 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 0
2025-05-12 04:12:42,674 - evaluate - ERROR - OpenAI API error (llm_relevance): 

You tried to access openai.ChatCompletion, but this is no longer supported in openai>=1.0.0 - see the README at https://github.com/openai/openai-python for the API.

You can run `openai migrate` to automatically upgrade your codebase to use the 1.0.0 interface. 

Alternatively, you can pin your installation to the old version, e.g. `pip install openai==0.28`

A detailed migration guide is available here: https://github.com/openai/openai-python/discussions/742

2025-05-12 04:12:42,675 - evaluate - ERROR - OpenAI API error (llm_faithfulness): 

You tried to access openai.ChatCompletion, but this is no longer supported in openai>=1.0.0 - see the README at https://github.com/openai/openai-python for the API.

You can run `openai migrate` to automatically upgrade your codebase to use the 1.0.0 interface. 

Alternatively, you can pin your installation to the old version, e.g. `pip install openai==0.28`

A detailed migration guide is available here: https://github.com/openai/openai-python/discussions/742

2025-05-12 04:12:42,675 - evaluate - INFO - Оценка вопроса: Какие действия может предпринять налоговая при работе с самозанятыми?
2025-05-12 04:12:56,190 - absl - INFO - Using default tokenizer.
2025-05-12 04:12:56,191 - evaluate.metrics - WARNING - Пустой ответ или ожидаемый ответ для BERTScore
2025-05-12 04:12:57,648 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:12:57,780 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:12:58,500 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:12:58,504 - ragas.metrics._faithfulness - WARNING - No statements were generated from the answer.
2025-05-12 04:12:59,192 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:12:59,992 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:13:00,175 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:13:01,027 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 04:13:01,626 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 04:13:02,516 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 0
2025-05-12 04:13:02,517 - evaluate - ERROR - OpenAI API error (llm_relevance): 

You tried to access openai.ChatCompletion, but this is no longer supported in openai>=1.0.0 - see the README at https://github.com/openai/openai-python for the API.

You can run `openai migrate` to automatically upgrade your codebase to use the 1.0.0 interface. 

Alternatively, you can pin your installation to the old version, e.g. `pip install openai==0.28`

A detailed migration guide is available here: https://github.com/openai/openai-python/discussions/742

2025-05-12 04:13:02,517 - evaluate - ERROR - OpenAI API error (llm_faithfulness): 

You tried to access openai.ChatCompletion, but this is no longer supported in openai>=1.0.0 - see the README at https://github.com/openai/openai-python for the API.

You can run `openai migrate` to automatically upgrade your codebase to use the 1.0.0 interface. 

Alternatively, you can pin your installation to the old version, e.g. `pip install openai==0.28`

A detailed migration guide is available here: https://github.com/openai/openai-python/discussions/742

2025-05-12 04:13:02,517 - evaluate - INFO - Оценка вопроса: Когда могут провести выездную налоговую проверку?
2025-05-12 04:13:09,378 - absl - INFO - Using default tokenizer.
2025-05-12 04:13:09,379 - evaluate.metrics - WARNING - Пустой ответ или ожидаемый ответ для BERTScore
2025-05-12 04:13:10,764 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:13:10,909 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:13:11,582 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:13:11,584 - ragas.metrics._faithfulness - WARNING - No statements were generated from the answer.
2025-05-12 04:13:12,085 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:13:13,315 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:13:13,622 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:13:14,225 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 04:13:14,819 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 04:13:15,760 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 0
2025-05-12 04:13:15,760 - evaluate - ERROR - OpenAI API error (llm_relevance): 

You tried to access openai.ChatCompletion, but this is no longer supported in openai>=1.0.0 - see the README at https://github.com/openai/openai-python for the API.

You can run `openai migrate` to automatically upgrade your codebase to use the 1.0.0 interface. 

Alternatively, you can pin your installation to the old version, e.g. `pip install openai==0.28`

A detailed migration guide is available here: https://github.com/openai/openai-python/discussions/742

2025-05-12 04:13:15,760 - evaluate - ERROR - OpenAI API error (llm_faithfulness): 

You tried to access openai.ChatCompletion, but this is no longer supported in openai>=1.0.0 - see the README at https://github.com/openai/openai-python for the API.

You can run `openai migrate` to automatically upgrade your codebase to use the 1.0.0 interface. 

Alternatively, you can pin your installation to the old version, e.g. `pip install openai==0.28`

A detailed migration guide is available here: https://github.com/openai/openai-python/discussions/742

2025-05-12 04:13:15,760 - evaluate - INFO - Оценка вопроса: Когда МЧС может организовать проверку складов?
2025-05-12 04:13:24,739 - absl - INFO - Using default tokenizer.
2025-05-12 04:13:24,739 - evaluate.metrics - WARNING - Пустой ответ или ожидаемый ответ для BERTScore
2025-05-12 04:13:26,218 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:13:26,379 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:13:27,013 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:13:27,016 - ragas.metrics._faithfulness - WARNING - No statements were generated from the answer.
2025-05-12 04:13:27,442 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:13:28,144 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:13:28,573 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:13:29,216 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 04:13:29,685 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 04:13:30,651 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 0
2025-05-12 04:13:30,652 - evaluate - ERROR - OpenAI API error (llm_relevance): 

You tried to access openai.ChatCompletion, but this is no longer supported in openai>=1.0.0 - see the README at https://github.com/openai/openai-python for the API.

You can run `openai migrate` to automatically upgrade your codebase to use the 1.0.0 interface. 

Alternatively, you can pin your installation to the old version, e.g. `pip install openai==0.28`

A detailed migration guide is available here: https://github.com/openai/openai-python/discussions/742

2025-05-12 04:13:30,652 - evaluate - ERROR - OpenAI API error (llm_faithfulness): 

You tried to access openai.ChatCompletion, but this is no longer supported in openai>=1.0.0 - see the README at https://github.com/openai/openai-python for the API.

You can run `openai migrate` to automatically upgrade your codebase to use the 1.0.0 interface. 

Alternatively, you can pin your installation to the old version, e.g. `pip install openai==0.28`

A detailed migration guide is available here: https://github.com/openai/openai-python/discussions/742

2025-05-12 04:13:30,652 - evaluate - INFO - Оценка вопроса: Какие признаки риска для трудовой проверки предложил Минтруд?
2025-05-12 04:13:43,611 - absl - INFO - Using default tokenizer.
2025-05-12 04:13:43,612 - evaluate.metrics - WARNING - Пустой ответ или ожидаемый ответ для BERTScore
2025-05-12 04:13:44,618 - asyncio - ERROR - Task exception was never retrieved
future: <Task finished name='Task-308' coro=<AsyncClient.aclose() done, defined at /Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpx/_client.py:2024> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpx/_client.py", line 2031, in aclose
    await self._transport.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 389, in aclose
    await self._pool.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/anyio/streams/tls.py", line 193, in aclose
    await self.transport_stream.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/anyio/_backends/_asyncio.py", line 1261, in aclose
    self._transport.close()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/selector_events.py", line 700, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 746, in call_soon
    self._check_closed()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 510, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
2025-05-12 04:13:44,623 - asyncio - ERROR - Task exception was never retrieved
future: <Task finished name='Task-310' coro=<AsyncClient.aclose() done, defined at /Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpx/_client.py:2024> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpx/_client.py", line 2031, in aclose
    await self._transport.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 389, in aclose
    await self._pool.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/anyio/streams/tls.py", line 193, in aclose
    await self.transport_stream.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/anyio/_backends/_asyncio.py", line 1261, in aclose
    self._transport.close()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/selector_events.py", line 700, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 746, in call_soon
    self._check_closed()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 510, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
2025-05-12 04:13:44,626 - asyncio - ERROR - Task exception was never retrieved
future: <Task finished name='Task-312' coro=<AsyncClient.aclose() done, defined at /Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpx/_client.py:2024> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpx/_client.py", line 2031, in aclose
    await self._transport.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpx/_transports/default.py", line 389, in aclose
    await self._pool.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_async/connection_pool.py", line 353, in aclose
    await self._close_connections(closing_connections)
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_async/connection_pool.py", line 345, in _close_connections
    await connection.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_async/connection.py", line 173, in aclose
    await self._connection.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_async/http11.py", line 258, in aclose
    await self._network_stream.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/httpcore/_backends/anyio.py", line 53, in aclose
    await self._stream.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/anyio/streams/tls.py", line 193, in aclose
    await self.transport_stream.aclose()
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/anyio/_backends/_asyncio.py", line 1261, in aclose
    self._transport.close()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/selector_events.py", line 700, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 746, in call_soon
    self._check_closed()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 510, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
2025-05-12 04:13:45,675 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:13:46,083 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:13:46,474 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:13:46,479 - ragas.metrics._faithfulness - WARNING - No statements were generated from the answer.
2025-05-12 04:13:47,005 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:13:47,868 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:13:47,962 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:13:48,645 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 04:13:49,358 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 04:13:50,352 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 0
2025-05-12 04:13:50,352 - evaluate - ERROR - OpenAI API error (llm_relevance): 

You tried to access openai.ChatCompletion, but this is no longer supported in openai>=1.0.0 - see the README at https://github.com/openai/openai-python for the API.

You can run `openai migrate` to automatically upgrade your codebase to use the 1.0.0 interface. 

Alternatively, you can pin your installation to the old version, e.g. `pip install openai==0.28`

A detailed migration guide is available here: https://github.com/openai/openai-python/discussions/742

2025-05-12 04:13:50,352 - evaluate - ERROR - OpenAI API error (llm_faithfulness): 

You tried to access openai.ChatCompletion, but this is no longer supported in openai>=1.0.0 - see the README at https://github.com/openai/openai-python for the API.

You can run `openai migrate` to automatically upgrade your codebase to use the 1.0.0 interface. 

Alternatively, you can pin your installation to the old version, e.g. `pip install openai==0.28`

A detailed migration guide is available here: https://github.com/openai/openai-python/discussions/742

2025-05-12 04:13:50,352 - evaluate - INFO - Оценка вопроса: Что нужно делать при импорте товаров из США?
2025-05-12 04:13:56,277 - absl - INFO - Using default tokenizer.
2025-05-12 04:13:56,278 - evaluate.metrics - WARNING - Пустой ответ или ожидаемый ответ для BERTScore
2025-05-12 04:13:57,655 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:13:58,115 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:13:58,628 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:13:58,631 - ragas.metrics._faithfulness - WARNING - No statements were generated from the answer.
2025-05-12 04:13:59,468 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:13:59,943 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:14:01,955 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:14:02,590 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 04:14:02,829 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 04:14:03,726 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 0
2025-05-12 04:14:03,726 - evaluate - ERROR - OpenAI API error (llm_relevance): 

You tried to access openai.ChatCompletion, but this is no longer supported in openai>=1.0.0 - see the README at https://github.com/openai/openai-python for the API.

You can run `openai migrate` to automatically upgrade your codebase to use the 1.0.0 interface. 

Alternatively, you can pin your installation to the old version, e.g. `pip install openai==0.28`

A detailed migration guide is available here: https://github.com/openai/openai-python/discussions/742

2025-05-12 04:14:03,726 - evaluate - ERROR - OpenAI API error (llm_faithfulness): 

You tried to access openai.ChatCompletion, but this is no longer supported in openai>=1.0.0 - see the README at https://github.com/openai/openai-python for the API.

You can run `openai migrate` to automatically upgrade your codebase to use the 1.0.0 interface. 

Alternatively, you can pin your installation to the old version, e.g. `pip install openai==0.28`

A detailed migration guide is available here: https://github.com/openai/openai-python/discussions/742

2025-05-12 04:14:03,727 - evaluate - INFO - 
Сохранены результаты оценки в evaluation/results/eval_results.json
2025-05-12 04:14:03,727 - evaluate - INFO - 
--- Сводка по метрикам ---
2025-05-12 04:14:03,741 - evaluate - INFO -                           mean
rouge_l                    0.0
bertscore                  NaN
context_recall_manual      0.0
context_precision_manual   0.0
faithfulness_semantic      0.0
ragas_answer_relevance     NaN
ragas_faithfulness         NaN
ragas_context_recall       NaN
llm_relevance              NaN
llm_faithfulness           NaN
2025-05-12 04:14:03,745 - evaluate - INFO - 
Сохранена сводка в evaluation/results/eval_results_summary.csv
2025-05-12 04:14:05,553 - evaluate - INFO - График метрик сохранен в evaluation/results/eval_results_metrics.png/svg
2025-05-12 04:14:06,307 - evaluate - INFO - Диаграмма размаха сохранена в evaluation/results/eval_results_boxplot.png/svg
2025-05-12 04:14:06,309 - evaluate - WARNING - Нет валидных пар значений для диаграммы рассеяния
2025-05-12 04:14:06,310 - evaluate - INFO - Сохранены визуализации в evaluation/results/eval_results_*.svg/.png
2025-05-12 04:14:06,310 - evaluate - INFO - 
--- Лучшие и худшие примеры по метрикам ---
2025-05-12 04:14:06,310 - evaluate - INFO - 
rouge_l:
2025-05-12 04:14:06,310 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:14:06,310 - evaluate - INFO -     0.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:14:06,310 - evaluate - INFO -     0.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:14:06,310 - evaluate - INFO -     0.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:14:06,346 - evaluate - INFO -   Худшие 3:
2025-05-12 04:14:06,346 - evaluate - INFO -     0.0000 — Когда МЧС может организовать проверку складов?
2025-05-12 04:14:06,346 - evaluate - INFO -     0.0000 — Какие признаки риска для трудовой проверки предложил Минтруд?
2025-05-12 04:14:06,346 - evaluate - INFO -     0.0000 — Что нужно делать при импорте товаров из США?
2025-05-12 04:14:06,346 - evaluate - INFO - 
context_recall_manual:
2025-05-12 04:14:06,346 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:14:06,346 - evaluate - INFO -     0.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:14:06,346 - evaluate - INFO -     0.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:14:06,354 - evaluate - INFO -     0.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:14:06,354 - evaluate - INFO -   Худшие 3:
2025-05-12 04:14:06,354 - evaluate - INFO -     0.0000 — Когда МЧС может организовать проверку складов?
2025-05-12 04:14:06,354 - evaluate - INFO -     0.0000 — Какие признаки риска для трудовой проверки предложил Минтруд?
2025-05-12 04:14:06,354 - evaluate - INFO -     0.0000 — Что нужно делать при импорте товаров из США?
2025-05-12 04:14:06,354 - evaluate - INFO - 
context_precision_manual:
2025-05-12 04:14:06,354 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:14:06,354 - evaluate - INFO -     0.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:14:06,357 - evaluate - INFO -     0.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:14:06,357 - evaluate - INFO -     0.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:14:06,357 - evaluate - INFO -   Худшие 3:
2025-05-12 04:14:06,357 - evaluate - INFO -     0.0000 — Когда МЧС может организовать проверку складов?
2025-05-12 04:14:06,357 - evaluate - INFO -     0.0000 — Какие признаки риска для трудовой проверки предложил Минтруд?
2025-05-12 04:14:06,357 - evaluate - INFO -     0.0000 — Что нужно делать при импорте товаров из США?
2025-05-12 04:14:06,357 - evaluate - INFO - 
faithfulness_semantic:
2025-05-12 04:14:06,357 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:14:06,363 - evaluate - INFO -     0.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:14:06,363 - evaluate - INFO -     0.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:14:06,363 - evaluate - INFO -     0.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:14:06,363 - evaluate - INFO -   Худшие 3:
2025-05-12 04:14:06,363 - evaluate - INFO -     0.0000 — Когда МЧС может организовать проверку складов?
2025-05-12 04:14:06,363 - evaluate - INFO -     0.0000 — Какие признаки риска для трудовой проверки предложил Минтруд?
2025-05-12 04:14:06,363 - evaluate - INFO -     0.0000 — Что нужно делать при импорте товаров из США?
2025-05-12 04:15:13,535 - evaluate - INFO - Оценка вопроса: Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:16:35,342 - evaluate - INFO - Оценка вопроса: Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:16:42,581 - evaluate - INFO - Получен ответ от API для вопроса: Что проверяет налоговая при оц...
2025-05-12 04:16:42,583 - absl - INFO - Using default tokenizer.
2025-05-12 04:24:43,105 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: module 'openai' has no attribute 'OpenAI'
2025-05-12 04:24:46,776 - evaluate - INFO - Оценка вопроса: Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:25:09,545 - evaluate - INFO - Получен ответ от API для вопроса: Как проверить китайского поста...
2025-05-12 04:25:09,546 - absl - INFO - Using default tokenizer.
2025-05-12 04:25:13,357 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: module 'openai' has no attribute 'OpenAI'
2025-05-12 04:25:15,154 - evaluate - INFO - Оценка вопроса: Как можно проверить подлинность диплома в России?
2025-05-12 04:25:28,112 - evaluate - INFO - Получен ответ от API для вопроса: Как можно проверить подлинност...
2025-05-12 04:25:28,113 - absl - INFO - Using default tokenizer.
2025-05-12 04:25:31,554 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: module 'openai' has no attribute 'OpenAI'
2025-05-12 04:25:32,513 - evaluate - INFO - Оценка вопроса: Какие компании попадают под внеплановую проверку Роскомнадзора?
2025-05-12 04:25:38,307 - evaluate - INFO - Получен ответ от API для вопроса: Какие компании попадают под вн...
2025-05-12 04:25:38,308 - absl - INFO - Using default tokenizer.
2025-05-12 04:25:41,646 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: module 'openai' has no attribute 'OpenAI'
2025-05-12 04:25:43,276 - evaluate - INFO - Оценка вопроса: Что грозит бизнесу при нарушении 115-ФЗ?
2025-05-12 04:25:51,820 - evaluate - INFO - Получен ответ от API для вопроса: Что грозит бизнесу при нарушен...
2025-05-12 04:25:51,821 - absl - INFO - Using default tokenizer.
2025-05-12 04:25:55,241 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: module 'openai' has no attribute 'OpenAI'
2025-05-12 04:25:56,390 - evaluate - WARNING - Значение оценки 115.0 вне диапазона [0, 1], используем нормализованное значение
2025-05-12 04:25:57,027 - evaluate - INFO - Оценка вопроса: Какие действия может предпринять налоговая при работе с самозанятыми?
2025-05-12 04:26:08,520 - evaluate - INFO - Получен ответ от API для вопроса: Какие действия может предприня...
2025-05-12 04:26:08,521 - absl - INFO - Using default tokenizer.
2025-05-12 04:26:11,594 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: module 'openai' has no attribute 'OpenAI'
2025-05-12 04:26:13,380 - evaluate - INFO - Оценка вопроса: Когда могут провести выездную налоговую проверку?
2025-05-12 04:26:19,349 - evaluate - INFO - Получен ответ от API для вопроса: Когда могут провести выездную ...
2025-05-12 04:26:19,349 - absl - INFO - Using default tokenizer.
2025-05-12 04:26:22,298 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: module 'openai' has no attribute 'OpenAI'
2025-05-12 04:26:23,751 - evaluate - INFO - Оценка вопроса: Когда МЧС может организовать проверку складов?
2025-05-12 04:26:32,151 - evaluate - INFO - Получен ответ от API для вопроса: Когда МЧС может организовать п...
2025-05-12 04:26:32,152 - absl - INFO - Using default tokenizer.
2025-05-12 04:26:35,129 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: module 'openai' has no attribute 'OpenAI'
2025-05-12 04:26:36,242 - openai - INFO - error_code=None error_message='The server had an error while processing your request. Sorry about that!' error_param=None error_type=server_error message='OpenAI API error received' stream_error=False
2025-05-12 04:26:36,243 - evaluate - ERROR - OpenAI API error (llm_faithfulness): The server had an error while processing your request. Sorry about that! {
  "error": {
    "message": "The server had an error while processing your request. Sorry about that!",
    "type": "server_error",
    "param": null,
    "code": null
  }
} 500 {'error': {'message': 'The server had an error while processing your request. Sorry about that!', 'type': 'server_error', 'param': None, 'code': None}} {'Date': 'Sun, 11 May 2025 23:26:36 GMT', 'Content-Type': 'application/json', 'Content-Length': '175', 'Connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '147', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '154', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9995', 'x-ratelimit-remaining-tokens': '199461', 'x-ratelimit-reset-requests': '39.469s', 'x-ratelimit-reset-tokens': '161ms', 'x-request-id': 'req_56fd164fb71cf0cad513d91b9745deba', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'X-Content-Type-Options': 'nosniff', 'Server': 'cloudflare', 'CF-RAY': '93e57131be72d949-AMS', 'alt-svc': 'h3=":443"; ma=86400'}
2025-05-12 04:26:36,243 - evaluate - INFO - Оценка вопроса: Какие признаки риска для трудовой проверки предложил Минтруд?
2025-05-12 04:26:48,063 - evaluate - INFO - Получен ответ от API для вопроса: Какие признаки риска для трудо...
2025-05-12 04:26:48,064 - absl - INFO - Using default tokenizer.
2025-05-12 04:26:51,096 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: module 'openai' has no attribute 'OpenAI'
2025-05-12 04:26:52,516 - evaluate - INFO - Оценка вопроса: Что нужно делать при импорте товаров из США?
2025-05-12 04:26:58,085 - evaluate - INFO - Получен ответ от API для вопроса: Что нужно делать при импорте т...
2025-05-12 04:26:58,086 - absl - INFO - Using default tokenizer.
2025-05-12 04:27:01,351 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: module 'openai' has no attribute 'OpenAI'
2025-05-12 04:27:03,192 - evaluate - INFO - 
Сохранены результаты оценки в evaluation/results/subset_results.json
2025-05-12 04:27:03,192 - evaluate - INFO - 
--- Сводка по метрикам ---
2025-05-12 04:27:03,221 - evaluate - INFO -                             mean
rouge_l                   0.0667
bertscore                 0.6675
context_recall_manual     1.6000
context_precision_manual  0.9000
faithfulness_semantic     0.9529
ragas_answer_relevance       NaN
ragas_faithfulness           NaN
ragas_context_recall         NaN
llm_relevance             0.8200
llm_faithfulness             NaN
2025-05-12 04:27:03,225 - evaluate - INFO - 
Сохранена сводка в evaluation/results/subset_results_summary.csv
2025-05-12 04:27:03,798 - evaluate - INFO - График метрик сохранен в evaluation/results/subset_results_metrics.png/svg
2025-05-12 04:27:04,065 - evaluate - INFO - Диаграмма размаха сохранена в evaluation/results/subset_results_boxplot.png/svg
2025-05-12 04:27:04,219 - evaluate - INFO - Диаграмма рассеяния LLM сохранена в evaluation/results/subset_results_llm_scatter.png/svg
2025-05-12 04:27:04,219 - evaluate - INFO - Сохранены визуализации в evaluation/results/subset_results_*.svg/.png
2025-05-12 04:27:04,219 - evaluate - INFO - 
--- Лучшие и худшие примеры по метрикам ---
2025-05-12 04:27:04,219 - evaluate - INFO - 
rouge_l:
2025-05-12 04:27:04,219 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:27:04,219 - evaluate - INFO -     0.6667 — Когда МЧС может организовать проверку складов?
2025-05-12 04:27:04,219 - evaluate - INFO -     0.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:27:04,219 - evaluate - INFO -     0.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:27:04,219 - evaluate - INFO -   Худшие 3:
2025-05-12 04:27:04,219 - evaluate - INFO -     0.0000 — Когда могут провести выездную налоговую проверку?
2025-05-12 04:27:04,219 - evaluate - INFO -     0.0000 — Какие признаки риска для трудовой проверки предложил Минтруд?
2025-05-12 04:27:04,219 - evaluate - INFO -     0.0000 — Что нужно делать при импорте товаров из США?
2025-05-12 04:27:04,219 - evaluate - INFO - 
bertscore:
2025-05-12 04:27:04,219 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:27:04,219 - evaluate - INFO -     0.7123 — Что нужно делать при импорте товаров из США?
2025-05-12 04:27:04,219 - evaluate - INFO -     0.6981 — Что грозит бизнесу при нарушении 115-ФЗ?
2025-05-12 04:27:04,219 - evaluate - INFO -     0.6905 — Как можно проверить подлинность диплома в России?
2025-05-12 04:27:04,219 - evaluate - INFO -   Худшие 3:
2025-05-12 04:27:04,219 - evaluate - INFO -     0.6459 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:27:04,219 - evaluate - INFO -     0.6452 — Какие действия может предпринять налоговая при работе с самозанятыми?
2025-05-12 04:27:04,219 - evaluate - INFO -     0.6143 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:27:04,220 - evaluate - INFO - 
context_recall_manual:
2025-05-12 04:27:04,220 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:27:04,220 - evaluate - INFO -     3.0000 — Что грозит бизнесу при нарушении 115-ФЗ?
2025-05-12 04:27:04,220 - evaluate - INFO -     3.0000 — Когда МЧС может организовать проверку складов?
2025-05-12 04:27:04,220 - evaluate - INFO -     1.5000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:27:04,220 - evaluate - INFO -   Худшие 3:
2025-05-12 04:27:04,220 - evaluate - INFO -     1.5000 — Что нужно делать при импорте товаров из США?
2025-05-12 04:27:04,220 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:27:04,220 - evaluate - INFO -     0.0000 — Какие компании попадают под внеплановую проверку Роскомнадзора?
2025-05-12 04:27:04,220 - evaluate - INFO - 
context_precision_manual:
2025-05-12 04:27:04,220 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:27:04,220 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:27:04,220 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:27:04,220 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:27:04,220 - evaluate - INFO -   Худшие 3:
2025-05-12 04:27:04,220 - evaluate - INFO -     1.0000 — Какие признаки риска для трудовой проверки предложил Минтруд?
2025-05-12 04:27:04,220 - evaluate - INFO -     1.0000 — Что нужно делать при импорте товаров из США?
2025-05-12 04:27:04,220 - evaluate - INFO -     0.0000 — Какие компании попадают под внеплановую проверку Роскомнадзора?
2025-05-12 04:27:04,220 - evaluate - INFO - 
faithfulness_semantic:
2025-05-12 04:27:04,220 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:27:04,220 - evaluate - INFO -     0.9768 — Когда могут провести выездную налоговую проверку?
2025-05-12 04:27:04,220 - evaluate - INFO -     0.9726 — Какие действия может предпринять налоговая при работе с самозанятыми?
2025-05-12 04:27:04,220 - evaluate - INFO -     0.9687 — Какие компании попадают под внеплановую проверку Роскомнадзора?
2025-05-12 04:27:04,220 - evaluate - INFO -   Худшие 3:
2025-05-12 04:27:04,220 - evaluate - INFO -     0.9313 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:27:04,220 - evaluate - INFO -     0.9241 — Какие признаки риска для трудовой проверки предложил Минтруд?
2025-05-12 04:27:04,220 - evaluate - INFO -     0.9058 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:27:04,220 - evaluate - INFO - 
llm_relevance:
2025-05-12 04:27:04,220 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:27:04,220 - evaluate - INFO -     1.0000 — Что грозит бизнесу при нарушении 115-ФЗ?
2025-05-12 04:27:04,220 - evaluate - INFO -     1.0000 — Когда МЧС может организовать проверку складов?
2025-05-12 04:27:04,220 - evaluate - INFO -     1.0000 — Какие признаки риска для трудовой проверки предложил Минтруд?
2025-05-12 04:27:04,220 - evaluate - INFO -   Худшие 3:
2025-05-12 04:27:04,220 - evaluate - INFO -     0.8000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:27:04,220 - evaluate - INFO -     0.8000 — Какие действия может предпринять налоговая при работе с самозанятыми?
2025-05-12 04:27:04,220 - evaluate - INFO -     0.0000 — Какие компании попадают под внеплановую проверку Роскомнадзора?
2025-05-12 04:27:04,220 - evaluate - INFO - 
llm_faithfulness:
2025-05-12 04:27:04,220 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:27:04,220 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:27:04,220 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:27:04,220 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:27:04,220 - evaluate - INFO -   Худшие 3:
2025-05-12 04:27:04,220 - evaluate - INFO -     1.0000 — Какие признаки риска для трудовой проверки предложил Минтруд?
2025-05-12 04:27:04,220 - evaluate - INFO -     1.0000 — Что нужно делать при импорте товаров из США?
2025-05-12 04:27:04,220 - evaluate - INFO -     0.5000 — Когда могут провести выездную налоговую проверку?
2025-05-12 04:31:15,047 - evaluate - INFO - Оценка вопроса: Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:31:25,002 - evaluate - INFO - Получен ответ от API для вопроса: Что проверяет налоговая при оц...
2025-05-12 04:31:25,003 - absl - INFO - Using default tokenizer.
2025-05-12 04:31:29,106 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 1 validation error for ChatOpenAI
__root__
  __init__() got an unexpected keyword argument 'organization' (type=type_error)
2025-05-12 04:31:30,748 - evaluate - INFO - Оценка вопроса: Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:31:51,817 - evaluate - INFO - Получен ответ от API для вопроса: Как проверить китайского поста...
2025-05-12 04:31:51,818 - absl - INFO - Using default tokenizer.
2025-05-12 04:31:55,113 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 1 validation error for ChatOpenAI
__root__
  __init__() got an unexpected keyword argument 'organization' (type=type_error)
2025-05-12 04:31:56,742 - evaluate - INFO - Оценка вопроса: Как можно проверить подлинность диплома в России?
2025-05-12 04:32:09,705 - evaluate - INFO - Получен ответ от API для вопроса: Как можно проверить подлинност...
2025-05-12 04:32:09,706 - absl - INFO - Using default tokenizer.
2025-05-12 04:32:12,837 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 1 validation error for ChatOpenAI
__root__
  __init__() got an unexpected keyword argument 'organization' (type=type_error)
2025-05-12 04:32:13,863 - evaluate - INFO - Оценка вопроса: Какие компании попадают под внеплановую проверку Роскомнадзора?
2025-05-12 04:32:19,536 - evaluate - INFO - Получен ответ от API для вопроса: Какие компании попадают под вн...
2025-05-12 04:32:19,539 - absl - INFO - Using default tokenizer.
2025-05-12 04:32:22,458 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 1 validation error for ChatOpenAI
__root__
  __init__() got an unexpected keyword argument 'organization' (type=type_error)
2025-05-12 04:32:23,793 - evaluate - INFO - Оценка вопроса: Что грозит бизнесу при нарушении 115-ФЗ?
2025-05-12 04:32:32,738 - evaluate - INFO - Получен ответ от API для вопроса: Что грозит бизнесу при нарушен...
2025-05-12 04:32:32,738 - absl - INFO - Using default tokenizer.
2025-05-12 04:32:35,779 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 1 validation error for ChatOpenAI
__root__
  __init__() got an unexpected keyword argument 'organization' (type=type_error)
2025-05-12 04:32:37,751 - evaluate - INFO - Оценка вопроса: Какие действия может предпринять налоговая при работе с самозанятыми?
2025-05-12 04:32:49,252 - evaluate - INFO - Получен ответ от API для вопроса: Какие действия может предприня...
2025-05-12 04:32:49,253 - absl - INFO - Using default tokenizer.
2025-05-12 04:32:52,589 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 1 validation error for ChatOpenAI
__root__
  __init__() got an unexpected keyword argument 'organization' (type=type_error)
2025-05-12 04:32:53,693 - evaluate - INFO - Оценка вопроса: Когда могут провести выездную налоговую проверку?
2025-05-12 04:32:59,648 - evaluate - INFO - Получен ответ от API для вопроса: Когда могут провести выездную ...
2025-05-12 04:32:59,649 - absl - INFO - Using default tokenizer.
2025-05-12 04:33:02,561 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 1 validation error for ChatOpenAI
__root__
  __init__() got an unexpected keyword argument 'organization' (type=type_error)
2025-05-12 04:33:03,625 - evaluate - INFO - Оценка вопроса: Когда МЧС может организовать проверку складов?
2025-05-12 04:33:12,125 - evaluate - INFO - Получен ответ от API для вопроса: Когда МЧС может организовать п...
2025-05-12 04:33:12,126 - absl - INFO - Using default tokenizer.
2025-05-12 04:33:15,234 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 1 validation error for ChatOpenAI
__root__
  __init__() got an unexpected keyword argument 'organization' (type=type_error)
2025-05-12 04:33:16,219 - evaluate - INFO - Оценка вопроса: Какие признаки риска для трудовой проверки предложил Минтруд?
2025-05-12 04:33:28,094 - evaluate - INFO - Получен ответ от API для вопроса: Какие признаки риска для трудо...
2025-05-12 04:33:28,096 - absl - INFO - Using default tokenizer.
2025-05-12 04:33:31,384 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 1 validation error for ChatOpenAI
__root__
  __init__() got an unexpected keyword argument 'organization' (type=type_error)
2025-05-12 04:33:32,960 - evaluate - INFO - Оценка вопроса: Что нужно делать при импорте товаров из США?
2025-05-12 04:33:38,572 - evaluate - INFO - Получен ответ от API для вопроса: Что нужно делать при импорте т...
2025-05-12 04:33:38,573 - absl - INFO - Using default tokenizer.
2025-05-12 04:33:41,959 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 1 validation error for ChatOpenAI
__root__
  __init__() got an unexpected keyword argument 'organization' (type=type_error)
2025-05-12 04:33:43,108 - evaluate - INFO - 
Сохранены результаты оценки в evaluation/results/subset_results_fix.json
2025-05-12 04:33:43,109 - evaluate - INFO - 
--- Сводка по метрикам ---
2025-05-12 04:33:43,140 - evaluate - INFO -                             mean
rouge_l                   0.0667
bertscore                 0.6675
context_recall_manual     1.6000
context_precision_manual  0.9000
faithfulness_semantic     0.9529
ragas_answer_relevance       NaN
ragas_faithfulness           NaN
ragas_context_recall         NaN
llm_relevance             0.8800
llm_faithfulness          1.0000
2025-05-12 04:33:43,145 - evaluate - INFO - 
Сохранена сводка в evaluation/results/subset_results_fix_summary.csv
2025-05-12 04:33:43,690 - evaluate - INFO - График метрик сохранен в evaluation/results/subset_results_fix_metrics.png/svg
2025-05-12 04:33:44,101 - evaluate - INFO - Диаграмма размаха сохранена в evaluation/results/subset_results_fix_boxplot.png/svg
2025-05-12 04:33:44,261 - evaluate - INFO - Диаграмма рассеяния LLM сохранена в evaluation/results/subset_results_fix_llm_scatter.png/svg
2025-05-12 04:33:44,261 - evaluate - INFO - Сохранены визуализации в evaluation/results/subset_results_fix_*.svg/.png
2025-05-12 04:33:44,261 - evaluate - INFO - 
--- Лучшие и худшие примеры по метрикам ---
2025-05-12 04:33:44,261 - evaluate - INFO - 
rouge_l:
2025-05-12 04:33:44,261 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:33:44,261 - evaluate - INFO -     0.6667 — Когда МЧС может организовать проверку складов?
2025-05-12 04:33:44,262 - evaluate - INFO -     0.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:33:44,262 - evaluate - INFO -     0.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:33:44,262 - evaluate - INFO -   Худшие 3:
2025-05-12 04:33:44,262 - evaluate - INFO -     0.0000 — Когда могут провести выездную налоговую проверку?
2025-05-12 04:33:44,262 - evaluate - INFO -     0.0000 — Какие признаки риска для трудовой проверки предложил Минтруд?
2025-05-12 04:33:44,262 - evaluate - INFO -     0.0000 — Что нужно делать при импорте товаров из США?
2025-05-12 04:33:44,262 - evaluate - INFO - 
bertscore:
2025-05-12 04:33:44,262 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:33:44,262 - evaluate - INFO -     0.7123 — Что нужно делать при импорте товаров из США?
2025-05-12 04:33:44,262 - evaluate - INFO -     0.6981 — Что грозит бизнесу при нарушении 115-ФЗ?
2025-05-12 04:33:44,262 - evaluate - INFO -     0.6905 — Как можно проверить подлинность диплома в России?
2025-05-12 04:33:44,262 - evaluate - INFO -   Худшие 3:
2025-05-12 04:33:44,262 - evaluate - INFO -     0.6459 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:33:44,262 - evaluate - INFO -     0.6452 — Какие действия может предпринять налоговая при работе с самозанятыми?
2025-05-12 04:33:44,262 - evaluate - INFO -     0.6143 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:33:44,262 - evaluate - INFO - 
context_recall_manual:
2025-05-12 04:33:44,262 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:33:44,262 - evaluate - INFO -     3.0000 — Что грозит бизнесу при нарушении 115-ФЗ?
2025-05-12 04:33:44,262 - evaluate - INFO -     3.0000 — Когда МЧС может организовать проверку складов?
2025-05-12 04:33:44,262 - evaluate - INFO -     1.5000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:33:44,262 - evaluate - INFO -   Худшие 3:
2025-05-12 04:33:44,262 - evaluate - INFO -     1.5000 — Что нужно делать при импорте товаров из США?
2025-05-12 04:33:44,262 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:33:44,262 - evaluate - INFO -     0.0000 — Какие компании попадают под внеплановую проверку Роскомнадзора?
2025-05-12 04:33:44,262 - evaluate - INFO - 
context_precision_manual:
2025-05-12 04:33:44,262 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:33:44,262 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:33:44,262 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:33:44,262 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:33:44,262 - evaluate - INFO -   Худшие 3:
2025-05-12 04:33:44,262 - evaluate - INFO -     1.0000 — Какие признаки риска для трудовой проверки предложил Минтруд?
2025-05-12 04:33:44,262 - evaluate - INFO -     1.0000 — Что нужно делать при импорте товаров из США?
2025-05-12 04:33:44,262 - evaluate - INFO -     0.0000 — Какие компании попадают под внеплановую проверку Роскомнадзора?
2025-05-12 04:33:44,262 - evaluate - INFO - 
faithfulness_semantic:
2025-05-12 04:33:44,262 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:33:44,262 - evaluate - INFO -     0.9768 — Когда могут провести выездную налоговую проверку?
2025-05-12 04:33:44,262 - evaluate - INFO -     0.9726 — Какие действия может предпринять налоговая при работе с самозанятыми?
2025-05-12 04:33:44,262 - evaluate - INFO -     0.9687 — Какие компании попадают под внеплановую проверку Роскомнадзора?
2025-05-12 04:33:44,262 - evaluate - INFO -   Худшие 3:
2025-05-12 04:33:44,262 - evaluate - INFO -     0.9313 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:33:44,262 - evaluate - INFO -     0.9241 — Какие признаки риска для трудовой проверки предложил Минтруд?
2025-05-12 04:33:44,262 - evaluate - INFO -     0.9058 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:33:44,262 - evaluate - INFO - 
llm_relevance:
2025-05-12 04:33:44,263 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:33:44,263 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:33:44,263 - evaluate - INFO -     1.0000 — Что грозит бизнесу при нарушении 115-ФЗ?
2025-05-12 04:33:44,263 - evaluate - INFO -     1.0000 — Когда могут провести выездную налоговую проверку?
2025-05-12 04:33:44,263 - evaluate - INFO -   Худшие 3:
2025-05-12 04:33:44,263 - evaluate - INFO -     0.8000 — Какие действия может предпринять налоговая при работе с самозанятыми?
2025-05-12 04:33:44,263 - evaluate - INFO -     0.7000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:33:44,263 - evaluate - INFO -     0.5000 — Какие компании попадают под внеплановую проверку Роскомнадзора?
2025-05-12 04:33:44,263 - evaluate - INFO - 
llm_faithfulness:
2025-05-12 04:33:44,263 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:33:44,263 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:33:44,263 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:33:44,263 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:33:44,263 - evaluate - INFO -   Худшие 3:
2025-05-12 04:33:44,263 - evaluate - INFO -     1.0000 — Когда МЧС может организовать проверку складов?
2025-05-12 04:33:44,263 - evaluate - INFO -     1.0000 — Какие признаки риска для трудовой проверки предложил Минтруд?
2025-05-12 04:33:44,263 - evaluate - INFO -     1.0000 — Что нужно делать при импорте товаров из США?
2025-05-12 04:34:42,404 - evaluate - INFO - Оценка вопроса: Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:34:52,411 - evaluate - INFO - Получен ответ от API для вопроса: Что проверяет налоговая при оц...
2025-05-12 04:34:52,413 - absl - INFO - Using default tokenizer.
2025-05-12 04:34:56,677 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 'MockClient' object has no attribute 'chat'
2025-05-12 04:34:58,014 - evaluate - INFO - Оценка вопроса: Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:35:19,008 - evaluate - INFO - Получен ответ от API для вопроса: Как проверить китайского поста...
2025-05-12 04:35:19,009 - absl - INFO - Using default tokenizer.
2025-05-12 04:35:22,577 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 'MockClient' object has no attribute 'chat'
2025-05-12 04:35:23,710 - evaluate - INFO - Оценка вопроса: Как можно проверить подлинность диплома в России?
2025-05-12 04:35:36,584 - evaluate - INFO - Получен ответ от API для вопроса: Как можно проверить подлинност...
2025-05-12 04:35:36,587 - absl - INFO - Using default tokenizer.
2025-05-12 04:35:39,669 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 'MockClient' object has no attribute 'chat'
2025-05-12 04:35:40,809 - evaluate - INFO - Оценка вопроса: Какие компании попадают под внеплановую проверку Роскомнадзора?
2025-05-12 04:35:46,351 - evaluate - INFO - Получен ответ от API для вопроса: Какие компании попадают под вн...
2025-05-12 04:35:46,352 - absl - INFO - Using default tokenizer.
2025-05-12 04:35:49,093 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 'MockClient' object has no attribute 'chat'
2025-05-12 04:35:50,068 - evaluate - INFO - Оценка вопроса: Что грозит бизнесу при нарушении 115-ФЗ?
2025-05-12 04:35:58,487 - evaluate - INFO - Получен ответ от API для вопроса: Что грозит бизнесу при нарушен...
2025-05-12 04:35:58,488 - absl - INFO - Using default tokenizer.
2025-05-12 04:36:01,238 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 'MockClient' object has no attribute 'chat'
2025-05-12 04:36:02,315 - evaluate - INFO - Оценка вопроса: Какие действия может предпринять налоговая при работе с самозанятыми?
2025-05-12 04:36:13,654 - evaluate - INFO - Получен ответ от API для вопроса: Какие действия может предприня...
2025-05-12 04:36:13,655 - absl - INFO - Using default tokenizer.
2025-05-12 04:38:29,308 - evaluate - INFO - Оценка вопроса: Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:38:39,322 - evaluate - INFO - Получен ответ от API для вопроса: Что проверяет налоговая при оц...
2025-05-12 04:38:39,325 - absl - INFO - Using default tokenizer.
2025-05-12 04:38:43,349 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: module 'openai' has no attribute 'OpenAI'
2025-05-12 04:38:44,735 - evaluate - INFO - Оценка вопроса: Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:39:05,760 - evaluate - INFO - Получен ответ от API для вопроса: Как проверить китайского поста...
2025-05-12 04:39:05,763 - absl - INFO - Using default tokenizer.
2025-05-12 04:39:09,098 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: module 'openai' has no attribute 'OpenAI'
2025-05-12 04:39:10,111 - evaluate - INFO - Оценка вопроса: Как можно проверить подлинность диплома в России?
2025-05-12 04:39:23,049 - evaluate - INFO - Получен ответ от API для вопроса: Как можно проверить подлинност...
2025-05-12 04:39:23,050 - absl - INFO - Using default tokenizer.
2025-05-12 04:39:26,076 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: module 'openai' has no attribute 'OpenAI'
2025-05-12 04:39:27,125 - evaluate - INFO - 
Сохранены результаты оценки в evaluation/results/subset_results_fix3.json
2025-05-12 04:39:27,125 - evaluate - INFO - 
--- Сводка по метрикам ---
2025-05-12 04:39:27,153 - evaluate - INFO -                             mean
rouge_l                   0.0000
bertscore                 0.6502
context_recall_manual     1.3333
context_precision_manual  1.0000
faithfulness_semantic     0.9351
ragas_answer_relevance       NaN
ragas_faithfulness           NaN
ragas_context_recall         NaN
llm_relevance             0.8333
llm_faithfulness          1.0000
2025-05-12 04:39:27,157 - evaluate - INFO - 
Сохранена сводка в evaluation/results/subset_results_fix3_summary.csv
2025-05-12 04:39:27,824 - evaluate - INFO - График метрик сохранен в evaluation/results/subset_results_fix3_metrics.png/svg
2025-05-12 04:39:28,097 - evaluate - INFO - Диаграмма размаха сохранена в evaluation/results/subset_results_fix3_boxplot.png/svg
2025-05-12 04:39:28,257 - evaluate - INFO - Диаграмма рассеяния LLM сохранена в evaluation/results/subset_results_fix3_llm_scatter.png/svg
2025-05-12 04:39:28,257 - evaluate - INFO - Сохранены визуализации в evaluation/results/subset_results_fix3_*.svg/.png
2025-05-12 04:39:28,257 - evaluate - INFO - 
--- Лучшие и худшие примеры по метрикам ---
2025-05-12 04:39:28,257 - evaluate - INFO - 
rouge_l:
2025-05-12 04:39:28,257 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:39:28,257 - evaluate - INFO -     0.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:39:28,257 - evaluate - INFO -     0.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:39:28,257 - evaluate - INFO -     0.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:39:28,257 - evaluate - INFO -   Худшие 3:
2025-05-12 04:39:28,257 - evaluate - INFO -     0.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:39:28,257 - evaluate - INFO -     0.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:39:28,257 - evaluate - INFO -     0.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:39:28,257 - evaluate - INFO - 
bertscore:
2025-05-12 04:39:28,257 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:39:28,258 - evaluate - INFO -     0.6905 — Как можно проверить подлинность диплома в России?
2025-05-12 04:39:28,258 - evaluate - INFO -     0.6459 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:39:28,258 - evaluate - INFO -     0.6143 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:39:28,258 - evaluate - INFO -   Худшие 3:
2025-05-12 04:39:28,258 - evaluate - INFO -     0.6905 — Как можно проверить подлинность диплома в России?
2025-05-12 04:39:28,258 - evaluate - INFO -     0.6459 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:39:28,258 - evaluate - INFO -     0.6143 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:39:28,258 - evaluate - INFO - 
context_recall_manual:
2025-05-12 04:39:28,258 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:39:28,258 - evaluate - INFO -     1.5000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:39:28,258 - evaluate - INFO -     1.5000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:39:28,258 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:39:28,258 - evaluate - INFO -   Худшие 3:
2025-05-12 04:39:28,258 - evaluate - INFO -     1.5000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:39:28,258 - evaluate - INFO -     1.5000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:39:28,258 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:39:28,258 - evaluate - INFO - 
context_precision_manual:
2025-05-12 04:39:28,258 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:39:28,258 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:39:28,258 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:39:28,258 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:39:28,258 - evaluate - INFO -   Худшие 3:
2025-05-12 04:39:28,258 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:39:28,258 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:39:28,258 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:39:28,258 - evaluate - INFO - 
faithfulness_semantic:
2025-05-12 04:39:28,258 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:39:28,258 - evaluate - INFO -     0.9682 — Как можно проверить подлинность диплома в России?
2025-05-12 04:39:28,258 - evaluate - INFO -     0.9313 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:39:28,258 - evaluate - INFO -     0.9058 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:39:28,258 - evaluate - INFO -   Худшие 3:
2025-05-12 04:39:28,258 - evaluate - INFO -     0.9682 — Как можно проверить подлинность диплома в России?
2025-05-12 04:39:28,258 - evaluate - INFO -     0.9313 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:39:28,258 - evaluate - INFO -     0.9058 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:39:28,258 - evaluate - INFO - 
llm_relevance:
2025-05-12 04:39:28,258 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:39:28,258 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:39:28,258 - evaluate - INFO -     0.8000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:39:28,258 - evaluate - INFO -     0.7000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:39:28,258 - evaluate - INFO -   Худшие 3:
2025-05-12 04:39:28,258 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:39:28,258 - evaluate - INFO -     0.8000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:39:28,258 - evaluate - INFO -     0.7000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:39:28,258 - evaluate - INFO - 
llm_faithfulness:
2025-05-12 04:39:28,259 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:39:28,259 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:39:28,259 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:39:28,259 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:39:28,259 - evaluate - INFO -   Худшие 3:
2025-05-12 04:39:28,259 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:39:28,259 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:39:28,259 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:53:14,633 - evaluate - INFO - Оценка вопроса: Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:53:27,680 - evaluate - INFO - Получен ответ от API для вопроса: Что проверяет налоговая при оц...
2025-05-12 04:53:27,682 - absl - INFO - Using default tokenizer.
2025-05-12 04:53:31,933 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: module 'openai' has no attribute 'OpenAI'
2025-05-12 04:53:33,461 - evaluate - INFO - Оценка вопроса: Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:53:54,618 - evaluate - INFO - Получен ответ от API для вопроса: Как проверить китайского поста...
2025-05-12 04:53:54,619 - absl - INFO - Using default tokenizer.
2025-05-12 04:53:58,153 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: module 'openai' has no attribute 'OpenAI'
2025-05-12 04:53:59,157 - evaluate - INFO - Оценка вопроса: Как можно проверить подлинность диплома в России?
2025-05-12 04:54:12,141 - evaluate - INFO - Получен ответ от API для вопроса: Как можно проверить подлинност...
2025-05-12 04:54:12,142 - absl - INFO - Using default tokenizer.
2025-05-12 04:54:15,635 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: module 'openai' has no attribute 'OpenAI'
2025-05-12 04:54:16,730 - evaluate - INFO - 
Сохранены результаты оценки в evaluation/results/subset_results_fix4.json
2025-05-12 04:54:16,731 - evaluate - INFO - 
--- Сводка по метрикам ---
2025-05-12 04:54:16,761 - evaluate - INFO -                             mean
rouge_l                   0.0000
bertscore                 0.6502
context_recall_manual     1.3333
context_precision_manual  1.0000
faithfulness_semantic     0.9351
ragas_answer_relevance       NaN
ragas_faithfulness           NaN
ragas_context_recall         NaN
llm_relevance             0.8333
llm_faithfulness          1.0000
2025-05-12 04:54:16,767 - evaluate - INFO - 
Сохранена сводка в evaluation/results/subset_results_fix4_summary.csv
2025-05-12 04:54:17,572 - evaluate - INFO - График метрик сохранен в evaluation/results/subset_results_fix4_metrics.png/svg
2025-05-12 04:54:17,833 - evaluate - INFO - Диаграмма размаха сохранена в evaluation/results/subset_results_fix4_boxplot.png/svg
2025-05-12 04:54:17,989 - evaluate - INFO - Диаграмма рассеяния LLM сохранена в evaluation/results/subset_results_fix4_llm_scatter.png/svg
2025-05-12 04:54:17,989 - evaluate - INFO - Сохранены визуализации в evaluation/results/subset_results_fix4_*.svg/.png
2025-05-12 04:54:17,989 - evaluate - INFO - 
--- Лучшие и худшие примеры по метрикам ---
2025-05-12 04:54:17,989 - evaluate - INFO - 
rouge_l:
2025-05-12 04:54:17,989 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:54:17,989 - evaluate - INFO -     0.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:54:17,989 - evaluate - INFO -     0.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:54:17,989 - evaluate - INFO -     0.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:54:17,989 - evaluate - INFO -   Худшие 3:
2025-05-12 04:54:17,989 - evaluate - INFO -     0.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:54:17,989 - evaluate - INFO -     0.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:54:17,989 - evaluate - INFO -     0.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:54:17,989 - evaluate - INFO - 
bertscore:
2025-05-12 04:54:17,989 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:54:17,989 - evaluate - INFO -     0.6905 — Как можно проверить подлинность диплома в России?
2025-05-12 04:54:17,989 - evaluate - INFO -     0.6459 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:54:17,989 - evaluate - INFO -     0.6143 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:54:17,989 - evaluate - INFO -   Худшие 3:
2025-05-12 04:54:17,989 - evaluate - INFO -     0.6905 — Как можно проверить подлинность диплома в России?
2025-05-12 04:54:17,989 - evaluate - INFO -     0.6459 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:54:17,989 - evaluate - INFO -     0.6143 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:54:17,989 - evaluate - INFO - 
context_recall_manual:
2025-05-12 04:54:17,989 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:54:17,989 - evaluate - INFO -     1.5000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:54:17,990 - evaluate - INFO -     1.5000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:54:17,990 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:54:17,990 - evaluate - INFO -   Худшие 3:
2025-05-12 04:54:17,990 - evaluate - INFO -     1.5000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:54:17,990 - evaluate - INFO -     1.5000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:54:17,990 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:54:17,990 - evaluate - INFO - 
context_precision_manual:
2025-05-12 04:54:17,990 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:54:17,990 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:54:17,990 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:54:17,990 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:54:17,990 - evaluate - INFO -   Худшие 3:
2025-05-12 04:54:17,990 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:54:17,990 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:54:17,990 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:54:17,990 - evaluate - INFO - 
faithfulness_semantic:
2025-05-12 04:54:17,990 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:54:17,990 - evaluate - INFO -     0.9682 — Как можно проверить подлинность диплома в России?
2025-05-12 04:54:17,990 - evaluate - INFO -     0.9313 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:54:17,990 - evaluate - INFO -     0.9058 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:54:17,990 - evaluate - INFO -   Худшие 3:
2025-05-12 04:54:17,990 - evaluate - INFO -     0.9682 — Как можно проверить подлинность диплома в России?
2025-05-12 04:54:17,990 - evaluate - INFO -     0.9313 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:54:17,990 - evaluate - INFO -     0.9058 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:54:17,990 - evaluate - INFO - 
llm_relevance:
2025-05-12 04:54:17,990 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:54:17,990 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:54:17,990 - evaluate - INFO -     0.8000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:54:17,990 - evaluate - INFO -     0.7000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:54:17,990 - evaluate - INFO -   Худшие 3:
2025-05-12 04:54:17,990 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:54:17,990 - evaluate - INFO -     0.8000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:54:17,990 - evaluate - INFO -     0.7000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:54:17,990 - evaluate - INFO - 
llm_faithfulness:
2025-05-12 04:54:17,990 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:54:17,990 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:54:17,990 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:54:17,990 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:54:17,990 - evaluate - INFO -   Худшие 3:
2025-05-12 04:54:17,990 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:54:17,991 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:54:17,991 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:57:39,490 - evaluate - INFO - Оценка вопроса: Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:57:50,132 - evaluate - INFO - Получен ответ от API для вопроса: Что проверяет налоговая при оц...
2025-05-12 04:57:50,133 - absl - INFO - Using default tokenizer.
2025-05-12 04:57:56,323 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:57:57,501 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:57:58,407 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:57:58,567 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:57:59,484 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 04:58:00,216 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 04:58:00,524 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:58:14,010 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:58:14,853 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 0
2025-05-12 04:58:15,576 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:58:16,085 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:58:16,085 - evaluate - INFO - Оценка вопроса: Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:58:37,254 - evaluate - INFO - Получен ответ от API для вопроса: Как проверить китайского поста...
2025-05-12 04:58:37,255 - absl - INFO - Using default tokenizer.
2025-05-12 04:58:42,595 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:58:43,913 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:58:45,271 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:58:46,043 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 04:58:46,786 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 04:58:46,872 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:58:53,708 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:59:14,151 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:59:15,413 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 0
2025-05-12 04:59:16,196 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:59:16,917 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:59:16,920 - evaluate - INFO - Оценка вопроса: Как можно проверить подлинность диплома в России?
2025-05-12 04:59:29,901 - evaluate - INFO - Получен ответ от API для вопроса: Как можно проверить подлинност...
2025-05-12 04:59:29,903 - absl - INFO - Using default tokenizer.
2025-05-12 04:59:34,630 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:59:35,888 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:59:36,742 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:59:37,104 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:59:38,319 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 04:59:38,933 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 04:59:41,216 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:59:54,242 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:59:55,454 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 0
2025-05-12 04:59:56,254 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:59:56,816 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 04:59:56,829 - evaluate - INFO - 
Сохранены результаты оценки в evaluation/results/subset_results_openai_v1.json
2025-05-12 04:59:56,829 - evaluate - INFO - 
--- Сводка по метрикам ---
2025-05-12 04:59:56,857 - evaluate - INFO -                             mean
rouge_l                   0.0000
bertscore                 0.6502
context_recall_manual     1.3333
context_precision_manual  1.0000
faithfulness_semantic     0.9351
ragas_answer_relevance       NaN
ragas_faithfulness           NaN
ragas_context_recall         NaN
llm_relevance             0.8333
llm_faithfulness          1.0000
2025-05-12 04:59:56,879 - evaluate - INFO - 
Сохранена сводка в evaluation/results/subset_results_openai_v1_summary.csv
2025-05-12 04:59:57,385 - evaluate - INFO - График метрик сохранен в evaluation/results/subset_results_openai_v1_metrics.png/svg
2025-05-12 04:59:57,798 - evaluate - INFO - Диаграмма размаха сохранена в evaluation/results/subset_results_openai_v1_boxplot.png/svg
2025-05-12 04:59:58,000 - evaluate - INFO - Диаграмма рассеяния LLM сохранена в evaluation/results/subset_results_openai_v1_llm_scatter.png/svg
2025-05-12 04:59:58,000 - evaluate - INFO - Сохранены визуализации в evaluation/results/subset_results_openai_v1_*.svg/.png
2025-05-12 04:59:58,000 - evaluate - INFO - 
--- Лучшие и худшие примеры по метрикам ---
2025-05-12 04:59:58,000 - evaluate - INFO - 
rouge_l:
2025-05-12 04:59:58,000 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:59:58,000 - evaluate - INFO -     0.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:59:58,000 - evaluate - INFO -     0.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:59:58,000 - evaluate - INFO -     0.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:59:58,000 - evaluate - INFO -   Худшие 3:
2025-05-12 04:59:58,000 - evaluate - INFO -     0.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:59:58,000 - evaluate - INFO -     0.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:59:58,000 - evaluate - INFO -     0.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:59:58,000 - evaluate - INFO - 
bertscore:
2025-05-12 04:59:58,000 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:59:58,000 - evaluate - INFO -     0.6905 — Как можно проверить подлинность диплома в России?
2025-05-12 04:59:58,000 - evaluate - INFO -     0.6459 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:59:58,000 - evaluate - INFO -     0.6143 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:59:58,000 - evaluate - INFO -   Худшие 3:
2025-05-12 04:59:58,000 - evaluate - INFO -     0.6905 — Как можно проверить подлинность диплома в России?
2025-05-12 04:59:58,000 - evaluate - INFO -     0.6459 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:59:58,000 - evaluate - INFO -     0.6143 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:59:58,000 - evaluate - INFO - 
context_recall_manual:
2025-05-12 04:59:58,000 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:59:58,000 - evaluate - INFO -     1.5000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:59:58,000 - evaluate - INFO -     1.5000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:59:58,000 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:59:58,000 - evaluate - INFO -   Худшие 3:
2025-05-12 04:59:58,000 - evaluate - INFO -     1.5000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:59:58,001 - evaluate - INFO -     1.5000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:59:58,001 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:59:58,001 - evaluate - INFO - 
context_precision_manual:
2025-05-12 04:59:58,001 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:59:58,001 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:59:58,001 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:59:58,001 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:59:58,001 - evaluate - INFO -   Худшие 3:
2025-05-12 04:59:58,001 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:59:58,001 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:59:58,001 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:59:58,001 - evaluate - INFO - 
faithfulness_semantic:
2025-05-12 04:59:58,001 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:59:58,001 - evaluate - INFO -     0.9682 — Как можно проверить подлинность диплома в России?
2025-05-12 04:59:58,001 - evaluate - INFO -     0.9313 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:59:58,001 - evaluate - INFO -     0.9058 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:59:58,001 - evaluate - INFO -   Худшие 3:
2025-05-12 04:59:58,001 - evaluate - INFO -     0.9682 — Как можно проверить подлинность диплома в России?
2025-05-12 04:59:58,001 - evaluate - INFO -     0.9313 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:59:58,001 - evaluate - INFO -     0.9058 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:59:58,001 - evaluate - INFO - 
llm_relevance:
2025-05-12 04:59:58,001 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:59:58,001 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:59:58,001 - evaluate - INFO -     0.8000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:59:58,001 - evaluate - INFO -     0.7000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:59:58,001 - evaluate - INFO -   Худшие 3:
2025-05-12 04:59:58,001 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:59:58,001 - evaluate - INFO -     0.8000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:59:58,001 - evaluate - INFO -     0.7000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:59:58,001 - evaluate - INFO - 
llm_faithfulness:
2025-05-12 04:59:58,001 - evaluate - INFO -   Лучшие 3:
2025-05-12 04:59:58,001 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:59:58,001 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:59:58,001 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 04:59:58,001 - evaluate - INFO -   Худшие 3:
2025-05-12 04:59:58,001 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 04:59:58,001 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 04:59:58,001 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:00:57,309 - evaluate - INFO - Оценка вопроса: Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:01:09,025 - evaluate - INFO - Получен ответ от API для вопроса: Что проверяет налоговая при оц...
2025-05-12 05:01:09,027 - absl - INFO - Using default tokenizer.
2025-05-12 05:01:13,475 - evaluate.metrics - ERROR - Внутренняя ошибка при вычислении метрик RAGAS: 1 validation error for SingleTurnSample
reference
  Input should be a valid string [type=string_type, input_value=['Заявку на пр...ть компании.'], input_type=list]
    For further information visit https://errors.pydantic.dev/2.0.3/v/string_type
2025-05-12 05:01:14,752 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:01:15,328 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:01:15,331 - evaluate - INFO - Оценка вопроса: Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:01:36,570 - evaluate - INFO - Получен ответ от API для вопроса: Как проверить китайского поста...
2025-05-12 05:01:36,583 - absl - INFO - Using default tokenizer.
2025-05-12 05:02:07,395 - evaluate - INFO - Оценка вопроса: Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:02:17,178 - evaluate - INFO - Получен ответ от API для вопроса: Что проверяет налоговая при оц...
2025-05-12 05:02:17,180 - absl - INFO - Using default tokenizer.
2025-05-12 05:02:20,795 - evaluate.metrics - INFO - RAGAS data: {'question': ['Что проверяет налоговая при оценке надежности компании?'], 'answer': ['Налоговая проверяет надежность компании путем требования разъяснений и документов от компании и её контрагентов, аудиторов. Они также приглашают на беседу сотрудников компании и её контрагентов, используют переводчика для документов на иностранном языке, а также экспертов для исследования свойств предметов (например, фармацевтов, профессоров, художников, учителей). Кроме того, они осматривают помещения и документы компании.'], 'contexts': [['Вот что они делают для проверки:\n• Требуют разъяснения и документы у компании и её контрагентов, аудиторов. Про правила и порядок рассказывают статьи 93, 93.1, 93.2 НК РФ. • Приглашают на беседу в налоговую сотрудников компании и её контрагентов. • Привлекают переводчика, если документы на иностранном языке. • Привлекают экспертов, если нужно исследовать свойства предметов. Например, фармацевтов, профессоров, художников, учителей. Компания может давать своего эксперта. • Осматривают помещения и документы.', '• Чтобы избежать проблем в будущем, следите за полнотой, корректностью и актуальностью сведений в ЕГРЮЛ. Проверить данные можно скачав выписку на сайте налоговой.', 'Если на этом этапе будут несоответствия по одному или нескольким пунктам, налоговики закончат оценку. В компанию придёт выписка с критериями, которым компания не соответствует. Материалы для бизнеса в телеграм-канале Справочной\nПолучайте ежедневные дайджесты новостей и разборы законов, читайте истории предпринимателей и узнавайте о господдержке для бизнеса\nЧто будут проверять дальше.']], 'reference': ['Записи в реестрах, наличие долгов, достоверность информации, показатели ликвидности и платёжеспособности.'], 'ground_truth': ['Заявку на проверку можно отправить онлайн в личном кабинете налогоплательщика через систему АИС «Налог 3». Если предыдущие пункты соответствуют критериям ФНС, налоговики изучат финансовые показатели: ликвидность, автономность, рентабельность и платёжеспособность компании.']}
2025-05-12 05:02:23,182 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:02:23,183 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:02:23,225 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:02:24,000 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 05:02:24,569 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 05:02:26,775 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:02:27,157 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:02:39,256 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:02:40,100 - evaluate.metrics - ERROR - Внутренняя ошибка при вычислении метрик RAGAS: 0
2025-05-12 05:02:40,964 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:02:41,436 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:02:41,439 - evaluate - INFO - Оценка вопроса: Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:03:03,131 - evaluate - INFO - Получен ответ от API для вопроса: Как проверить китайского поста...
2025-05-12 05:03:03,133 - absl - INFO - Using default tokenizer.
2025-05-12 05:03:06,362 - evaluate.metrics - INFO - RAGAS data: {'question': ['Как проверить китайского поставщика перед заключением контракта?'], 'answer': ['Чтобы проверить надёжность китайского поставщика перед заключением контракта, следующие шаги рекомендованы. Сначала необходимо получить документы от поставщика, такие как свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара. Эти документы можно перевести на русский язык при помощи Google Translate, просто указав камеру на документ смартфоном. Если поставщик предоставил все необходимые документы, это может говорить о том, что он надёжный и в работе с ним не будет сюрпризов.\n\nДалее, важно подписать внешнеторговый контракт, который должен содержать все условия сделки, правила разрешения споров и форс-мажорные обстоятельства, которые могут негативно повлиять на исполнение обязательств. Контракт может быть адаптирован под себя по типовому варианту контракта. Обычно он состоит из двух частей на языке покупателя и продавца, чтобы не было разного толкования условий сделки.\n\nКроме того, для наладить общение с китайским поставщиком следует общаться на китайском языке, так как редко встречаются сотрудники фабрик, которые знают иностранные языки даже английский. Для детального обсуждения условий сделки и прописания всего подробно в контракте можно найти переводчика.'], 'contexts': [['Чтобы проверить китайского поставщика, дополнительно запросите:\n• свидетельство о регистрации поставщика в таможенной службе КНР;\n• лицензию КНР на экспорт товара. Лицензии и сертификаты можете перевести на русский через google объектив, наведя камеру смартфона на документ. Если поставщик предоставил все документы, значит, это надёжный поставщик и в работе с ним не будет сюрпризов.', '• Запросите банковские реквизиты и проверьте, чтобы счёт был открыт на компанию, а не на её директора. Подробнее о том, как проверить надёжность поставщика, читайте в статье Справочной. Как провести переговоры\nЧтобы наладить общение с китайским поставщиком, придерживайтесь таких правил:\n• Общайтесь на китайском. На фабриках редко есть сотрудники, которые знают иностранные языки, даже английский. Наймите переводчика, чтобы вы смогли детально обсудить условия сделки и прописать всё подробно в контракте.', '• Запросите регистрационные документы компании и проверьте их данные на сайтах национальных ведомств. • Запросите сведения о товаре: сертификаты качества, технические документы, фото, видео, образцы. • Запросите банковские реквизиты и проверяйте, чтобы счёт был открыт в материковом Китае, а не в Гонконге или Макао. • Не работайте с поставщиком, если он не даёт документы, долго отвечает на вопросы, пишет с разных аккаунтов, предлагает перевести деньги на личный счёт.']], 'reference': ['Проверить адрес, документы, сайт, WeChat, отзывы, запросить сертификаты и реквизиты.'], 'ground_truth': ['Проверьте телефон компании в приложении WeChat, это главный мессенджер для бизнеса в Китае. Запросите регистрационные документы компании и проверьте их данные на сайтах национальных ведомств. Запросите сведения о товаре: сертификаты качества, технические документы, фото, видео, образцы.']}
2025-05-12 05:03:08,232 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:03:08,246 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:03:08,263 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:03:08,935 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 05:03:10,187 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 05:03:11,858 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:03:14,537 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:03:34,659 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:03:35,548 - evaluate.metrics - ERROR - Внутренняя ошибка при вычислении метрик RAGAS: 0
2025-05-12 05:03:36,610 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:03:37,118 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:03:37,121 - evaluate - INFO - Оценка вопроса: Как можно проверить подлинность диплома в России?
2025-05-12 05:03:50,721 - evaluate - INFO - Получен ответ от API для вопроса: Как можно проверить подлинност...
2025-05-12 05:03:50,723 - absl - INFO - Using default tokenizer.
2025-05-12 05:05:33,561 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:05:33,562 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:05:33,583 - evaluate - INFO - Оценка вопроса: Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:05:33,586 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:8000
2025-05-12 05:05:33,854 - urllib3.connectionpool - DEBUG - http://localhost:8000 "POST /token HTTP/1.1" 200 173
2025-05-12 05:05:33,855 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:8000
2025-05-12 05:05:43,158 - urllib3.connectionpool - DEBUG - http://localhost:8000 "POST /ask HTTP/1.1" 200 4144
2025-05-12 05:05:43,160 - evaluate - INFO - Получен ответ от API для вопроса: Что проверяет налоговая при оц...
2025-05-12 05:05:43,161 - evaluate.metrics - DEBUG - Начинаем вычисление ROUGE-L
2025-05-12 05:05:43,161 - absl - INFO - Using default tokenizer.
2025-05-12 05:05:43,161 - evaluate.metrics - DEBUG - ROUGE-L выполнен успешно, значение: 0
2025-05-12 05:05:43,161 - evaluate.metrics - DEBUG - Начинаем вычисление BERTScore
2025-05-12 05:05:43,166 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): huggingface.co:443
2025-05-12 05:05:43,910 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /bert-base-multilingual-cased/resolve/main/tokenizer_config.json HTTP/1.1" 200 0
2025-05-12 05:05:44,156 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /bert-base-multilingual-cased/resolve/main/config.json HTTP/1.1" 200 0
2025-05-12 05:05:46,488 - evaluate.metrics - DEBUG - BERTScore выполнен успешно, значение: 0.6459
2025-05-12 05:05:46,488 - evaluate.metrics - DEBUG - Начинаем вычисление перекрытия контекста
2025-05-12 05:05:46,571 - evaluate.metrics - DEBUG - Перекрытие контекста выполнено успешно. Recall: 1.5, Precision: 1.0
2025-05-12 05:05:46,571 - evaluate.metrics - DEBUG - Начинаем вычисление семантической достоверности (faithfulness)
2025-05-12 05:05:46,612 - evaluate.metrics - DEBUG - Семантическая достоверность выполнена успешно, значение: 0.9058
2025-05-12 05:05:46,612 - evaluate.metrics - INFO - Начинаем вычисление метрик RAGAS
2025-05-12 05:05:46,612 - evaluate.metrics - DEBUG - Подготовка данных для RAGAS
2025-05-12 05:05:46,612 - evaluate.metrics - DEBUG - Добавление ground_truth для context_recall
2025-05-12 05:05:46,612 - evaluate.metrics - DEBUG - Создание датасета из данных
2025-05-12 05:05:46,627 - evaluate.metrics - INFO - RAGAS data: {'question': ['Что проверяет налоговая при оценке надежности компании?'], 'answer': ['Налоговая проверяет надежность компании путем требования разъяснений и документов от компании и её контрагентов, аудиторов. Они также приглашают на беседу сотрудников компании и её контрагентов, используют переводчика для документов на иностранном языке, а также экспертов для исследования свойств предметов (например, фармацевтов, профессоров, художников, учителей). Кроме того, они осматривают помещения и документы компании.'], 'contexts': [['Вот что они делают для проверки:\n• Требуют разъяснения и документы у компании и её контрагентов, аудиторов. Про правила и порядок рассказывают статьи 93, 93.1, 93.2 НК РФ. • Приглашают на беседу в налоговую сотрудников компании и её контрагентов. • Привлекают переводчика, если документы на иностранном языке. • Привлекают экспертов, если нужно исследовать свойства предметов. Например, фармацевтов, профессоров, художников, учителей. Компания может давать своего эксперта. • Осматривают помещения и документы.', '• Чтобы избежать проблем в будущем, следите за полнотой, корректностью и актуальностью сведений в ЕГРЮЛ. Проверить данные можно скачав выписку на сайте налоговой.', 'Если на этом этапе будут несоответствия по одному или нескольким пунктам, налоговики закончат оценку. В компанию придёт выписка с критериями, которым компания не соответствует. Материалы для бизнеса в телеграм-канале Справочной\nПолучайте ежедневные дайджесты новостей и разборы законов, читайте истории предпринимателей и узнавайте о господдержке для бизнеса\nЧто будут проверять дальше.']], 'reference': ['Записи в реестрах, наличие долгов, достоверность информации, показатели ликвидности и платёжеспособности.'], 'ground_truth': ['Заявку на проверку можно отправить онлайн в личном кабинете налогоплательщика через систему АИС «Налог 3». Если предыдущие пункты соответствуют критериям ФНС, налоговики изучат финансовые показатели: ликвидность, автономность, рентабельность и платёжеспособность компании.']}
2025-05-12 05:05:46,628 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 'AnswerRelevancy' object has no attribute '__name__'
2025-05-12 05:05:46,628 - evaluate.metrics - ERROR - Traceback (most recent call last):
  File "/Users/tochka/Documents/RAG/rag/evaluation/metrics.py", line 128, in compute_all_metrics
    logger.debug(f"Метрики RAGAS: {[m.__name__ for m in ragas_metrics]}")
  File "/Users/tochka/Documents/RAG/rag/evaluation/metrics.py", line 128, in <listcomp>
    logger.debug(f"Метрики RAGAS: {[m.__name__ for m in ragas_metrics]}")
AttributeError: 'AnswerRelevancy' object has no attribute '__name__'

2025-05-12 05:05:46,904 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'Ты - точный оценщик качества ответов. Отвечай только числом от 0 до 1.'}, {'role': 'user', 'content': '\n        Вопрос: Что проверяет налоговая при оценке надежности компании?\n        Ответ: Налоговая проверяет надежность компании путем требования разъяснений и документов от компании и её контрагентов, аудиторов. Они также приглашают на беседу сотрудников компании и её контрагентов, используют переводчика для документов на иностранном языке, а также экспертов для исследования свойств предметов (например, фармацевтов, профессоров, художников, учителей). Кроме того, они осматривают помещения и документы компании.\n\n        Насколько данный ответ релевантен вопросу, независимо от контекста? Ответь одним числом от 0 до 1.\n        '}], 'model': 'gpt-3.5-turbo', 'temperature': 0}, 'idempotency_key': 'stainless-python-retry-434de561-19cc-4792-9d8c-b5bd2f34c18f'}
2025-05-12 05:05:46,943 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:05:46,944 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-05-12 05:05:47,022 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x301af0cd0>
2025-05-12 05:05:47,022 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x17c034660> server_hostname='api.openai.com' timeout=5.0
2025-05-12 05:05:47,239 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x301af0ca0>
2025-05-12 05:05:47,240 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:05:47,241 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:05:47,241 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:05:47,241 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:05:47,241 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:05:47,754 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:05:47 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'217'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'230'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'199682'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'95ms'), (b'x-request-id', b'req_db18c516a54be5498e79ab6269985b42'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=Feh_sz6H9DFVnaL5FY1WxBwicmpsab5gSSjoczhBevk-1747008347-1.0.1.1-HRsW49NPNe7t_bHTYo7rvFj_7Mdu_1QBViICNS02.Kl0wOZ7nRzOYpVTL_wNcV80vcUZqOsNN4aWUDBLuoTyqcYPCyGC0gU6l6PpflYTH4U; path=/; expires=Mon, 12-May-25 00:35:47 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=bMQgFQBCHC3W3JAiMm.WVKBQLInAlCzwot8knafirtA-1747008347691-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5aa9a6e20f5dc-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:05:47,758 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:05:47,759 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:05:47,759 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:05:47,759 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:05:47,760 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:05:47,760 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:05:47 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '217'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '230'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '199682'), ('x-ratelimit-reset-requests', '8.64s'), ('x-ratelimit-reset-tokens', '95ms'), ('x-request-id', 'req_db18c516a54be5498e79ab6269985b42'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=Feh_sz6H9DFVnaL5FY1WxBwicmpsab5gSSjoczhBevk-1747008347-1.0.1.1-HRsW49NPNe7t_bHTYo7rvFj_7Mdu_1QBViICNS02.Kl0wOZ7nRzOYpVTL_wNcV80vcUZqOsNN4aWUDBLuoTyqcYPCyGC0gU6l6PpflYTH4U; path=/; expires=Mon, 12-May-25 00:35:47 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=bMQgFQBCHC3W3JAiMm.WVKBQLInAlCzwot8knafirtA-1747008347691-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5aa9a6e20f5dc-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:05:47,760 - openai._base_client - DEBUG - request_id: req_db18c516a54be5498e79ab6269985b42
2025-05-12 05:05:47,774 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'Ты - точный оценщик качества ответов. Отвечай только числом от 0 до 1.'}, {'role': 'user', 'content': '\n        Ответ: Налоговая проверяет надежность компании путем требования разъяснений и документов от компании и её контрагентов, аудиторов. Они также приглашают на беседу сотрудников компании и её контрагентов, используют переводчика для документов на иностранном языке, а также экспертов для исследования свойств предметов (например, фармацевтов, профессоров, художников, учителей). Кроме того, они осматривают помещения и документы компании.\n        Контекст: Вот что они делают для проверки:\n• Требуют разъяснения и документы у компании и её контрагентов, аудиторов. Про правила и порядок рассказывают статьи 93, 93.1, 93.2 НК РФ. • Приглашают на беседу в налоговую сотрудников компании и её контрагентов. • Привлекают переводчика, если документы на иностранном языке. • Привлекают экспертов, если нужно исследовать свойства предметов. Например, фармацевтов, профессоров, художников, учителей. Компания может давать своего эксперта. • Осматривают помещения и документы. • Чтобы избежать проблем в будущем, следите за полнотой, корректностью и актуальностью сведений в ЕГРЮЛ. Проверить данные можно скачав выписку на сайте налоговой. Если на этом этапе будут несоответствия по одному или нескольким пунктам, налоговики закончат оценку. В компанию придёт выписка с критериями, которым компания не соответствует. Материалы для бизнеса в телеграм-канале Справочной\nПолучайте ежедневные дайджесты новостей и разборы законов, читайте истории предпринимателей и узнавайте о господдержке для бизнеса\nЧто будут проверять дальше.\n\n        Насколько данный ответ соответствует только предоставленному контексту, без добавления лишней информации? Ответь одним числом от 0 до 1.\n        '}], 'model': 'gpt-3.5-turbo', 'temperature': 0}, 'idempotency_key': 'stainless-python-retry-47f00edf-3a5f-4905-b884-5ea5d99f799e'}
2025-05-12 05:05:47,775 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:05:47,776 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:05:47,776 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:05:47,776 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:05:47,777 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:05:47,777 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:05:48,391 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:05:48 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'287'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'292'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9998'), (b'x-ratelimit-remaining-tokens', b'199202'), (b'x-ratelimit-reset-requests', b'16.739s'), (b'x-ratelimit-reset-tokens', b'239ms'), (b'x-request-id', b'req_f8702906b2591cdeab213b41956f6e5c'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5aa9dd875f5dc-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:05:48,392 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:05:48,392 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:05:48,393 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:05:48,393 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:05:48,393 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:05:48,393 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:05:48 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '287', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '292', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9998', 'x-ratelimit-remaining-tokens': '199202', 'x-ratelimit-reset-requests': '16.739s', 'x-ratelimit-reset-tokens': '239ms', 'x-request-id': 'req_f8702906b2591cdeab213b41956f6e5c', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5aa9dd875f5dc-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:05:48,393 - openai._base_client - DEBUG - request_id: req_f8702906b2591cdeab213b41956f6e5c
2025-05-12 05:05:48,394 - evaluate - INFO - Оценка вопроса: Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:05:48,398 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:8000
2025-05-12 05:05:48,681 - urllib3.connectionpool - DEBUG - http://localhost:8000 "POST /token HTTP/1.1" 200 173
2025-05-12 05:05:48,682 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:8000
2025-05-12 05:06:09,277 - urllib3.connectionpool - DEBUG - http://localhost:8000 "POST /ask HTTP/1.1" 200 6161
2025-05-12 05:06:09,279 - evaluate - INFO - Получен ответ от API для вопроса: Как проверить китайского поста...
2025-05-12 05:06:09,280 - evaluate.metrics - DEBUG - Начинаем вычисление ROUGE-L
2025-05-12 05:06:09,280 - absl - INFO - Using default tokenizer.
2025-05-12 05:06:09,281 - evaluate.metrics - DEBUG - ROUGE-L выполнен успешно, значение: 0.0
2025-05-12 05:06:09,281 - evaluate.metrics - DEBUG - Начинаем вычисление BERTScore
2025-05-12 05:06:09,454 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /bert-base-multilingual-cased/resolve/main/tokenizer_config.json HTTP/1.1" 200 0
2025-05-12 05:06:09,714 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /bert-base-multilingual-cased/resolve/main/config.json HTTP/1.1" 200 0
2025-05-12 05:06:12,163 - evaluate.metrics - DEBUG - BERTScore выполнен успешно, значение: 0.6143
2025-05-12 05:06:12,163 - evaluate.metrics - DEBUG - Начинаем вычисление перекрытия контекста
2025-05-12 05:06:12,257 - evaluate.metrics - DEBUG - Перекрытие контекста выполнено успешно. Recall: 1.0, Precision: 1.0
2025-05-12 05:06:12,258 - evaluate.metrics - DEBUG - Начинаем вычисление семантической достоверности (faithfulness)
2025-05-12 05:06:12,308 - evaluate.metrics - DEBUG - Семантическая достоверность выполнена успешно, значение: 0.9313
2025-05-12 05:06:12,308 - evaluate.metrics - INFO - Начинаем вычисление метрик RAGAS
2025-05-12 05:06:12,308 - evaluate.metrics - DEBUG - Подготовка данных для RAGAS
2025-05-12 05:06:12,308 - evaluate.metrics - DEBUG - Добавление ground_truth для context_recall
2025-05-12 05:06:12,308 - evaluate.metrics - DEBUG - Создание датасета из данных
2025-05-12 05:06:12,311 - evaluate.metrics - INFO - RAGAS data: {'question': ['Как проверить китайского поставщика перед заключением контракта?'], 'answer': ['Чтобы проверить надёжность китайского поставщика перед заключением контракта, следующие шаги рекомендованы. Сначала необходимо получить документы от поставщика, такие как свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара. Эти документы можно перевести на русский язык при помощи Google Translate, просто указав камеру на документ смартфоном. Если поставщик предоставил все необходимые документы, это может говорить о том, что он надёжный и в работе с ним не будет сюрпризов.\n\nДалее, важно подписать внешнеторговый контракт, который должен содержать все условия сделки, правила разрешения споров и форс-мажорные обстоятельства, которые могут негативно повлиять на исполнение обязательств. Контракт может быть адаптирован под себя по типовому варианту контракта. Обычно он состоит из двух частей на языке покупателя и продавца, чтобы не было разного толкования условий сделки.\n\nКроме того, для наладить общение с китайским поставщиком следует общаться на китайском языке, так как редко встречаются сотрудники фабрик, которые знают иностранные языки даже английский. Для детального обсуждения условий сделки и прописания всего подробно в контракте можно найти переводчика.'], 'contexts': [['Чтобы проверить китайского поставщика, дополнительно запросите:\n• свидетельство о регистрации поставщика в таможенной службе КНР;\n• лицензию КНР на экспорт товара. Лицензии и сертификаты можете перевести на русский через google объектив, наведя камеру смартфона на документ. Если поставщик предоставил все документы, значит, это надёжный поставщик и в работе с ним не будет сюрпризов.', '• Запросите банковские реквизиты и проверьте, чтобы счёт был открыт на компанию, а не на её директора. Подробнее о том, как проверить надёжность поставщика, читайте в статье Справочной. Как провести переговоры\nЧтобы наладить общение с китайским поставщиком, придерживайтесь таких правил:\n• Общайтесь на китайском. На фабриках редко есть сотрудники, которые знают иностранные языки, даже английский. Наймите переводчика, чтобы вы смогли детально обсудить условия сделки и прописать всё подробно в контракте.', '• Запросите регистрационные документы компании и проверьте их данные на сайтах национальных ведомств. • Запросите сведения о товаре: сертификаты качества, технические документы, фото, видео, образцы. • Запросите банковские реквизиты и проверяйте, чтобы счёт был открыт в материковом Китае, а не в Гонконге или Макао. • Не работайте с поставщиком, если он не даёт документы, долго отвечает на вопросы, пишет с разных аккаунтов, предлагает перевести деньги на личный счёт.']], 'reference': ['Проверить адрес, документы, сайт, WeChat, отзывы, запросить сертификаты и реквизиты.'], 'ground_truth': ['Проверьте телефон компании в приложении WeChat, это главный мессенджер для бизнеса в Китае. Запросите регистрационные документы компании и проверьте их данные на сайтах национальных ведомств. Запросите сведения о товаре: сертификаты качества, технические документы, фото, видео, образцы.']}
2025-05-12 05:06:12,311 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 'AnswerRelevancy' object has no attribute '__name__'
2025-05-12 05:06:12,351 - evaluate.metrics - ERROR - Traceback (most recent call last):
  File "/Users/tochka/Documents/RAG/rag/evaluation/metrics.py", line 128, in compute_all_metrics
    logger.debug(f"Метрики RAGAS: {[m.__name__ for m in ragas_metrics]}")
  File "/Users/tochka/Documents/RAG/rag/evaluation/metrics.py", line 128, in <listcomp>
    logger.debug(f"Метрики RAGAS: {[m.__name__ for m in ragas_metrics]}")
AttributeError: 'AnswerRelevancy' object has no attribute '__name__'

2025-05-12 05:06:12,354 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'Ты - точный оценщик качества ответов. Отвечай только числом от 0 до 1.'}, {'role': 'user', 'content': '\n        Вопрос: Как проверить китайского поставщика перед заключением контракта?\n        Ответ: Чтобы проверить надёжность китайского поставщика перед заключением контракта, следующие шаги рекомендованы. Сначала необходимо получить документы от поставщика, такие как свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара. Эти документы можно перевести на русский язык при помощи Google Translate, просто указав камеру на документ смартфоном. Если поставщик предоставил все необходимые документы, это может говорить о том, что он надёжный и в работе с ним не будет сюрпризов.\n\nДалее, важно подписать внешнеторговый контракт, который должен содержать все условия сделки, правила разрешения споров и форс-мажорные обстоятельства, которые могут негативно повлиять на исполнение обязательств. Контракт может быть адаптирован под себя по типовому варианту контракта. Обычно он состоит из двух частей на языке покупателя и продавца, чтобы не было разного толкования условий сделки.\n\nКроме того, для наладить общение с китайским поставщиком следует общаться на китайском языке, так как редко встречаются сотрудники фабрик, которые знают иностранные языки даже английский. Для детального обсуждения условий сделки и прописания всего подробно в контракте можно найти переводчика.\n\n        Насколько данный ответ релевантен вопросу, независимо от контекста? Ответь одним числом от 0 до 1.\n        '}], 'model': 'gpt-3.5-turbo', 'temperature': 0}, 'idempotency_key': 'stainless-python-retry-751e5b68-acb2-4dae-b319-c4bc66b2260b'}
2025-05-12 05:06:12,355 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:06:12,355 - httpcore.connection - DEBUG - close.started
2025-05-12 05:06:12,356 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:06:12,356 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-05-12 05:06:12,358 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x301b838e0>
2025-05-12 05:06:12,359 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x17c034660> server_hostname='api.openai.com' timeout=5.0
2025-05-12 05:06:12,595 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x301b83e50>
2025-05-12 05:06:12,595 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:06:12,596 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:06:12,596 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:06:12,597 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:06:12,597 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:06:13,267 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:06:13 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'296'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'308'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'199326'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'202ms'), (b'x-request-id', b'req_2f52689fa5a513e956cb5871f387f525'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5ab38ec3466b5-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:06:13,268 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:06:13,268 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:06:13,269 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:06:13,269 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:06:13,269 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:06:13,270 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:06:13 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '296', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '308', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '199326', 'x-ratelimit-reset-requests': '8.64s', 'x-ratelimit-reset-tokens': '202ms', 'x-request-id': 'req_2f52689fa5a513e956cb5871f387f525', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5ab38ec3466b5-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:06:13,270 - openai._base_client - DEBUG - request_id: req_2f52689fa5a513e956cb5871f387f525
2025-05-12 05:06:13,273 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'Ты - точный оценщик качества ответов. Отвечай только числом от 0 до 1.'}, {'role': 'user', 'content': '\n        Ответ: Чтобы проверить надёжность китайского поставщика перед заключением контракта, следующие шаги рекомендованы. Сначала необходимо получить документы от поставщика, такие как свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара. Эти документы можно перевести на русский язык при помощи Google Translate, просто указав камеру на документ смартфоном. Если поставщик предоставил все необходимые документы, это может говорить о том, что он надёжный и в работе с ним не будет сюрпризов.\n\nДалее, важно подписать внешнеторговый контракт, который должен содержать все условия сделки, правила разрешения споров и форс-мажорные обстоятельства, которые могут негативно повлиять на исполнение обязательств. Контракт может быть адаптирован под себя по типовому варианту контракта. Обычно он состоит из двух частей на языке покупателя и продавца, чтобы не было разного толкования условий сделки.\n\nКроме того, для наладить общение с китайским поставщиком следует общаться на китайском языке, так как редко встречаются сотрудники фабрик, которые знают иностранные языки даже английский. Для детального обсуждения условий сделки и прописания всего подробно в контракте можно найти переводчика.\n        Контекст: Чтобы проверить китайского поставщика, дополнительно запросите:\n• свидетельство о регистрации поставщика в таможенной службе КНР;\n• лицензию КНР на экспорт товара. Лицензии и сертификаты можете перевести на русский через google объектив, наведя камеру смартфона на документ. Если поставщик предоставил все документы, значит, это надёжный поставщик и в работе с ним не будет сюрпризов. • Запросите банковские реквизиты и проверьте, чтобы счёт был открыт на компанию, а не на её директора. Подробнее о том, как проверить надёжность поставщика, читайте в статье Справочной. Как провести переговоры\nЧтобы наладить общение с китайским поставщиком, придерживайтесь таких правил:\n• Общайтесь на китайском. На фабриках редко есть сотрудники, которые знают иностранные языки, даже английский. Наймите переводчика, чтобы вы смогли детально обсудить условия сделки и прописать всё подробно в контракте. • Запросите регистрационные документы компании и проверьте их данные на сайтах национальных ведомств. • Запросите сведения о товаре: сертификаты качества, технические документы, фото, видео, образцы. • Запросите банковские реквизиты и проверяйте, чтобы счёт был открыт в материковом Китае, а не в Гонконге или Макао. • Не работайте с поставщиком, если он не даёт документы, долго отвечает на вопросы, пишет с разных аккаунтов, предлагает перевести деньги на личный счёт.\n\n        Насколько данный ответ соответствует только предоставленному контексту, без добавления лишней информации? Ответь одним числом от 0 до 1.\n        '}], 'model': 'gpt-3.5-turbo', 'temperature': 0}, 'idempotency_key': 'stainless-python-retry-a40ac2d6-522b-4b56-aeb2-0c0c0a5b1846'}
2025-05-12 05:06:13,275 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:06:13,275 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:06:13,275 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:06:13,276 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:06:13,276 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:06:13,276 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:06:13,833 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:06:13 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'278'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'283'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9998'), (b'x-ratelimit-remaining-tokens', b'198712'), (b'x-ratelimit-reset-requests', b'16.691s'), (b'x-ratelimit-reset-tokens', b'386ms'), (b'x-request-id', b'req_3ef089079987f3772296be51cbfbdb61'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5ab3d2e7666b5-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:06:13,833 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:06:13,834 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:06:13,836 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:06:13,836 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:06:13,836 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:06:13,836 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:06:13 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '278', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '283', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9998', 'x-ratelimit-remaining-tokens': '198712', 'x-ratelimit-reset-requests': '16.691s', 'x-ratelimit-reset-tokens': '386ms', 'x-request-id': 'req_3ef089079987f3772296be51cbfbdb61', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5ab3d2e7666b5-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:06:13,836 - openai._base_client - DEBUG - request_id: req_3ef089079987f3772296be51cbfbdb61
2025-05-12 05:06:13,837 - evaluate - INFO - Оценка вопроса: Как можно проверить подлинность диплома в России?
2025-05-12 05:06:13,840 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:8000
2025-05-12 05:06:14,115 - urllib3.connectionpool - DEBUG - http://localhost:8000 "POST /token HTTP/1.1" 200 173
2025-05-12 05:06:14,116 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:8000
2025-05-12 05:06:26,792 - urllib3.connectionpool - DEBUG - http://localhost:8000 "POST /ask HTTP/1.1" 200 4505
2025-05-12 05:06:26,794 - evaluate - INFO - Получен ответ от API для вопроса: Как можно проверить подлинност...
2025-05-12 05:06:26,795 - evaluate.metrics - DEBUG - Начинаем вычисление ROUGE-L
2025-05-12 05:06:26,795 - absl - INFO - Using default tokenizer.
2025-05-12 05:06:26,795 - evaluate.metrics - DEBUG - ROUGE-L выполнен успешно, значение: 0
2025-05-12 05:06:26,795 - evaluate.metrics - DEBUG - Начинаем вычисление BERTScore
2025-05-12 05:06:26,976 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /bert-base-multilingual-cased/resolve/main/tokenizer_config.json HTTP/1.1" 200 0
2025-05-12 05:06:27,231 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /bert-base-multilingual-cased/resolve/main/config.json HTTP/1.1" 200 0
2025-05-12 05:06:29,481 - evaluate.metrics - DEBUG - BERTScore выполнен успешно, значение: 0.6905
2025-05-12 05:06:29,482 - evaluate.metrics - DEBUG - Начинаем вычисление перекрытия контекста
2025-05-12 05:06:29,571 - evaluate.metrics - DEBUG - Перекрытие контекста выполнено успешно. Recall: 1.5, Precision: 1.0
2025-05-12 05:06:29,571 - evaluate.metrics - DEBUG - Начинаем вычисление семантической достоверности (faithfulness)
2025-05-12 05:06:29,612 - evaluate.metrics - DEBUG - Семантическая достоверность выполнена успешно, значение: 0.9682
2025-05-12 05:06:29,612 - evaluate.metrics - INFO - Начинаем вычисление метрик RAGAS
2025-05-12 05:06:29,612 - evaluate.metrics - DEBUG - Подготовка данных для RAGAS
2025-05-12 05:06:29,612 - evaluate.metrics - DEBUG - Добавление ground_truth для context_recall
2025-05-12 05:06:29,612 - evaluate.metrics - DEBUG - Создание датасета из данных
2025-05-12 05:06:29,615 - evaluate.metrics - INFO - RAGAS data: {'question': ['Как можно проверить подлинность диплома в России?'], 'answer': ['В России можно проверить подлинность диплома в Федеральном реестре сведений документов об образовании (ФРДО). Этот реестр содержит данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатам о владении русским языком и дополнительном профессиональном образовании. Однако не все сведения в ФРДО еще полностью внесены, поэтому возможно, что у вас не найдётся нужная информация. В случае отсутствия данных можно направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа составляет 30 дней. Кроме того, некоторые учебные заведения имеют собственные сервисы проверки подлинности документов, например, в ВШЭ или СПбГУ.'], 'contexts': [['Где проверить подлинность диплома\nВ России есть Федеральный реестр сведений документов об образовании (ФРДО), где любой желающий может бесплатно проверить подлинность документа. В базе есть данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатах о владении русским языком и дополнительном профессиональном образовании.', 'Коротко\n• Быстрее всего проверить подлинность диплома можно в реестре ФРДО. Заполняете данные и сразу узнаёте, есть ли у сотрудника заявленное образование. • Данные в ФРДО внесены ещё не полностью и, возможно, вы не найдёте нужную информацию, однако это не опровергает факт выдачи документа. • Самые верные способы проверки — направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа 30 дней. • В некоторых учебных заведениях есть собственные сервисы проверки, например, в ВШЭ или СПбГУ.', 'Запросите копии паспорта, свидетельства о регистрации (ОГРНИП), ИНН, а также лицензию, если она обязательна для ведения его деятельности.']], 'reference': ['Через ФРДО, запрос в Рособрнадзор или вуз.'], 'ground_truth': ['В России есть Федеральный реестр сведений документов об образовании (ФРДО), где любой желающий может бесплатно проверить подлинность документа. Составьте письмо в электронном виде или напишите от руки, принесите лично или отправьте по почте.']}
2025-05-12 05:06:29,615 - evaluate.metrics - ERROR - Ошибка при вычислении метрик RAGAS: 'AnswerRelevancy' object has no attribute '__name__'
2025-05-12 05:06:29,615 - evaluate.metrics - ERROR - Traceback (most recent call last):
  File "/Users/tochka/Documents/RAG/rag/evaluation/metrics.py", line 128, in compute_all_metrics
    logger.debug(f"Метрики RAGAS: {[m.__name__ for m in ragas_metrics]}")
  File "/Users/tochka/Documents/RAG/rag/evaluation/metrics.py", line 128, in <listcomp>
    logger.debug(f"Метрики RAGAS: {[m.__name__ for m in ragas_metrics]}")
AttributeError: 'AnswerRelevancy' object has no attribute '__name__'

2025-05-12 05:06:29,618 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'Ты - точный оценщик качества ответов. Отвечай только числом от 0 до 1.'}, {'role': 'user', 'content': '\n        Вопрос: Как можно проверить подлинность диплома в России?\n        Ответ: В России можно проверить подлинность диплома в Федеральном реестре сведений документов об образовании (ФРДО). Этот реестр содержит данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатам о владении русским языком и дополнительном профессиональном образовании. Однако не все сведения в ФРДО еще полностью внесены, поэтому возможно, что у вас не найдётся нужная информация. В случае отсутствия данных можно направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа составляет 30 дней. Кроме того, некоторые учебные заведения имеют собственные сервисы проверки подлинности документов, например, в ВШЭ или СПбГУ.\n\n        Насколько данный ответ релевантен вопросу, независимо от контекста? Ответь одним числом от 0 до 1.\n        '}], 'model': 'gpt-3.5-turbo', 'temperature': 0}, 'idempotency_key': 'stainless-python-retry-1a37f68c-c881-4601-b376-1c018c0f6340'}
2025-05-12 05:06:29,619 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:06:29,619 - httpcore.connection - DEBUG - close.started
2025-05-12 05:06:29,620 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:06:29,620 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-05-12 05:06:29,626 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x301bb32e0>
2025-05-12 05:06:29,626 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x17c034660> server_hostname='api.openai.com' timeout=5.0
2025-05-12 05:06:29,844 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x301bb3b80>
2025-05-12 05:06:29,845 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:06:29,846 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:06:29,846 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:06:29,846 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:06:29,846 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:06:30,377 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:06:30 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'202'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'208'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9998'), (b'x-ratelimit-remaining-tokens', b'199578'), (b'x-ratelimit-reset-requests', b'8.766s'), (b'x-ratelimit-reset-tokens', b'126ms'), (b'x-request-id', b'req_49ca5f5d1871e9281c74ee0f29f96d1b'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5aba4bceb1c7a-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:06:30,379 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:06:30,379 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:06:30,379 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:06:30,379 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:06:30,380 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:06:30,380 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:06:30 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '202', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '208', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9998', 'x-ratelimit-remaining-tokens': '199578', 'x-ratelimit-reset-requests': '8.766s', 'x-ratelimit-reset-tokens': '126ms', 'x-request-id': 'req_49ca5f5d1871e9281c74ee0f29f96d1b', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5aba4bceb1c7a-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:06:30,380 - openai._base_client - DEBUG - request_id: req_49ca5f5d1871e9281c74ee0f29f96d1b
2025-05-12 05:06:30,383 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'Ты - точный оценщик качества ответов. Отвечай только числом от 0 до 1.'}, {'role': 'user', 'content': '\n        Ответ: В России можно проверить подлинность диплома в Федеральном реестре сведений документов об образовании (ФРДО). Этот реестр содержит данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатам о владении русским языком и дополнительном профессиональном образовании. Однако не все сведения в ФРДО еще полностью внесены, поэтому возможно, что у вас не найдётся нужная информация. В случае отсутствия данных можно направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа составляет 30 дней. Кроме того, некоторые учебные заведения имеют собственные сервисы проверки подлинности документов, например, в ВШЭ или СПбГУ.\n        Контекст: Где проверить подлинность диплома\nВ России есть Федеральный реестр сведений документов об образовании (ФРДО), где любой желающий может бесплатно проверить подлинность документа. В базе есть данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатах о владении русским языком и дополнительном профессиональном образовании. Коротко\n• Быстрее всего проверить подлинность диплома можно в реестре ФРДО. Заполняете данные и сразу узнаёте, есть ли у сотрудника заявленное образование. • Данные в ФРДО внесены ещё не полностью и, возможно, вы не найдёте нужную информацию, однако это не опровергает факт выдачи документа. • Самые верные способы проверки — направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа 30 дней. • В некоторых учебных заведениях есть собственные сервисы проверки, например, в ВШЭ или СПбГУ. Запросите копии паспорта, свидетельства о регистрации (ОГРНИП), ИНН, а также лицензию, если она обязательна для ведения его деятельности.\n\n        Насколько данный ответ соответствует только предоставленному контексту, без добавления лишней информации? Ответь одним числом от 0 до 1.\n        '}], 'model': 'gpt-3.5-turbo', 'temperature': 0}, 'idempotency_key': 'stainless-python-retry-1969bcff-1735-4a50-838f-14fcf9d83f9a'}
2025-05-12 05:06:30,385 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:06:30,386 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:06:30,387 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:06:30,387 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:06:30,387 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:06:30,387 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:06:30,973 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:06:30 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'309'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'313'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9998'), (b'x-ratelimit-remaining-tokens', b'199123'), (b'x-ratelimit-reset-requests', b'16.878s'), (b'x-ratelimit-reset-tokens', b'263ms'), (b'x-request-id', b'req_8410731e31512fee109b1a75e82f4469'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5aba81e981c7a-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:06:30,976 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:06:30,976 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:06:30,977 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:06:30,977 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:06:30,977 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:06:30,978 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:06:30 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '309', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '313', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9998', 'x-ratelimit-remaining-tokens': '199123', 'x-ratelimit-reset-requests': '16.878s', 'x-ratelimit-reset-tokens': '263ms', 'x-request-id': 'req_8410731e31512fee109b1a75e82f4469', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5aba81e981c7a-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:06:30,978 - openai._base_client - DEBUG - request_id: req_8410731e31512fee109b1a75e82f4469
2025-05-12 05:06:30,982 - evaluate - INFO - 
Сохранены результаты оценки в evaluation/results/debug_ragas.json
2025-05-12 05:06:30,982 - evaluate - INFO - 
--- Сводка по метрикам ---
2025-05-12 05:06:31,008 - evaluate - INFO -                             mean
rouge_l                   0.0000
bertscore                 0.6502
context_recall_manual     1.3333
context_precision_manual  1.0000
faithfulness_semantic     0.9351
ragas_answer_relevance       NaN
ragas_faithfulness           NaN
ragas_context_recall         NaN
llm_relevance             0.8333
llm_faithfulness          1.0000
2025-05-12 05:06:31,013 - evaluate - INFO - 
Сохранена сводка в evaluation/results/debug_ragas_summary.csv
2025-05-12 05:06:31,041 - matplotlib.pyplot - DEBUG - Loaded backend macosx version unknown.
2025-05-12 05:06:31,240 - matplotlib.font_manager - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2025-05-12 05:06:31,240 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,240 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,241 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-12 05:06:31,242 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,243 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-05-12 05:06:31,244 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,245 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,245 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,245 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:06:31,245 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2025-05-12 05:06:31,245 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,245 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:06:31,250 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,251 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,251 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,251 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,251 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,251 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,251 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,251 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,251 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-05-12 05:06:31,251 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,251 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,251 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,251 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,251 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,251 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,251 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,251 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,251 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/PingFang.ttc', name='PingFang HK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.ttf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,252 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,253 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-05-12 05:06:31,253 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,253 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,253 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,253 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:06:31,253 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,253 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,253 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,253 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,253 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,253 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,253 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,253 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,253 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,253 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,253 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,253 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,253 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
2025-05-12 05:06:31,253 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,253 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,253 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-05-12 05:06:31,253 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,253 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,253 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,253 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,253 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,253 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,254 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,255 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,255 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,255 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,255 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,255 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,255 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,255 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,255 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:06:31,255 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,255 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,255 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,255 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,255 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-05-12 05:06:31,255 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,255 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,255 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,255 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,255 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:06:31,255 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,255 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,255 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,255 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:06:31,256 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,256 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,256 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,256 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,256 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,256 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:06:31,256 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,256 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,256 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:06:31,256 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,256 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,256 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,257 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,257 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,257 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,257 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,258 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-12 05:06:31,258 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:06:31,258 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,258 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-05-12 05:06:31,258 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,258 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,258 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,258 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,259 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,260 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,261 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,261 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,261 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,261 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:06:31,261 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,261 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,261 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-05-12 05:06:31,261 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.ttf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,261 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,261 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:06:31,261 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,261 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,261 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,261 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,261 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
2025-05-12 05:06:31,261 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,261 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:06:31,261 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,261 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,261 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,261 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,262 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,262 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,262 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,262 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2025-05-12 05:06:31,262 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,262 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,262 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2025-05-12 05:06:31,262 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,262 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,262 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,262 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,262 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,262 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,262 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,263 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,263 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,263 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,263 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,263 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,263 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,263 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,263 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,263 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-12 05:06:31,263 - matplotlib.font_manager - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2025-05-12 05:06:31,294 - matplotlib.font_manager - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2025-05-12 05:06:31,294 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,294 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-05-12 05:06:31,294 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-05-12 05:06:31,295 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,295 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,295 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,295 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,295 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,295 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,295 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,297 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,297 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,297 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-05-12 05:06:31,297 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,297 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:06:31,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:06:31,303 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:06:31,303 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,303 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:06:31,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-05-12 05:06:31,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,310 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,310 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,310 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,312 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,312 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:06:31,312 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,312 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,312 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:06:31,312 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,312 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,312 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,316 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,316 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-05-12 05:06:31,316 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,317 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,319 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,319 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,319 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-12 05:06:31,319 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,319 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,319 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,319 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,319 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:06:31,319 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,319 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,319 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-12 05:06:31,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-05-12 05:06:31,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:06:31,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:06:31,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,322 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,322 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,322 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,322 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,322 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,322 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,323 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,323 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,323 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,323 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,323 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2025-05-12 05:06:31,323 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,323 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,323 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,323 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,323 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,324 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,324 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,324 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,327 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,327 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,327 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:06:31,327 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,327 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,328 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,328 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,328 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,328 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,329 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,329 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,329 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:06:31,329 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,330 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,330 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-05-12 05:06:31,330 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,332 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,332 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,332 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:06:31,332 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2025-05-12 05:06:31,334 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,334 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:06:31,334 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,334 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,336 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,336 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,336 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,336 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,336 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,337 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,337 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-05-12 05:06:31,337 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,337 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,337 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,337 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,337 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,337 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,337 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,337 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,337 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/PingFang.ttc', name='PingFang HK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,337 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,337 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,337 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,340 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.ttf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,340 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,340 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,342 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,342 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,342 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,342 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-12 05:06:31,343 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,343 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,344 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,344 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-05-12 05:06:31,347 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,347 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,347 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,347 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,350 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,350 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,350 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,350 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,350 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-12 05:06:31,350 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,350 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,350 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-05-12 05:06:31,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,356 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,356 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,356 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:06:31,357 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,360 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,360 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,360 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,360 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
2025-05-12 05:06:31,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-05-12 05:06:31,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,372 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,372 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,372 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,372 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,373 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,373 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,373 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,373 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-05-12 05:06:31,373 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,373 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,373 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,373 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,374 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,374 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:06:31,374 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,374 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,374 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-12 05:06:31,374 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,374 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,374 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,374 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2025-05-12 05:06:31,376 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,376 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,376 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,376 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,376 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,376 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,376 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,376 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,377 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,377 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,377 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,377 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:06:31,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-05-12 05:06:31,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:06:31,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,395 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,395 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:06:31,395 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,395 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,395 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,395 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,395 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,395 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:06:31,395 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,395 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,395 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:06:31,396 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,396 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,396 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,396 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,397 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,397 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,397 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,397 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-12 05:06:31,398 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:06:31,398 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,398 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-05-12 05:06:31,398 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,399 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,399 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,399 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,399 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,399 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,399 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,399 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,399 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,400 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,400 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2025-05-12 05:06:31,400 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,400 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:06:31,400 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,400 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,400 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,400 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,401 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-05-12 05:06:31,401 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,401 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,401 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:06:31,402 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,402 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,402 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,402 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,402 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,402 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,402 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,402 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,402 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,402 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,402 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,402 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2025-05-12 05:06:31,402 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,403 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,403 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,403 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,403 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,403 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,403 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,403 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,403 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,403 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,403 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,403 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:06:31,403 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,403 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,403 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,403 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,403 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,404 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,404 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,404 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,404 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,404 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
2025-05-12 05:06:31,404 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:06:31,404 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,404 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,404 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:06:31,404 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,405 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,405 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,405 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,406 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,406 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:06:31,407 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,407 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,407 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-05-12 05:06:31,407 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.ttf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,407 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,407 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:06:31,407 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,408 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,408 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,408 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,408 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
2025-05-12 05:06:31,409 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,409 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:06:31,409 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,409 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,410 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,410 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,410 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,410 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,411 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,411 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2025-05-12 05:06:31,411 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,411 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,413 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2025-05-12 05:06:31,413 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,413 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,413 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,413 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,413 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,413 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,413 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,413 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:06:31,413 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,413 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:06:31,413 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,413 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,413 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,413 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,414 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:06:31,414 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-12 05:06:31,414 - matplotlib.font_manager - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2025-05-12 05:06:31,619 - evaluate - INFO - График метрик сохранен в evaluation/results/debug_ragas_metrics.png/svg
2025-05-12 05:06:32,058 - evaluate - INFO - Диаграмма размаха сохранена в evaluation/results/debug_ragas_boxplot.png/svg
2025-05-12 05:06:32,216 - evaluate - INFO - Диаграмма рассеяния LLM сохранена в evaluation/results/debug_ragas_llm_scatter.png/svg
2025-05-12 05:06:32,217 - evaluate - INFO - Сохранены визуализации в evaluation/results/debug_ragas_*.svg/.png
2025-05-12 05:06:32,217 - evaluate - INFO - 
--- Лучшие и худшие примеры по метрикам ---
2025-05-12 05:06:32,217 - evaluate - INFO - 
rouge_l:
2025-05-12 05:06:32,217 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:06:32,217 - evaluate - INFO -     0.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:06:32,217 - evaluate - INFO -     0.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:06:32,217 - evaluate - INFO -     0.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:06:32,217 - evaluate - INFO -   Худшие 3:
2025-05-12 05:06:32,217 - evaluate - INFO -     0.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:06:32,217 - evaluate - INFO -     0.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:06:32,217 - evaluate - INFO -     0.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:06:32,217 - evaluate - INFO - 
bertscore:
2025-05-12 05:06:32,217 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:06:32,217 - evaluate - INFO -     0.6905 — Как можно проверить подлинность диплома в России?
2025-05-12 05:06:32,217 - evaluate - INFO -     0.6459 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:06:32,217 - evaluate - INFO -     0.6143 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:06:32,217 - evaluate - INFO -   Худшие 3:
2025-05-12 05:06:32,217 - evaluate - INFO -     0.6905 — Как можно проверить подлинность диплома в России?
2025-05-12 05:06:32,217 - evaluate - INFO -     0.6459 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:06:32,217 - evaluate - INFO -     0.6143 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:06:32,217 - evaluate - INFO - 
context_recall_manual:
2025-05-12 05:06:32,217 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:06:32,217 - evaluate - INFO -     1.5000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:06:32,217 - evaluate - INFO -     1.5000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:06:32,217 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:06:32,217 - evaluate - INFO -   Худшие 3:
2025-05-12 05:06:32,217 - evaluate - INFO -     1.5000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:06:32,217 - evaluate - INFO -     1.5000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:06:32,217 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:06:32,217 - evaluate - INFO - 
context_precision_manual:
2025-05-12 05:06:32,217 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:06:32,217 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:06:32,217 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:06:32,217 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:06:32,217 - evaluate - INFO -   Худшие 3:
2025-05-12 05:06:32,217 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:06:32,217 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:06:32,217 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:06:32,217 - evaluate - INFO - 
faithfulness_semantic:
2025-05-12 05:06:32,218 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:06:32,218 - evaluate - INFO -     0.9682 — Как можно проверить подлинность диплома в России?
2025-05-12 05:06:32,218 - evaluate - INFO -     0.9313 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:06:32,218 - evaluate - INFO -     0.9058 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:06:32,218 - evaluate - INFO -   Худшие 3:
2025-05-12 05:06:32,218 - evaluate - INFO -     0.9682 — Как можно проверить подлинность диплома в России?
2025-05-12 05:06:32,218 - evaluate - INFO -     0.9313 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:06:32,218 - evaluate - INFO -     0.9058 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:06:32,218 - evaluate - INFO - 
llm_relevance:
2025-05-12 05:06:32,218 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:06:32,218 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:06:32,218 - evaluate - INFO -     0.8000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:06:32,218 - evaluate - INFO -     0.7000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:06:32,218 - evaluate - INFO -   Худшие 3:
2025-05-12 05:06:32,218 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:06:32,218 - evaluate - INFO -     0.8000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:06:32,218 - evaluate - INFO -     0.7000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:06:32,218 - evaluate - INFO - 
llm_faithfulness:
2025-05-12 05:06:32,218 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:06:32,218 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:06:32,218 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:06:32,218 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:06:32,218 - evaluate - INFO -   Худшие 3:
2025-05-12 05:06:32,218 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:06:32,218 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:06:32,218 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:06:32,219 - ragas._analytics - DEBUG - AnalyticsBatcher shutdown complete
2025-05-12 05:09:07,747 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:09:07,748 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:09:07,767 - evaluate - INFO - Оценка вопроса: Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:09:07,770 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:8000
2025-05-12 05:09:08,073 - urllib3.connectionpool - DEBUG - http://localhost:8000 "POST /token HTTP/1.1" 200 173
2025-05-12 05:09:08,074 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:8000
2025-05-12 05:09:18,008 - urllib3.connectionpool - DEBUG - http://localhost:8000 "POST /ask HTTP/1.1" 200 4144
2025-05-12 05:09:18,010 - evaluate - INFO - Получен ответ от API для вопроса: Что проверяет налоговая при оц...
2025-05-12 05:09:18,010 - evaluate.metrics - DEBUG - Начинаем вычисление ROUGE-L
2025-05-12 05:09:18,011 - absl - INFO - Using default tokenizer.
2025-05-12 05:09:18,011 - evaluate.metrics - DEBUG - ROUGE-L выполнен успешно, значение: 0
2025-05-12 05:09:18,012 - evaluate.metrics - DEBUG - Начинаем вычисление BERTScore
2025-05-12 05:09:18,016 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): huggingface.co:443
2025-05-12 05:09:18,739 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /bert-base-multilingual-cased/resolve/main/tokenizer_config.json HTTP/1.1" 200 0
2025-05-12 05:09:18,972 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /bert-base-multilingual-cased/resolve/main/config.json HTTP/1.1" 200 0
2025-05-12 05:09:21,600 - evaluate.metrics - DEBUG - BERTScore выполнен успешно, значение: 0.6459
2025-05-12 05:09:21,600 - evaluate.metrics - DEBUG - Начинаем вычисление перекрытия контекста
2025-05-12 05:09:21,704 - evaluate.metrics - DEBUG - Перекрытие контекста выполнено успешно. Recall: 1.5, Precision: 1.0
2025-05-12 05:09:21,704 - evaluate.metrics - DEBUG - Начинаем вычисление семантической достоверности (faithfulness)
2025-05-12 05:09:21,752 - evaluate.metrics - DEBUG - Семантическая достоверность выполнена успешно, значение: 0.9058
2025-05-12 05:09:21,752 - evaluate.metrics - INFO - Начинаем вычисление метрик RAGAS
2025-05-12 05:09:21,752 - evaluate.metrics - DEBUG - Подготовка данных для RAGAS
2025-05-12 05:09:21,752 - evaluate.metrics - DEBUG - Создание датасета из данных
2025-05-12 05:09:21,773 - evaluate.metrics - INFO - RAGAS data: {'question': ['Что проверяет налоговая при оценке надежности компании?'], 'answer': ['Налоговая проверяет надежность компании путем требования разъяснений и документов от компании и её контрагентов, аудиторов. Они также приглашают на беседу сотрудников компании и её контрагентов, используют переводчика для документов на иностранном языке, а также экспертов для исследования свойств предметов (например, фармацевтов, профессоров, художников, учителей). Кроме того, они осматривают помещения и документы компании.'], 'contexts': [['Вот что они делают для проверки:\n• Требуют разъяснения и документы у компании и её контрагентов, аудиторов. Про правила и порядок рассказывают статьи 93, 93.1, 93.2 НК РФ. • Приглашают на беседу в налоговую сотрудников компании и её контрагентов. • Привлекают переводчика, если документы на иностранном языке. • Привлекают экспертов, если нужно исследовать свойства предметов. Например, фармацевтов, профессоров, художников, учителей. Компания может давать своего эксперта. • Осматривают помещения и документы.', '• Чтобы избежать проблем в будущем, следите за полнотой, корректностью и актуальностью сведений в ЕГРЮЛ. Проверить данные можно скачав выписку на сайте налоговой.', 'Если на этом этапе будут несоответствия по одному или нескольким пунктам, налоговики закончат оценку. В компанию придёт выписка с критериями, которым компания не соответствует. Материалы для бизнеса в телеграм-канале Справочной\nПолучайте ежедневные дайджесты новостей и разборы законов, читайте истории предпринимателей и узнавайте о господдержке для бизнеса\nЧто будут проверять дальше.']], 'ground_truths': [['Записи в реестрах, наличие долгов, достоверность информации, показатели ликвидности и платёжеспособности.']]}
2025-05-12 05:09:21,773 - evaluate.metrics - DEBUG - Метрики RAGAS: [answer_relevancy, faithfulness]
2025-05-12 05:09:21,773 - evaluate.metrics - DEBUG - Запуск evaluate() с RAGAS метриками
2025-05-12 05:09:21,779 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:09:22,716 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:09:22,741 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:09:22,741 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:09:23,059 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:09:23,059 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:09:23,064 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:09:23,064 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:09:23,068 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:09:23,068 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:09:23,122 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Generate a question for the given answer and Identify if answer is noncommittal. Give noncommittal as 1 if the answer is noncommittal and 0 if the answer is committal. A noncommittal answer is one that is evasive, vague, or ambiguous. For example, "I don\'t know" or "I\'m not sure" are noncommittal answers\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"question": {"title": "Question", "type": "string"}, "noncommittal": {"title": "Noncommittal", "type": "integer"}}, "required": ["question", "noncommittal"], "title": "ResponseRelevanceOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "response": "Albert Einstein was born in Germany."\n}\nOutput: {\n    "question": "Where was Albert Einstein born?",\n    "noncommittal": 0\n}\n\nExample 2\nInput: {\n    "response": "I don\'t know about the  groundbreaking feature of the smartphone invented in 2023 as am unaware of information beyond 2022. "\n}\nOutput: {\n    "question": "What was the groundbreaking feature of the smartphone invented in 2023?",\n    "noncommittal": 1\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "response": "Налоговая проверяет надежность компании путем требования разъяснений и документов от компании и её контрагентов, аудиторов. Они также приглашают на беседу сотрудников компании и её контрагентов, используют переводчика для документов на иностранном языке, а также экспертов для исследования свойств предметов (например, фармацевтов, профессоров, художников, учителей). Кроме того, они осматривают помещения и документы компании."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-a9ce3602-b0a0-4f26-9882-9b48bc104b6c'}
2025-05-12 05:09:23,123 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:09:23,127 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:09:23,128 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Given a question and an answer, analyze the complexity of each sentence in the answer. Break down each sentence into one or more fully understandable statements. Ensure that no pronouns are used in any statement. Format the outputs in JSON.\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"statements": {"description": "The generated statements", "items": {"type": "string"}, "title": "Statements", "type": "array"}}, "required": ["statements"], "title": "StatementGeneratorOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "question": "Who was Albert Einstein and what is he best known for?",\n    "answer": "He was a German-born theoretical physicist, widely acknowledged to be one of the greatest and most influential physicists of all time. He was best known for developing the theory of relativity, he also made important contributions to the development of the theory of quantum mechanics."\n}\nOutput: {\n    "statements": [\n        "Albert Einstein was a German-born theoretical physicist.",\n        "Albert Einstein is recognized as one of the greatest and most influential physicists of all time.",\n        "Albert Einstein was best known for developing the theory of relativity.",\n        "Albert Einstein also made important contributions to the development of the theory of quantum mechanics."\n    ]\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "question": "Что проверяет налоговая при оценке надежности компании?",\n    "answer": "Налоговая проверяет надежность компании путем требования разъяснений и документов от компании и её контрагентов, аудиторов. Они также приглашают на беседу сотрудников компании и её контрагентов, используют переводчика для документов на иностранном языке, а также экспертов для исследования свойств предметов (например, фармацевтов, профессоров, художников, учителей). Кроме того, они осматривают помещения и документы компании."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-1b6948ca-8780-410d-9d89-0f101290d287'}
2025-05-12 05:09:23,128 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:09:23,128 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Generate a question for the given answer and Identify if answer is noncommittal. Give noncommittal as 1 if the answer is noncommittal and 0 if the answer is committal. A noncommittal answer is one that is evasive, vague, or ambiguous. For example, "I don\'t know" or "I\'m not sure" are noncommittal answers\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"question": {"title": "Question", "type": "string"}, "noncommittal": {"title": "Noncommittal", "type": "integer"}}, "required": ["question", "noncommittal"], "title": "ResponseRelevanceOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "response": "Albert Einstein was born in Germany."\n}\nOutput: {\n    "question": "Where was Albert Einstein born?",\n    "noncommittal": 0\n}\n\nExample 2\nInput: {\n    "response": "I don\'t know about the  groundbreaking feature of the smartphone invented in 2023 as am unaware of information beyond 2022. "\n}\nOutput: {\n    "question": "What was the groundbreaking feature of the smartphone invented in 2023?",\n    "noncommittal": 1\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "response": "Налоговая проверяет надежность компании путем требования разъяснений и документов от компании и её контрагентов, аудиторов. Они также приглашают на беседу сотрудников компании и её контрагентов, используют переводчика для документов на иностранном языке, а также экспертов для исследования свойств предметов (например, фармацевтов, профессоров, художников, учителей). Кроме того, они осматривают помещения и документы компании."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-f452adba-7680-403b-8b89-156f6231cddc'}
2025-05-12 05:09:23,129 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:09:23,129 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:09:23,129 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:09:23,129 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Generate a question for the given answer and Identify if answer is noncommittal. Give noncommittal as 1 if the answer is noncommittal and 0 if the answer is committal. A noncommittal answer is one that is evasive, vague, or ambiguous. For example, "I don\'t know" or "I\'m not sure" are noncommittal answers\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"question": {"title": "Question", "type": "string"}, "noncommittal": {"title": "Noncommittal", "type": "integer"}}, "required": ["question", "noncommittal"], "title": "ResponseRelevanceOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "response": "Albert Einstein was born in Germany."\n}\nOutput: {\n    "question": "Where was Albert Einstein born?",\n    "noncommittal": 0\n}\n\nExample 2\nInput: {\n    "response": "I don\'t know about the  groundbreaking feature of the smartphone invented in 2023 as am unaware of information beyond 2022. "\n}\nOutput: {\n    "question": "What was the groundbreaking feature of the smartphone invented in 2023?",\n    "noncommittal": 1\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "response": "Налоговая проверяет надежность компании путем требования разъяснений и документов от компании и её контрагентов, аудиторов. Они также приглашают на беседу сотрудников компании и её контрагентов, используют переводчика для документов на иностранном языке, а также экспертов для исследования свойств предметов (например, фармацевтов, профессоров, художников, учителей). Кроме того, они осматривают помещения и документы компании."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-a227d3df-80f2-4e22-ab47-a4f29eb7dfa8'}
2025-05-12 05:09:23,129 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:09:23,130 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:09:23,206 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x322c537c0>
2025-05-12 05:09:23,206 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x31e703ba0> server_hostname='api.openai.com' timeout=None
2025-05-12 05:09:23,207 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x31e888280>
2025-05-12 05:09:23,207 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x31e703ba0> server_hostname='api.openai.com' timeout=None
2025-05-12 05:09:23,207 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x322c3ea30>
2025-05-12 05:09:23,207 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x31e703ba0> server_hostname='api.openai.com' timeout=None
2025-05-12 05:09:23,207 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x31e8886a0>
2025-05-12 05:09:23,207 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x31e703ba0> server_hostname='api.openai.com' timeout=None
2025-05-12 05:09:23,415 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x322c41700>
2025-05-12 05:09:23,416 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:09:23,416 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:09:23,416 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:09:23,416 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:09:23,416 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:09:23,429 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x31e873e20>
2025-05-12 05:09:23,430 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:09:23,430 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:09:23,430 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:09:23,430 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:09:23,431 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:09:23,432 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x31e8882e0>
2025-05-12 05:09:23,432 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:09:23,433 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:09:23,433 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:09:23,434 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:09:23,434 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:09:23,434 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x322c53f40>
2025-05-12 05:09:23,434 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:09:23,435 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:09:23,435 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:09:23,435 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:09:23,435 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:09:24,347 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:09:24 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'653'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'659'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9998'), (b'x-ratelimit-remaining-tokens', b'198911'), (b'x-ratelimit-reset-requests', b'17.255s'), (b'x-ratelimit-reset-tokens', b'326ms'), (b'x-request-id', b'req_8b3ec8d749c9fbe5373e7d2e3e403d87'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=TEzctsHyPmN8SJglKgzTpyUbVsWjMiJnzWWKYglRTG8-1747008564-1.0.1.1-9DVIDNEsX013EFvllWgB3vyLPd1jdpgpm6hk6VJd8Qm8SnlgP8jVobroJ1XaeWRPLR5Ktsbi4u.Elo7qraMmPpLbbjozK2dK4lU1bqo..bQ; path=/; expires=Mon, 12-May-25 00:39:24 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=pgAMECKjq7SRRCe6IiK4CD3wYjweQa1mgFkq4liXppE-1747008564300-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5afe19d1966fe-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:09:24,348 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:09:24,349 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:09:24,350 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:09:24,350 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:09:24,350 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:09:24,350 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:09:24 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '653'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '659'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9998'), ('x-ratelimit-remaining-tokens', '198911'), ('x-ratelimit-reset-requests', '17.255s'), ('x-ratelimit-reset-tokens', '326ms'), ('x-request-id', 'req_8b3ec8d749c9fbe5373e7d2e3e403d87'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=TEzctsHyPmN8SJglKgzTpyUbVsWjMiJnzWWKYglRTG8-1747008564-1.0.1.1-9DVIDNEsX013EFvllWgB3vyLPd1jdpgpm6hk6VJd8Qm8SnlgP8jVobroJ1XaeWRPLR5Ktsbi4u.Elo7qraMmPpLbbjozK2dK4lU1bqo..bQ; path=/; expires=Mon, 12-May-25 00:39:24 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=pgAMECKjq7SRRCe6IiK4CD3wYjweQa1mgFkq4liXppE-1747008564300-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5afe19d1966fe-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:09:24,351 - openai._base_client - DEBUG - request_id: req_8b3ec8d749c9fbe5373e7d2e3e403d87
2025-05-12 05:09:24,363 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:09:24 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'663'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'667'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9996'), (b'x-ratelimit-remaining-tokens', b'197802'), (b'x-ratelimit-reset-requests', b'34.548s'), (b'x-ratelimit-reset-tokens', b'659ms'), (b'x-request-id', b'req_64ea77d35e2c1ccc9a9f4bd525c1279d'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=Y4P60LIDYoEsDfP6L4cLn4HQNSp_dk3tChKA7XS9JsI-1747008564-1.0.1.1-qFWi.7tjInIm1MeCUi3as46XzEhY61TEZ.SUFXimMpeX.k6fXYlsZjsou2Zlcq_AGkgtrD5tgR7ohVYwZgVQ1jggLSTGnVy79BqjZP4u5fM; path=/; expires=Mon, 12-May-25 00:39:24 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=r9W48b8V.gXsEOqpLs6ApYBuJKVS7HiMHW_8q8ycxv0-1747008564314-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5afe1a8402383-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:09:24,364 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:09:24,364 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:09:24,365 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:09:24,365 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:09:24,365 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:09:24,365 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:09:24 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '663'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '667'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9996'), ('x-ratelimit-remaining-tokens', '197802'), ('x-ratelimit-reset-requests', '34.548s'), ('x-ratelimit-reset-tokens', '659ms'), ('x-request-id', 'req_64ea77d35e2c1ccc9a9f4bd525c1279d'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=Y4P60LIDYoEsDfP6L4cLn4HQNSp_dk3tChKA7XS9JsI-1747008564-1.0.1.1-qFWi.7tjInIm1MeCUi3as46XzEhY61TEZ.SUFXimMpeX.k6fXYlsZjsou2Zlcq_AGkgtrD5tgR7ohVYwZgVQ1jggLSTGnVy79BqjZP4u5fM; path=/; expires=Mon, 12-May-25 00:39:24 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=r9W48b8V.gXsEOqpLs6ApYBuJKVS7HiMHW_8q8ycxv0-1747008564314-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5afe1a8402383-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:09:24,365 - openai._base_client - DEBUG - request_id: req_64ea77d35e2c1ccc9a9f4bd525c1279d
2025-05-12 05:09:25,172 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:09:25 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'1415'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1421'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9997'), (b'x-ratelimit-remaining-tokens', b'198394'), (b'x-ratelimit-reset-requests', b'25.89s'), (b'x-ratelimit-reset-tokens', b'481ms'), (b'x-request-id', b'req_47704a5a48be43b63d351501dad48eb6'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=bUPlt40E2nWOL0MNT5RM5ALpXDTqAkxrqfqvPaJDHY8-1747008565-1.0.1.1-aEgj0995uHC47nfJ0o7iNHyxauYjLDDi.gVwBxAsZlU270u5Dek39m4kfNrLFpKO64RiC05lTIYh6jNLSFA_ol0YnavmTC.xO6vHT65rSbA; path=/; expires=Mon, 12-May-25 00:39:25 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=qWnBjzdIl93f2IS_ooGr5fBfbSWgij_reCbe0exo2Rs-1747008565065-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5afe1afa5b1cb-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:09:25,173 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:09:25,173 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:09:25,173 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:09:25,173 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:09:25,174 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:09:25,174 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:09:25 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '1415'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '1421'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9997'), ('x-ratelimit-remaining-tokens', '198394'), ('x-ratelimit-reset-requests', '25.89s'), ('x-ratelimit-reset-tokens', '481ms'), ('x-request-id', 'req_47704a5a48be43b63d351501dad48eb6'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=bUPlt40E2nWOL0MNT5RM5ALpXDTqAkxrqfqvPaJDHY8-1747008565-1.0.1.1-aEgj0995uHC47nfJ0o7iNHyxauYjLDDi.gVwBxAsZlU270u5Dek39m4kfNrLFpKO64RiC05lTIYh6jNLSFA_ol0YnavmTC.xO6vHT65rSbA; path=/; expires=Mon, 12-May-25 00:39:25 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=qWnBjzdIl93f2IS_ooGr5fBfbSWgij_reCbe0exo2Rs-1747008565065-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5afe1afa5b1cb-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:09:25,174 - openai._base_client - DEBUG - request_id: req_47704a5a48be43b63d351501dad48eb6
2025-05-12 05:09:25,292 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'post_parser': <function Embeddings.create.<locals>.parser at 0x31e817dc0>, 'json_data': {'input': [[73919, 25657, 69556, 4329, 8341, 13373, 3114, 14837, 6856, 36497, 37405, 8379, 10589, 5372, 53671, 6850, 23680, 50436, 68742, 77573, 14332, 1840, 30]], 'model': 'text-embedding-ada-002', 'encoding_format': 'base64'}, 'idempotency_key': 'stainless-python-retry-4f05e86f-d897-437d-9455-500069a1681f'}
2025-05-12 05:09:25,293 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/embeddings
2025-05-12 05:09:25,293 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:09:25,295 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x32325d760>
2025-05-12 05:09:25,295 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x31e703e40> server_hostname='api.openai.com' timeout=None
2025-05-12 05:09:25,518 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x32325d730>
2025-05-12 05:09:25,519 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:09:25,519 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:09:25,519 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:09:25,520 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:09:25,520 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:09:26,001 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:09:25 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-model', b'text-embedding-ada-002-v2'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'83'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'via', b'envoy-router-66d9d5f44f-8mm7l'), (b'x-envoy-upstream-service-time', b'85'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'1000000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'999976'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'1ms'), (b'x-request-id', b'req_81d12b975b724664c0f5b2169a0169f1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=QbWYcfCVArGhj9B.quA0sX3voV1ANPUhtm9riq9cNLg-1747008565-1.0.1.1-lDAZpbmRlHTYWV.U_0ytY.rR2kE9nvdoCaBhEqGMKTSKh08gxh4G0wcgP0F2DSVQ0iNx7.Ex9cdLHs3I1WRugWRXIcw4zotwnIeUNowAF9k; path=/; expires=Mon, 12-May-25 00:39:25 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=.ouLzecmPpZo2t5vqvpYM2B6LQHLFU_KJekDIk4iOpE-1747008565952-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5afeeaa4a9ff4-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:09:26,002 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 05:09:26,002 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:09:26,003 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:09:26,003 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:09:26,003 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:09:26,003 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/embeddings "200 OK" Headers([('date', 'Mon, 12 May 2025 00:09:25 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-allow-origin', '*'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-model', 'text-embedding-ada-002-v2'), ('openai-organization', 'tochka'), ('openai-processing-ms', '83'), ('openai-version', '2020-10-01'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('via', 'envoy-router-66d9d5f44f-8mm7l'), ('x-envoy-upstream-service-time', '85'), ('x-ratelimit-limit-requests', '3000'), ('x-ratelimit-limit-tokens', '1000000'), ('x-ratelimit-remaining-requests', '2999'), ('x-ratelimit-remaining-tokens', '999976'), ('x-ratelimit-reset-requests', '20ms'), ('x-ratelimit-reset-tokens', '1ms'), ('x-request-id', 'req_81d12b975b724664c0f5b2169a0169f1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=QbWYcfCVArGhj9B.quA0sX3voV1ANPUhtm9riq9cNLg-1747008565-1.0.1.1-lDAZpbmRlHTYWV.U_0ytY.rR2kE9nvdoCaBhEqGMKTSKh08gxh4G0wcgP0F2DSVQ0iNx7.Ex9cdLHs3I1WRugWRXIcw4zotwnIeUNowAF9k; path=/; expires=Mon, 12-May-25 00:39:25 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=.ouLzecmPpZo2t5vqvpYM2B6LQHLFU_KJekDIk4iOpE-1747008565952-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5afeeaa4a9ff4-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:09:26,004 - openai._base_client - DEBUG - request_id: req_81d12b975b724664c0f5b2169a0169f1
2025-05-12 05:09:26,006 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'post_parser': <function Embeddings.create.<locals>.parser at 0x31e86a4c0>, 'json_data': {'input': [[27435, 16248, 13373, 3114, 14837, 6856, 36497, 69556, 4329, 8341, 6850, 23680, 50436, 61379, 77573, 14332, 1840, 30], [27435, 16248, 13373, 3114, 14837, 6856, 36497, 69556, 4329, 8341, 6850, 23680, 50436, 61379, 77573, 14332, 1840, 30], [27435, 16248, 13373, 3114, 14837, 6856, 36497, 69556, 4329, 8341, 6850, 23680, 50436, 61379, 77573, 14332, 1840, 30]], 'model': 'text-embedding-ada-002', 'encoding_format': 'base64'}, 'idempotency_key': 'stainless-python-retry-9e655b6f-089b-4139-8318-643c33c33f9f'}
2025-05-12 05:09:26,006 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/embeddings
2025-05-12 05:09:26,007 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:09:26,007 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:09:26,007 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:09:26,007 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:09:26,007 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:09:26,386 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:09:26 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-model', b'text-embedding-ada-002-v2'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'99'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'via', b'envoy-router-d874d7d7b-llgp5'), (b'x-envoy-upstream-service-time', b'103'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'1000000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'999946'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'3ms'), (b'x-request-id', b'req_5aa7e0f9063798a817008b701689c4ec'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5aff1cc4b9ff4-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:09:26,387 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 05:09:26,388 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:09:26,534 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:09:26,534 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:09:26,534 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:09:26,534 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/embeddings "200 OK" Headers({'date': 'Mon, 12 May 2025 00:09:26 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Request-ID', 'openai-model': 'text-embedding-ada-002-v2', 'openai-organization': 'tochka', 'openai-processing-ms': '99', 'openai-version': '2020-10-01', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'via': 'envoy-router-d874d7d7b-llgp5', 'x-envoy-upstream-service-time': '103', 'x-ratelimit-limit-requests': '3000', 'x-ratelimit-limit-tokens': '1000000', 'x-ratelimit-remaining-requests': '2999', 'x-ratelimit-remaining-tokens': '999946', 'x-ratelimit-reset-requests': '20ms', 'x-ratelimit-reset-tokens': '3ms', 'x-request-id': 'req_5aa7e0f9063798a817008b701689c4ec', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5aff1cc4b9ff4-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:09:26,534 - openai._base_client - DEBUG - request_id: req_5aa7e0f9063798a817008b701689c4ec
2025-05-12 05:09:27,213 - ragas._analytics - DEBUG - Flushing triggered for 1 events
2025-05-12 05:09:27,213 - ragas._analytics - DEBUG - Grouped events: {('evaluation', ('answer_relevancy',), 'SINGLE_TURN'): EvaluationEvent(event_type='evaluation', user_id='a-c57b054261b446ec83e28aea108cead0', ragas_version='0.2.15', metrics=['answer_relevancy'], num_rows=1, evaluation_type='SINGLE_TURN', language='english')}
2025-05-12 05:09:27,215 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:09:27,328 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:09:27 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'3652'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3658'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'199362'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'191ms'), (b'x-request-id', b'req_fef1623f5be09dbf4f114106ada8d8a2'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=UcLUitc8OOK6yjtWZIt9ileUATBN2GTkZ8vuwiDS3BI-1747008567-1.0.1.1-zL6842dUEfHzeFJy9VgU6HN015CcCraIGTiahdGV4vEGHg5xE3Xh7jdVbib0JIEbg61DZZ1kBJaRM38JWMW4TzxacuXiLx_7Ojv4eSy9bSA; path=/; expires=Mon, 12-May-25 00:39:27 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=LH6do_OHkDKOltKsOd.rt7I6L_QQnUrBCf5rHEqR1JQ-1747008567287-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5afe18dc8feaf-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:09:27,329 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:09:27,329 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:09:27,330 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:09:27,330 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:09:27,330 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:09:27,330 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:09:27 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '3652'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '3658'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '199362'), ('x-ratelimit-reset-requests', '8.64s'), ('x-ratelimit-reset-tokens', '191ms'), ('x-request-id', 'req_fef1623f5be09dbf4f114106ada8d8a2'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=UcLUitc8OOK6yjtWZIt9ileUATBN2GTkZ8vuwiDS3BI-1747008567-1.0.1.1-zL6842dUEfHzeFJy9VgU6HN015CcCraIGTiahdGV4vEGHg5xE3Xh7jdVbib0JIEbg61DZZ1kBJaRM38JWMW4TzxacuXiLx_7Ojv4eSy9bSA; path=/; expires=Mon, 12-May-25 00:39:27 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=LH6do_OHkDKOltKsOd.rt7I6L_QQnUrBCf5rHEqR1JQ-1747008567287-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5afe18dc8feaf-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:09:27,331 - openai._base_client - DEBUG - request_id: req_fef1623f5be09dbf4f114106ada8d8a2
2025-05-12 05:09:27,336 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Your task is to judge the faithfulness of a series of statements based on a given context. For each statement you must return verdict as 1 if the statement can be directly inferred based on the context or 0 if the statement can not be directly inferred based on the context.\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"$defs": {"StatementFaithfulnessAnswer": {"properties": {"statement": {"description": "the original statement, word-by-word", "title": "Statement", "type": "string"}, "reason": {"description": "the reason of the verdict", "title": "Reason", "type": "string"}, "verdict": {"description": "the verdict(0/1) of the faithfulness.", "title": "Verdict", "type": "integer"}}, "required": ["statement", "reason", "verdict"], "title": "StatementFaithfulnessAnswer", "type": "object"}}, "properties": {"statements": {"items": {"$ref": "#/$defs/StatementFaithfulnessAnswer"}, "title": "Statements", "type": "array"}}, "required": ["statements"], "title": "NLIStatementOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "context": "John is a student at XYZ University. He is pursuing a degree in Computer Science. He is enrolled in several courses this semester, including Data Structures, Algorithms, and Database Management. John is a diligent student and spends a significant amount of time studying and completing assignments. He often stays late in the library to work on his projects.",\n    "statements": [\n        "John is majoring in Biology.",\n        "John is taking a course on Artificial Intelligence.",\n        "John is a dedicated student.",\n        "John has a part-time job."\n    ]\n}\nOutput: {\n    "statements": [\n        {\n            "statement": "John is majoring in Biology.",\n            "reason": "John\'s major is explicitly mentioned as Computer Science. There is no information suggesting he is majoring in Biology.",\n            "verdict": 0\n        },\n        {\n            "statement": "John is taking a course on Artificial Intelligence.",\n            "reason": "The context mentions the courses John is currently enrolled in, and Artificial Intelligence is not mentioned. Therefore, it cannot be deduced that John is taking a course on AI.",\n            "verdict": 0\n        },\n        {\n            "statement": "John is a dedicated student.",\n            "reason": "The context states that he spends a significant amount of time studying and completing assignments. Additionally, it mentions that he often stays late in the library to work on his projects, which implies dedication.",\n            "verdict": 1\n        },\n        {\n            "statement": "John has a part-time job.",\n            "reason": "There is no information given in the context about John having a part-time job.",\n            "verdict": 0\n        }\n    ]\n}\n\nExample 2\nInput: {\n    "context": "Photosynthesis is a process used by plants, algae, and certain bacteria to convert light energy into chemical energy.",\n    "statements": [\n        "Albert Einstein was a genius."\n    ]\n}\nOutput: {\n    "statements": [\n        {\n            "statement": "Albert Einstein was a genius.",\n            "reason": "The context and statement are unrelated",\n            "verdict": 0\n        }\n    ]\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "context": "Вот что они делают для проверки:\\n• Требуют разъяснения и документы у компании и её контрагентов, аудиторов. Про правила и порядок рассказывают статьи 93, 93.1, 93.2 НК РФ. • Приглашают на беседу в налоговую сотрудников компании и её контрагентов. • Привлекают переводчика, если документы на иностранном языке. • Привлекают экспертов, если нужно исследовать свойства предметов. Например, фармацевтов, профессоров, художников, учителей. Компания может давать своего эксперта. • Осматривают помещения и документы.\\n• Чтобы избежать проблем в будущем, следите за полнотой, корректностью и актуальностью сведений в ЕГРЮЛ. Проверить данные можно скачав выписку на сайте налоговой.\\nЕсли на этом этапе будут несоответствия по одному или нескольким пунктам, налоговики закончат оценку. В компанию придёт выписка с критериями, которым компания не соответствует. Материалы для бизнеса в телеграм-канале Справочной\\nПолучайте ежедневные дайджесты новостей и разборы законов, читайте истории предпринимателей и узнавайте о господдержке для бизнеса\\nЧто будут проверять дальше.",\n    "statements": [\n        "Налоговая проверяет надежность компании.",\n        "Налоговая требует разъяснений и документов от компании и её контрагентов.",\n        "Налоговая требует документы от аудиторов.",\n        "Налоговая приглашает на беседу сотрудников компании.",\n        "Налоговая приглашает на беседу контрагентов.",\n        "Налоговая использует переводчика для документов на иностранном языке.",\n        "Налоговая использует экспертов для исследования свойств предметов.",\n        "Экспертами могут быть фармацевты.",\n        "Экспертами могут быть профессора.",\n        "Экспертами могут быть художники.",\n        "Экспертами могут быть учителя.",\n        "Налоговая осматривает помещения компании.",\n        "Налоговая осматривает документы компании."\n    ]\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-d38ca5ee-34c6-4138-a5c5-69973b4527a3'}
2025-05-12 05:09:27,337 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:09:27,337 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:09:27,337 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:09:27,338 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:09:27,338 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:09:27,338 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:09:27,634 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 402 78
2025-05-12 05:09:41,236 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:09:41 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'13619'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'13626'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9995'), (b'x-ratelimit-remaining-tokens', b'198307'), (b'x-ratelimit-reset-requests', b'39.271s'), (b'x-ratelimit-reset-tokens', b'507ms'), (b'x-request-id', b'req_07ef04b3faada30d260cf0156390662e'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5affa0d82b1cb-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:09:41,241 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:09:41,242 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:09:41,244 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:09:41,244 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:09:41,245 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:09:41,246 - httpcore.connection - DEBUG - close.started
2025-05-12 05:09:41,246 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:09:41,246 - httpcore.connection - DEBUG - close.started
2025-05-12 05:09:41,247 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:09:41,247 - httpcore.connection - DEBUG - close.started
2025-05-12 05:09:41,247 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:09:41,248 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:09:41 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '13619', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '13626', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9995', 'x-ratelimit-remaining-tokens': '198307', 'x-ratelimit-reset-requests': '39.271s', 'x-ratelimit-reset-tokens': '507ms', 'x-request-id': 'req_07ef04b3faada30d260cf0156390662e', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5affa0d82b1cb-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:09:41,248 - openai._base_client - DEBUG - request_id: req_07ef04b3faada30d260cf0156390662e
2025-05-12 05:09:41,268 - ragas._analytics - DEBUG - Flushing triggered for 1 events
2025-05-12 05:09:41,268 - ragas._analytics - DEBUG - Grouped events: {('evaluation', ('faithfulness',), 'SINGLE_TURN'): EvaluationEvent(event_type='evaluation', user_id='a-c57b054261b446ec83e28aea108cead0', ragas_version='0.2.15', metrics=['faithfulness'], num_rows=1, evaluation_type='SINGLE_TURN', language='english')}
2025-05-12 05:09:41,274 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:09:41,688 - ragas._analytics - DEBUG - Flushing triggered for 1 events
2025-05-12 05:09:41,688 - ragas._analytics - DEBUG - Grouped events: {('evaluation', ('faithfulness',), 'SINGLE_TURN'): EvaluationEvent(event_type='evaluation', user_id='a-c57b054261b446ec83e28aea108cead0', ragas_version='0.2.15', metrics=['faithfulness'], num_rows=1, evaluation_type='SINGLE_TURN', language='english')}
2025-05-12 05:09:41,690 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:09:41,714 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:09:41,716 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:09:42,099 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:09:42,158 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:09:42,159 - evaluate.metrics - DEBUG - Результат RAGAS: {'answer_relevancy': 0.9712, 'faithfulness': 0.8462}
2025-05-12 05:09:42,159 - evaluate.metrics - ERROR - Внутренняя ошибка при вычислении метрик RAGAS: 0
2025-05-12 05:09:42,213 - evaluate.metrics - ERROR - Traceback (most recent call last):
  File "/Users/tochka/Documents/RAG/rag/evaluation/metrics.py", line 135, in compute_all_metrics
    if "answer_relevancy" in ragas_result:
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/ragas/dataset_schema.py", line 446, in __getitem__
    return self._scores_dict[key]
KeyError: 0

2025-05-12 05:09:42,215 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'Ты - точный оценщик качества ответов. Отвечай только числом от 0 до 1.'}, {'role': 'user', 'content': '\n        Вопрос: Что проверяет налоговая при оценке надежности компании?\n        Ответ: Налоговая проверяет надежность компании путем требования разъяснений и документов от компании и её контрагентов, аудиторов. Они также приглашают на беседу сотрудников компании и её контрагентов, используют переводчика для документов на иностранном языке, а также экспертов для исследования свойств предметов (например, фармацевтов, профессоров, художников, учителей). Кроме того, они осматривают помещения и документы компании.\n\n        Насколько данный ответ релевантен вопросу, независимо от контекста? Ответь одним числом от 0 до 1.\n        '}], 'model': 'gpt-3.5-turbo', 'temperature': 0}, 'idempotency_key': 'stainless-python-retry-e1bd0f67-ae33-48aa-b29f-dfe1f6ef6d80'}
2025-05-12 05:09:42,216 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:09:42,216 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-05-12 05:09:42,292 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x31e89a400>
2025-05-12 05:09:42,292 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x31bc520b0> server_hostname='api.openai.com' timeout=5.0
2025-05-12 05:09:42,511 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x322c531f0>
2025-05-12 05:09:42,511 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:09:42,511 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:09:42,511 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:09:42,512 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:09:42,512 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:09:43,069 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:09:43 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'280'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'285'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'199682'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'95ms'), (b'x-request-id', b'req_a4387a2b151ab423495fe118a3c0b0f1'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=pqrJPBWg7LXvbYBF7Qp_NJkxslDSoG6nV6f8JAIf0UE-1747008583-1.0.1.1-.fzOfIz5OlDQG4sirPii1B1kvHfItFtZjk7zpTR0DKhQ6xUBisLm1qaCo8XjALaWcoLBGmSbSkd65oKQ2lkc36YhxK3JCHtXdp5IRnKmFB4; path=/; expires=Mon, 12-May-25 00:39:43 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=e1qpJhudwS1thxOD6XGWMr_Xis1wAmk5yu0y.yAwl88-1747008583023-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b058d9830e20-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:09:43,071 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:09:43,071 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:09:43,072 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:09:43,072 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:09:43,072 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:09:43,072 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:09:43 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '280'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '285'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '199682'), ('x-ratelimit-reset-requests', '8.64s'), ('x-ratelimit-reset-tokens', '95ms'), ('x-request-id', 'req_a4387a2b151ab423495fe118a3c0b0f1'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=pqrJPBWg7LXvbYBF7Qp_NJkxslDSoG6nV6f8JAIf0UE-1747008583-1.0.1.1-.fzOfIz5OlDQG4sirPii1B1kvHfItFtZjk7zpTR0DKhQ6xUBisLm1qaCo8XjALaWcoLBGmSbSkd65oKQ2lkc36YhxK3JCHtXdp5IRnKmFB4; path=/; expires=Mon, 12-May-25 00:39:43 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=e1qpJhudwS1thxOD6XGWMr_Xis1wAmk5yu0y.yAwl88-1747008583023-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5b058d9830e20-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:09:43,072 - openai._base_client - DEBUG - request_id: req_a4387a2b151ab423495fe118a3c0b0f1
2025-05-12 05:09:43,075 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'Ты - точный оценщик качества ответов. Отвечай только числом от 0 до 1.'}, {'role': 'user', 'content': '\n        Ответ: Налоговая проверяет надежность компании путем требования разъяснений и документов от компании и её контрагентов, аудиторов. Они также приглашают на беседу сотрудников компании и её контрагентов, используют переводчика для документов на иностранном языке, а также экспертов для исследования свойств предметов (например, фармацевтов, профессоров, художников, учителей). Кроме того, они осматривают помещения и документы компании.\n        Контекст: Вот что они делают для проверки:\n• Требуют разъяснения и документы у компании и её контрагентов, аудиторов. Про правила и порядок рассказывают статьи 93, 93.1, 93.2 НК РФ. • Приглашают на беседу в налоговую сотрудников компании и её контрагентов. • Привлекают переводчика, если документы на иностранном языке. • Привлекают экспертов, если нужно исследовать свойства предметов. Например, фармацевтов, профессоров, художников, учителей. Компания может давать своего эксперта. • Осматривают помещения и документы. • Чтобы избежать проблем в будущем, следите за полнотой, корректностью и актуальностью сведений в ЕГРЮЛ. Проверить данные можно скачав выписку на сайте налоговой. Если на этом этапе будут несоответствия по одному или нескольким пунктам, налоговики закончат оценку. В компанию придёт выписка с критериями, которым компания не соответствует. Материалы для бизнеса в телеграм-канале Справочной\nПолучайте ежедневные дайджесты новостей и разборы законов, читайте истории предпринимателей и узнавайте о господдержке для бизнеса\nЧто будут проверять дальше.\n\n        Насколько данный ответ соответствует только предоставленному контексту, без добавления лишней информации? Ответь одним числом от 0 до 1.\n        '}], 'model': 'gpt-3.5-turbo', 'temperature': 0}, 'idempotency_key': 'stainless-python-retry-72e83d37-01fe-428b-a3ff-76caeac41446'}
2025-05-12 05:09:43,077 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:09:43,077 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:09:43,078 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:09:43,078 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:09:43,078 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:09:43,078 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:09:43,553 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:09:43 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'198'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'202'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9998'), (b'x-ratelimit-remaining-tokens', b'199202'), (b'x-ratelimit-reset-requests', b'16.748s'), (b'x-ratelimit-reset-tokens', b'239ms'), (b'x-request-id', b'req_41f4bc284631c37cb53f8d342ae5d70a'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b05c6bbf0e20-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:09:43,554 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:09:43,555 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:09:43,555 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:09:43,555 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:09:43,555 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:09:43,555 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:09:43 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '198', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '202', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9998', 'x-ratelimit-remaining-tokens': '199202', 'x-ratelimit-reset-requests': '16.748s', 'x-ratelimit-reset-tokens': '239ms', 'x-request-id': 'req_41f4bc284631c37cb53f8d342ae5d70a', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5b05c6bbf0e20-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:09:43,556 - openai._base_client - DEBUG - request_id: req_41f4bc284631c37cb53f8d342ae5d70a
2025-05-12 05:09:43,557 - evaluate - INFO - Оценка вопроса: Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:09:43,558 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:8000
2025-05-12 05:09:43,864 - urllib3.connectionpool - DEBUG - http://localhost:8000 "POST /token HTTP/1.1" 200 173
2025-05-12 05:09:43,866 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:8000
2025-05-12 05:10:04,343 - urllib3.connectionpool - DEBUG - http://localhost:8000 "POST /ask HTTP/1.1" 200 6161
2025-05-12 05:10:04,346 - evaluate - INFO - Получен ответ от API для вопроса: Как проверить китайского поста...
2025-05-12 05:10:04,347 - evaluate.metrics - DEBUG - Начинаем вычисление ROUGE-L
2025-05-12 05:10:04,347 - absl - INFO - Using default tokenizer.
2025-05-12 05:10:04,347 - evaluate.metrics - DEBUG - ROUGE-L выполнен успешно, значение: 0.0
2025-05-12 05:10:04,347 - evaluate.metrics - DEBUG - Начинаем вычисление BERTScore
2025-05-12 05:10:04,516 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /bert-base-multilingual-cased/resolve/main/tokenizer_config.json HTTP/1.1" 200 0
2025-05-12 05:10:04,803 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /bert-base-multilingual-cased/resolve/main/config.json HTTP/1.1" 200 0
2025-05-12 05:10:07,443 - evaluate.metrics - DEBUG - BERTScore выполнен успешно, значение: 0.6143
2025-05-12 05:10:07,443 - evaluate.metrics - DEBUG - Начинаем вычисление перекрытия контекста
2025-05-12 05:10:07,539 - evaluate.metrics - DEBUG - Перекрытие контекста выполнено успешно. Recall: 1.0, Precision: 1.0
2025-05-12 05:10:07,539 - evaluate.metrics - DEBUG - Начинаем вычисление семантической достоверности (faithfulness)
2025-05-12 05:10:07,589 - evaluate.metrics - DEBUG - Семантическая достоверность выполнена успешно, значение: 0.9313
2025-05-12 05:10:07,589 - evaluate.metrics - INFO - Начинаем вычисление метрик RAGAS
2025-05-12 05:10:07,589 - evaluate.metrics - DEBUG - Подготовка данных для RAGAS
2025-05-12 05:10:07,589 - evaluate.metrics - DEBUG - Создание датасета из данных
2025-05-12 05:10:07,609 - evaluate.metrics - INFO - RAGAS data: {'question': ['Как проверить китайского поставщика перед заключением контракта?'], 'answer': ['Чтобы проверить надёжность китайского поставщика перед заключением контракта, следующие шаги рекомендованы. Сначала необходимо получить документы от поставщика, такие как свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара. Эти документы можно перевести на русский язык при помощи Google Translate, просто указав камеру на документ смартфоном. Если поставщик предоставил все необходимые документы, это может говорить о том, что он надёжный и в работе с ним не будет сюрпризов.\n\nДалее, важно подписать внешнеторговый контракт, который должен содержать все условия сделки, правила разрешения споров и форс-мажорные обстоятельства, которые могут негативно повлиять на исполнение обязательств. Контракт может быть адаптирован под себя по типовому варианту контракта. Обычно он состоит из двух частей на языке покупателя и продавца, чтобы не было разного толкования условий сделки.\n\nКроме того, для наладить общение с китайским поставщиком следует общаться на китайском языке, так как редко встречаются сотрудники фабрик, которые знают иностранные языки даже английский. Для детального обсуждения условий сделки и прописания всего подробно в контракте можно найти переводчика.'], 'contexts': [['Чтобы проверить китайского поставщика, дополнительно запросите:\n• свидетельство о регистрации поставщика в таможенной службе КНР;\n• лицензию КНР на экспорт товара. Лицензии и сертификаты можете перевести на русский через google объектив, наведя камеру смартфона на документ. Если поставщик предоставил все документы, значит, это надёжный поставщик и в работе с ним не будет сюрпризов.', '• Запросите банковские реквизиты и проверьте, чтобы счёт был открыт на компанию, а не на её директора. Подробнее о том, как проверить надёжность поставщика, читайте в статье Справочной. Как провести переговоры\nЧтобы наладить общение с китайским поставщиком, придерживайтесь таких правил:\n• Общайтесь на китайском. На фабриках редко есть сотрудники, которые знают иностранные языки, даже английский. Наймите переводчика, чтобы вы смогли детально обсудить условия сделки и прописать всё подробно в контракте.', '• Запросите регистрационные документы компании и проверьте их данные на сайтах национальных ведомств. • Запросите сведения о товаре: сертификаты качества, технические документы, фото, видео, образцы. • Запросите банковские реквизиты и проверяйте, чтобы счёт был открыт в материковом Китае, а не в Гонконге или Макао. • Не работайте с поставщиком, если он не даёт документы, долго отвечает на вопросы, пишет с разных аккаунтов, предлагает перевести деньги на личный счёт.']], 'ground_truths': [['Проверить адрес, документы, сайт, WeChat, отзывы, запросить сертификаты и реквизиты.']]}
2025-05-12 05:10:07,609 - evaluate.metrics - DEBUG - Метрики RAGAS: [answer_relevancy, faithfulness]
2025-05-12 05:10:07,609 - evaluate.metrics - DEBUG - Запуск evaluate() с RAGAS метриками
2025-05-12 05:10:07,611 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:10:08,052 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:10:08,059 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:10:08,060 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:10:08,065 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:10:08,066 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:10:08,070 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:10:08,071 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:10:08,075 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:10:08,075 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:10:08,088 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Given a question and an answer, analyze the complexity of each sentence in the answer. Break down each sentence into one or more fully understandable statements. Ensure that no pronouns are used in any statement. Format the outputs in JSON.\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"statements": {"description": "The generated statements", "items": {"type": "string"}, "title": "Statements", "type": "array"}}, "required": ["statements"], "title": "StatementGeneratorOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "question": "Who was Albert Einstein and what is he best known for?",\n    "answer": "He was a German-born theoretical physicist, widely acknowledged to be one of the greatest and most influential physicists of all time. He was best known for developing the theory of relativity, he also made important contributions to the development of the theory of quantum mechanics."\n}\nOutput: {\n    "statements": [\n        "Albert Einstein was a German-born theoretical physicist.",\n        "Albert Einstein is recognized as one of the greatest and most influential physicists of all time.",\n        "Albert Einstein was best known for developing the theory of relativity.",\n        "Albert Einstein also made important contributions to the development of the theory of quantum mechanics."\n    ]\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "question": "Как проверить китайского поставщика перед заключением контракта?",\n    "answer": "Чтобы проверить надёжность китайского поставщика перед заключением контракта, следующие шаги рекомендованы. Сначала необходимо получить документы от поставщика, такие как свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара. Эти документы можно перевести на русский язык при помощи Google Translate, просто указав камеру на документ смартфоном. Если поставщик предоставил все необходимые документы, это может говорить о том, что он надёжный и в работе с ним не будет сюрпризов.\\n\\nДалее, важно подписать внешнеторговый контракт, который должен содержать все условия сделки, правила разрешения споров и форс-мажорные обстоятельства, которые могут негативно повлиять на исполнение обязательств. Контракт может быть адаптирован под себя по типовому варианту контракта. Обычно он состоит из двух частей на языке покупателя и продавца, чтобы не было разного толкования условий сделки.\\n\\nКроме того, для наладить общение с китайским поставщиком следует общаться на китайском языке, так как редко встречаются сотрудники фабрик, которые знают иностранные языки даже английский. Для детального обсуждения условий сделки и прописания всего подробно в контракте можно найти переводчика."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-81a95acd-aa03-45f7-9e3a-4b173410645c'}
2025-05-12 05:10:08,089 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:10:08,090 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:10:08,090 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Generate a question for the given answer and Identify if answer is noncommittal. Give noncommittal as 1 if the answer is noncommittal and 0 if the answer is committal. A noncommittal answer is one that is evasive, vague, or ambiguous. For example, "I don\'t know" or "I\'m not sure" are noncommittal answers\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"question": {"title": "Question", "type": "string"}, "noncommittal": {"title": "Noncommittal", "type": "integer"}}, "required": ["question", "noncommittal"], "title": "ResponseRelevanceOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "response": "Albert Einstein was born in Germany."\n}\nOutput: {\n    "question": "Where was Albert Einstein born?",\n    "noncommittal": 0\n}\n\nExample 2\nInput: {\n    "response": "I don\'t know about the  groundbreaking feature of the smartphone invented in 2023 as am unaware of information beyond 2022. "\n}\nOutput: {\n    "question": "What was the groundbreaking feature of the smartphone invented in 2023?",\n    "noncommittal": 1\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "response": "Чтобы проверить надёжность китайского поставщика перед заключением контракта, следующие шаги рекомендованы. Сначала необходимо получить документы от поставщика, такие как свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара. Эти документы можно перевести на русский язык при помощи Google Translate, просто указав камеру на документ смартфоном. Если поставщик предоставил все необходимые документы, это может говорить о том, что он надёжный и в работе с ним не будет сюрпризов.\\n\\nДалее, важно подписать внешнеторговый контракт, который должен содержать все условия сделки, правила разрешения споров и форс-мажорные обстоятельства, которые могут негативно повлиять на исполнение обязательств. Контракт может быть адаптирован под себя по типовому варианту контракта. Обычно он состоит из двух частей на языке покупателя и продавца, чтобы не было разного толкования условий сделки.\\n\\nКроме того, для наладить общение с китайским поставщиком следует общаться на китайском языке, так как редко встречаются сотрудники фабрик, которые знают иностранные языки даже английский. Для детального обсуждения условий сделки и прописания всего подробно в контракте можно найти переводчика."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-cfb701e1-88a9-43db-9164-0cf30090c38b'}
2025-05-12 05:10:08,090 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:10:08,090 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Generate a question for the given answer and Identify if answer is noncommittal. Give noncommittal as 1 if the answer is noncommittal and 0 if the answer is committal. A noncommittal answer is one that is evasive, vague, or ambiguous. For example, "I don\'t know" or "I\'m not sure" are noncommittal answers\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"question": {"title": "Question", "type": "string"}, "noncommittal": {"title": "Noncommittal", "type": "integer"}}, "required": ["question", "noncommittal"], "title": "ResponseRelevanceOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "response": "Albert Einstein was born in Germany."\n}\nOutput: {\n    "question": "Where was Albert Einstein born?",\n    "noncommittal": 0\n}\n\nExample 2\nInput: {\n    "response": "I don\'t know about the  groundbreaking feature of the smartphone invented in 2023 as am unaware of information beyond 2022. "\n}\nOutput: {\n    "question": "What was the groundbreaking feature of the smartphone invented in 2023?",\n    "noncommittal": 1\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "response": "Чтобы проверить надёжность китайского поставщика перед заключением контракта, следующие шаги рекомендованы. Сначала необходимо получить документы от поставщика, такие как свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара. Эти документы можно перевести на русский язык при помощи Google Translate, просто указав камеру на документ смартфоном. Если поставщик предоставил все необходимые документы, это может говорить о том, что он надёжный и в работе с ним не будет сюрпризов.\\n\\nДалее, важно подписать внешнеторговый контракт, который должен содержать все условия сделки, правила разрешения споров и форс-мажорные обстоятельства, которые могут негативно повлиять на исполнение обязательств. Контракт может быть адаптирован под себя по типовому варианту контракта. Обычно он состоит из двух частей на языке покупателя и продавца, чтобы не было разного толкования условий сделки.\\n\\nКроме того, для наладить общение с китайским поставщиком следует общаться на китайском языке, так как редко встречаются сотрудники фабрик, которые знают иностранные языки даже английский. Для детального обсуждения условий сделки и прописания всего подробно в контракте можно найти переводчика."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-d4ebb8d9-29d1-4dfd-bed2-ad5d9c9de87a'}
2025-05-12 05:10:08,091 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:10:08,091 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Generate a question for the given answer and Identify if answer is noncommittal. Give noncommittal as 1 if the answer is noncommittal and 0 if the answer is committal. A noncommittal answer is one that is evasive, vague, or ambiguous. For example, "I don\'t know" or "I\'m not sure" are noncommittal answers\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"question": {"title": "Question", "type": "string"}, "noncommittal": {"title": "Noncommittal", "type": "integer"}}, "required": ["question", "noncommittal"], "title": "ResponseRelevanceOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "response": "Albert Einstein was born in Germany."\n}\nOutput: {\n    "question": "Where was Albert Einstein born?",\n    "noncommittal": 0\n}\n\nExample 2\nInput: {\n    "response": "I don\'t know about the  groundbreaking feature of the smartphone invented in 2023 as am unaware of information beyond 2022. "\n}\nOutput: {\n    "question": "What was the groundbreaking feature of the smartphone invented in 2023?",\n    "noncommittal": 1\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "response": "Чтобы проверить надёжность китайского поставщика перед заключением контракта, следующие шаги рекомендованы. Сначала необходимо получить документы от поставщика, такие как свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара. Эти документы можно перевести на русский язык при помощи Google Translate, просто указав камеру на документ смартфоном. Если поставщик предоставил все необходимые документы, это может говорить о том, что он надёжный и в работе с ним не будет сюрпризов.\\n\\nДалее, важно подписать внешнеторговый контракт, который должен содержать все условия сделки, правила разрешения споров и форс-мажорные обстоятельства, которые могут негативно повлиять на исполнение обязательств. Контракт может быть адаптирован под себя по типовому варианту контракта. Обычно он состоит из двух частей на языке покупателя и продавца, чтобы не было разного толкования условий сделки.\\n\\nКроме того, для наладить общение с китайским поставщиком следует общаться на китайском языке, так как редко встречаются сотрудники фабрик, которые знают иностранные языки даже английский. Для детального обсуждения условий сделки и прописания всего подробно в контракте можно найти переводчика."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-98c1f31e-dbd9-4d5b-b1e3-9920540f8b2b'}
2025-05-12 05:10:08,091 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:10:08,092 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:10:08,092 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:10:08,092 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:10:08,096 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x31e89a370>
2025-05-12 05:10:08,096 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x322c51270> server_hostname='api.openai.com' timeout=None
2025-05-12 05:10:08,096 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x16c455730>
2025-05-12 05:10:08,096 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x322c51270> server_hostname='api.openai.com' timeout=None
2025-05-12 05:10:08,097 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x322d11ac0>
2025-05-12 05:10:08,097 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x322c51270> server_hostname='api.openai.com' timeout=None
2025-05-12 05:10:08,098 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x16c455b50>
2025-05-12 05:10:08,098 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x322c51270> server_hostname='api.openai.com' timeout=None
2025-05-12 05:10:08,308 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x322d11e50>
2025-05-12 05:10:08,309 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:10:08,309 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:10:08,309 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:10:08,310 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:10:08,310 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:10:08,314 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x31e850c70>
2025-05-12 05:10:08,314 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:10:08,314 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:10:08,314 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:10:08,314 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:10:08,314 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:10:08,316 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x16c452af0>
2025-05-12 05:10:08,316 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:10:08,316 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:10:08,316 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:10:08,317 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:10:08,317 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:10:08,322 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x16c455460>
2025-05-12 05:10:08,322 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:10:08,323 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:10:08,323 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:10:08,323 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:10:08,323 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:10:09,567 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:10:09 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'998'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1004'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'199112'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'266ms'), (b'x-request-id', b'req_a04563f20919095cc34e62ddc99baf6a'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=6rPi5rVUeaNiN3Xvj4sg7y7seJcIipori7XGYB1EIqo-1747008609-1.0.1.1-fGqXxC8Z77e1MElLxpdSQoFd6liQpBoApLpcM4w8S4o2112S2rcscJPhfA8bo76JY4Nz5Dtsel6m.2jKnmu9gzDe_IQSsKo2mqDY4N8dYyQ; path=/; expires=Mon, 12-May-25 00:40:09 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=Avgb9Xn7_olDOq0uyPQaZxHjH.PjA6A7uNZtCw3wYJU-1747008609524-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b0fa1e048869-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:10:09,569 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:10:09,569 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:10:09,569 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:10:09 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'985'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'990'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9997'), (b'x-ratelimit-remaining-tokens', b'197379'), (b'x-ratelimit-reset-requests', b'25.907s'), (b'x-ratelimit-reset-tokens', b'786ms'), (b'x-request-id', b'req_97d190219734f214e6193cb3a8740df2'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=O5LVTXIJRQKmhpwJGXklbQe1Or4YFdZwKncloC6EFsc-1747008609-1.0.1.1-k8FXaZKyQhuRfSQhUok4f6Ab_reZnoxzF8K5Oul4u_mkEeP29QoJg_CUYGGRneey8RfwIi6kGT6JNn7iH1uYiHmk1GgtGbd.6bBfwt9HYGU; path=/; expires=Mon, 12-May-25 00:40:09 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=eTQ5Gl_6f8UpGt9WTqdEzwlqIV38hzseN5ktWNlDfbk-1747008609520-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b0fa2a15f5b4-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:10:09,570 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:10:09,570 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:10:09,570 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:10:09,570 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:10:09,570 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:10:09,570 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:10:09 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '985'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '990'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9997'), ('x-ratelimit-remaining-tokens', '197379'), ('x-ratelimit-reset-requests', '25.907s'), ('x-ratelimit-reset-tokens', '786ms'), ('x-request-id', 'req_97d190219734f214e6193cb3a8740df2'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=O5LVTXIJRQKmhpwJGXklbQe1Or4YFdZwKncloC6EFsc-1747008609-1.0.1.1-k8FXaZKyQhuRfSQhUok4f6Ab_reZnoxzF8K5Oul4u_mkEeP29QoJg_CUYGGRneey8RfwIi6kGT6JNn7iH1uYiHmk1GgtGbd.6bBfwt9HYGU; path=/; expires=Mon, 12-May-25 00:40:09 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=eTQ5Gl_6f8UpGt9WTqdEzwlqIV38hzseN5ktWNlDfbk-1747008609520-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5b0fa2a15f5b4-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:10:09,571 - openai._base_client - DEBUG - request_id: req_97d190219734f214e6193cb3a8740df2
2025-05-12 05:10:09,572 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:10:09,572 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:10:09,573 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:10:09,573 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:10:09 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '998'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '1004'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '199112'), ('x-ratelimit-reset-requests', '8.64s'), ('x-ratelimit-reset-tokens', '266ms'), ('x-request-id', 'req_a04563f20919095cc34e62ddc99baf6a'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=6rPi5rVUeaNiN3Xvj4sg7y7seJcIipori7XGYB1EIqo-1747008609-1.0.1.1-fGqXxC8Z77e1MElLxpdSQoFd6liQpBoApLpcM4w8S4o2112S2rcscJPhfA8bo76JY4Nz5Dtsel6m.2jKnmu9gzDe_IQSsKo2mqDY4N8dYyQ; path=/; expires=Mon, 12-May-25 00:40:09 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=Avgb9Xn7_olDOq0uyPQaZxHjH.PjA6A7uNZtCw3wYJU-1747008609524-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5b0fa1e048869-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:10:09,573 - openai._base_client - DEBUG - request_id: req_a04563f20919095cc34e62ddc99baf6a
2025-05-12 05:10:09,606 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:10:09 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'1022'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1027'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9998'), (b'x-ratelimit-remaining-tokens', b'198235'), (b'x-ratelimit-reset-requests', b'17.277s'), (b'x-ratelimit-reset-tokens', b'529ms'), (b'x-request-id', b'req_ed64ca468346c0c2affc9f43d7f52e36'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=3viJZ3wES2ozfFWJmYntKt8eF7_Um3B2dD3NmjfKQH8-1747008609-1.0.1.1-1eaC46PFXXrMOY7FPS4ZkgBkb29bLK3tpv5xODFAzRqFWd7OLUsSQLu9RBppOa3heMWnS3Dezi.kALbzhPdgmuxFrwGavExhoNswfWzpjqM; path=/; expires=Mon, 12-May-25 00:40:09 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=0soNf9SUu46GvevvgWAjA3DNMXWd2LLHMDht6JnOtLs-1747008609558-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b0fa2ad528ad-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:10:09,606 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:10:09,606 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:10:09,607 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:10:09,607 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:10:09,608 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:10:09,608 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:10:09 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '1022'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '1027'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9998'), ('x-ratelimit-remaining-tokens', '198235'), ('x-ratelimit-reset-requests', '17.277s'), ('x-ratelimit-reset-tokens', '529ms'), ('x-request-id', 'req_ed64ca468346c0c2affc9f43d7f52e36'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=3viJZ3wES2ozfFWJmYntKt8eF7_Um3B2dD3NmjfKQH8-1747008609-1.0.1.1-1eaC46PFXXrMOY7FPS4ZkgBkb29bLK3tpv5xODFAzRqFWd7OLUsSQLu9RBppOa3heMWnS3Dezi.kALbzhPdgmuxFrwGavExhoNswfWzpjqM; path=/; expires=Mon, 12-May-25 00:40:09 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=0soNf9SUu46GvevvgWAjA3DNMXWd2LLHMDht6JnOtLs-1747008609558-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5b0fa2ad528ad-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:10:09,608 - openai._base_client - DEBUG - request_id: req_ed64ca468346c0c2affc9f43d7f52e36
2025-05-12 05:10:09,613 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'post_parser': <function Embeddings.create.<locals>.parser at 0x323234700>, 'json_data': {'input': [[27435, 16248, 69556, 18264, 7820, 9542, 19039, 66144, 22885, 18154, 68374, 14476, 75281, 78757, 59313, 40571, 9882, 10298, 78085, 11001, 118, 44613, 30]], 'model': 'text-embedding-ada-002', 'encoding_format': 'base64'}, 'idempotency_key': 'stainless-python-retry-15b0e232-2f03-4f20-92ad-5a573b27f5e5'}
2025-05-12 05:10:09,613 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/embeddings
2025-05-12 05:10:09,613 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:10:09,616 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x32324fee0>
2025-05-12 05:10:09,616 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x16be097b0> server_hostname='api.openai.com' timeout=None
2025-05-12 05:10:09,832 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x32324faf0>
2025-05-12 05:10:09,832 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:10:09,832 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:10:09,832 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:10:09,832 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:10:09,832 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:10:10,537 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:10:10 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-model', b'text-embedding-ada-002-v2'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'81'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'via', b'envoy-router-5bd8f6d65-h8cct'), (b'x-envoy-upstream-service-time', b'84'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'1000000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'999977'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'1ms'), (b'x-request-id', b'req_c1af4ff4115022dcf60cf21fd3c3b3cb'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=dXxSzEYr87WuvgiwLSionVRBF.uyyH3c4KK1gJEIGzA-1747008610-1.0.1.1-abMHVbKlzDQlWRfLlTsNrpG9oBCJy4QdSn4OWgOz0g6.g6N37dsapibTFKtR179HxCyt2BYCYp5EdV7qHV.UnEOeEfybm9unlhnz0w1sU9Q; path=/; expires=Mon, 12-May-25 00:40:10 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=D._pG0QaH6hJSRr.VAY79n33yIV8.uEPE.W.HnsiwLE-1747008610427-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b103aa3af5cf-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:10:10,538 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 05:10:10,538 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:10:10,539 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:10:10,539 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:10:10,539 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:10:10,539 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/embeddings "200 OK" Headers([('date', 'Mon, 12 May 2025 00:10:10 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-allow-origin', '*'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-model', 'text-embedding-ada-002-v2'), ('openai-organization', 'tochka'), ('openai-processing-ms', '81'), ('openai-version', '2020-10-01'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('via', 'envoy-router-5bd8f6d65-h8cct'), ('x-envoy-upstream-service-time', '84'), ('x-ratelimit-limit-requests', '3000'), ('x-ratelimit-limit-tokens', '1000000'), ('x-ratelimit-remaining-requests', '2999'), ('x-ratelimit-remaining-tokens', '999977'), ('x-ratelimit-reset-requests', '20ms'), ('x-ratelimit-reset-tokens', '1ms'), ('x-request-id', 'req_c1af4ff4115022dcf60cf21fd3c3b3cb'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=dXxSzEYr87WuvgiwLSionVRBF.uyyH3c4KK1gJEIGzA-1747008610-1.0.1.1-abMHVbKlzDQlWRfLlTsNrpG9oBCJy4QdSn4OWgOz0g6.g6N37dsapibTFKtR179HxCyt2BYCYp5EdV7qHV.UnEOeEfybm9unlhnz0w1sU9Q; path=/; expires=Mon, 12-May-25 00:40:10 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=D._pG0QaH6hJSRr.VAY79n33yIV8.uEPE.W.HnsiwLE-1747008610427-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5b103aa3af5cf-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:10:10,539 - openai._base_client - DEBUG - request_id: req_c1af4ff4115022dcf60cf21fd3c3b3cb
2025-05-12 05:10:10,541 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'post_parser': <function Embeddings.create.<locals>.parser at 0x323234700>, 'json_data': {'input': [[27435, 16248, 50306, 55617, 34493, 1840, 77083, 13999, 57925, 8164, 2233, 19479, 94975, 20440, 69556, 17165, 6850, 23680, 45122, 17394, 68742, 7820, 9542, 19039, 66144, 22885, 18154, 68374, 14476, 75281, 78757, 59313, 40571, 9882, 10298, 78085, 11001, 118, 44613, 30], [27435, 16248, 50306, 55617, 34493, 1840, 77083, 13999, 57925, 8164, 2233, 19479, 94975, 20440, 69556, 17165, 6850, 23680, 45122, 17394, 68742, 7820, 9542, 19039, 66144, 22885, 18154, 68374, 14476, 75281, 78757, 59313, 40571, 9882, 10298, 78085, 11001, 118, 44613, 30], [27435, 16248, 50306, 55617, 34493, 1840, 77083, 13999, 57925, 8164, 2233, 19479, 94975, 20440, 69556, 17165, 6850, 23680, 45122, 17394, 68742, 7820, 9542, 19039, 66144, 22885, 18154, 68374, 14476, 75281, 78757, 59313, 40571, 9882, 10298, 78085, 11001, 118, 44613, 30]], 'model': 'text-embedding-ada-002', 'encoding_format': 'base64'}, 'idempotency_key': 'stainless-python-retry-e19ca4b4-2588-4fe1-bc22-091c7ba87170'}
2025-05-12 05:10:10,542 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/embeddings
2025-05-12 05:10:10,542 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:10:10,542 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:10:10,542 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:10:10,542 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:10:10,542 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:10:11,710 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:10:11 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-model', b'text-embedding-ada-002-v2'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'173'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'via', b'envoy-router-7d545f8f56-xwgqp'), (b'x-envoy-upstream-service-time', b'177'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'1000000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'999880'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'7ms'), (b'x-request-id', b'req_8bffb8ca91f32c2fbec7c2b00d17d65f'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b1080cc9f5cf-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:10:11,710 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 05:10:11,711 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:10:11,858 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:10:11,858 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:10:11,858 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:10:11,858 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/embeddings "200 OK" Headers({'date': 'Mon, 12 May 2025 00:10:11 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Request-ID', 'openai-model': 'text-embedding-ada-002-v2', 'openai-organization': 'tochka', 'openai-processing-ms': '173', 'openai-version': '2020-10-01', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'via': 'envoy-router-7d545f8f56-xwgqp', 'x-envoy-upstream-service-time': '177', 'x-ratelimit-limit-requests': '3000', 'x-ratelimit-limit-tokens': '1000000', 'x-ratelimit-remaining-requests': '2999', 'x-ratelimit-remaining-tokens': '999880', 'x-ratelimit-reset-requests': '20ms', 'x-ratelimit-reset-tokens': '7ms', 'x-request-id': 'req_8bffb8ca91f32c2fbec7c2b00d17d65f', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5b1080cc9f5cf-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:10:11,858 - openai._base_client - DEBUG - request_id: req_8bffb8ca91f32c2fbec7c2b00d17d65f
2025-05-12 05:10:12,201 - ragas._analytics - DEBUG - Flushing triggered for 1 events
2025-05-12 05:10:12,201 - ragas._analytics - DEBUG - Grouped events: {('evaluation', ('answer_relevancy',), 'SINGLE_TURN'): EvaluationEvent(event_type='evaluation', user_id='a-c57b054261b446ec83e28aea108cead0', ragas_version='0.2.15', metrics=['answer_relevancy'], num_rows=1, evaluation_type='SINGLE_TURN', language='english')}
2025-05-12 05:10:12,202 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:10:12,601 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:10:14,428 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:10:14 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'5800'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5805'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9995'), (b'x-ratelimit-remaining-tokens', b'196340'), (b'x-ratelimit-reset-requests', b'34.561s'), (b'x-ratelimit-reset-tokens', b'1.097s'), (b'x-request-id', b'req_8a02b4243c1f6a963566bdcc1f0502a6'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=S0VhkM36YwaHOjMGyFzGDOmkv7_WGig_Ze2.DF54iGE-1747008614-1.0.1.1-QjEQwQMAWZYEnRK_iUSaYn9hRUxboOtZLfvcnlr3Uie.sbmyUaC4a8tD_S2W1ikjwTaZWL52H260UF2M1MOE_CXHleFhXxQ2B77OyyAaK4w; path=/; expires=Mon, 12-May-25 00:40:14 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=3_YWc.fhTSKnIS86T9vsRb5E5u6ITADN0RmxkuvA4bY-1747008614342-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b0fa2b121cb3-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:10:14,428 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:10:14,428 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:10:14,429 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:10:14,429 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:10:14,429 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:10:14,430 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:10:14 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '5800'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '5805'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9995'), ('x-ratelimit-remaining-tokens', '196340'), ('x-ratelimit-reset-requests', '34.561s'), ('x-ratelimit-reset-tokens', '1.097s'), ('x-request-id', 'req_8a02b4243c1f6a963566bdcc1f0502a6'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=S0VhkM36YwaHOjMGyFzGDOmkv7_WGig_Ze2.DF54iGE-1747008614-1.0.1.1-QjEQwQMAWZYEnRK_iUSaYn9hRUxboOtZLfvcnlr3Uie.sbmyUaC4a8tD_S2W1ikjwTaZWL52H260UF2M1MOE_CXHleFhXxQ2B77OyyAaK4w; path=/; expires=Mon, 12-May-25 00:40:14 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=3_YWc.fhTSKnIS86T9vsRb5E5u6ITADN0RmxkuvA4bY-1747008614342-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5b0fa2b121cb3-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:10:14,430 - openai._base_client - DEBUG - request_id: req_8a02b4243c1f6a963566bdcc1f0502a6
2025-05-12 05:10:14,436 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Your task is to judge the faithfulness of a series of statements based on a given context. For each statement you must return verdict as 1 if the statement can be directly inferred based on the context or 0 if the statement can not be directly inferred based on the context.\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"$defs": {"StatementFaithfulnessAnswer": {"properties": {"statement": {"description": "the original statement, word-by-word", "title": "Statement", "type": "string"}, "reason": {"description": "the reason of the verdict", "title": "Reason", "type": "string"}, "verdict": {"description": "the verdict(0/1) of the faithfulness.", "title": "Verdict", "type": "integer"}}, "required": ["statement", "reason", "verdict"], "title": "StatementFaithfulnessAnswer", "type": "object"}}, "properties": {"statements": {"items": {"$ref": "#/$defs/StatementFaithfulnessAnswer"}, "title": "Statements", "type": "array"}}, "required": ["statements"], "title": "NLIStatementOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "context": "John is a student at XYZ University. He is pursuing a degree in Computer Science. He is enrolled in several courses this semester, including Data Structures, Algorithms, and Database Management. John is a diligent student and spends a significant amount of time studying and completing assignments. He often stays late in the library to work on his projects.",\n    "statements": [\n        "John is majoring in Biology.",\n        "John is taking a course on Artificial Intelligence.",\n        "John is a dedicated student.",\n        "John has a part-time job."\n    ]\n}\nOutput: {\n    "statements": [\n        {\n            "statement": "John is majoring in Biology.",\n            "reason": "John\'s major is explicitly mentioned as Computer Science. There is no information suggesting he is majoring in Biology.",\n            "verdict": 0\n        },\n        {\n            "statement": "John is taking a course on Artificial Intelligence.",\n            "reason": "The context mentions the courses John is currently enrolled in, and Artificial Intelligence is not mentioned. Therefore, it cannot be deduced that John is taking a course on AI.",\n            "verdict": 0\n        },\n        {\n            "statement": "John is a dedicated student.",\n            "reason": "The context states that he spends a significant amount of time studying and completing assignments. Additionally, it mentions that he often stays late in the library to work on his projects, which implies dedication.",\n            "verdict": 1\n        },\n        {\n            "statement": "John has a part-time job.",\n            "reason": "There is no information given in the context about John having a part-time job.",\n            "verdict": 0\n        }\n    ]\n}\n\nExample 2\nInput: {\n    "context": "Photosynthesis is a process used by plants, algae, and certain bacteria to convert light energy into chemical energy.",\n    "statements": [\n        "Albert Einstein was a genius."\n    ]\n}\nOutput: {\n    "statements": [\n        {\n            "statement": "Albert Einstein was a genius.",\n            "reason": "The context and statement are unrelated",\n            "verdict": 0\n        }\n    ]\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "context": "Чтобы проверить китайского поставщика, дополнительно запросите:\\n• свидетельство о регистрации поставщика в таможенной службе КНР;\\n• лицензию КНР на экспорт товара. Лицензии и сертификаты можете перевести на русский через google объектив, наведя камеру смартфона на документ. Если поставщик предоставил все документы, значит, это надёжный поставщик и в работе с ним не будет сюрпризов.\\n• Запросите банковские реквизиты и проверьте, чтобы счёт был открыт на компанию, а не на её директора. Подробнее о том, как проверить надёжность поставщика, читайте в статье Справочной. Как провести переговоры\\nЧтобы наладить общение с китайским поставщиком, придерживайтесь таких правил:\\n• Общайтесь на китайском. На фабриках редко есть сотрудники, которые знают иностранные языки, даже английский. Наймите переводчика, чтобы вы смогли детально обсудить условия сделки и прописать всё подробно в контракте.\\n• Запросите регистрационные документы компании и проверьте их данные на сайтах национальных ведомств. • Запросите сведения о товаре: сертификаты качества, технические документы, фото, видео, образцы. • Запросите банковские реквизиты и проверяйте, чтобы счёт был открыт в материковом Китае, а не в Гонконге или Макао. • Не работайте с поставщиком, если он не даёт документы, долго отвечает на вопросы, пишет с разных аккаунтов, предлагает перевести деньги на личный счёт.",\n    "statements": [\n        "Для проверки надёжности китайского поставщика перед заключением контракта рекомендованы следующие шаги.",\n        "Сначала необходимо получить документы от поставщика.",\n        "Документы от поставщика могут включать свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара.",\n        "Эти документы можно перевести на русский язык с помощью Google Translate.",\n        "Для перевода документов необходимо просто указать камеру на документ смартфоном.",\n        "Если поставщик предоставил все необходимые документы, это может свидетельствовать о его надёжности.",\n        "Работа с надёжным поставщиком не будет сопровождаться сюрпризами.",\n        "Важно подписать внешнеторговый контракт.",\n        "Внешнеторговый контракт должен содержать все условия сделки.",\n        "Контракт должен включать правила разрешения споров и форс-мажорные обстоятельства.",\n        "Форс-мажорные обстоятельства могут негативно повлиять на исполнение обязательств.",\n        "Контракт может быть адаптирован под себя по типовому варианту контракта.",\n        "Обычно контракт состоит из двух частей на языке покупателя и продавца.",\n        "Наличие двух частей контракта помогает избежать разного толкования условий сделки.",\n        "Для налаживания общения с китайским поставщиком следует общаться на китайском языке.",\n        "Сотрудники фабрик редко знают иностранные языки, включая английский.",\n        "Для детального обсуждения условий сделки можно найти переводчика.",\n        "Переводчик поможет прописать все условия подробно в контракте."\n    ]\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-50e36f55-f001-4884-ad95-33dea67008a9'}
2025-05-12 05:10:14,437 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:10:14,437 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:10:14,438 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:10:14,438 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:10:14,438 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:10:14,438 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:10:36,445 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:10:36 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'21644'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'21648'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9995'), (b'x-ratelimit-remaining-tokens', b'197803'), (b'x-ratelimit-reset-requests', b'37.074s'), (b'x-ratelimit-reset-tokens', b'659ms'), (b'x-request-id', b'req_cf74e0506f0f72ceb6a1d52809ffd4f4'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b12068a41cb3-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:10:36,446 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:10:36,446 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:10:36,447 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:10:36,447 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:10:36,447 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:10:36,447 - httpcore.connection - DEBUG - close.started
2025-05-12 05:10:36,447 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:10:36,447 - httpcore.connection - DEBUG - close.started
2025-05-12 05:10:36,448 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:10:36,448 - httpcore.connection - DEBUG - close.started
2025-05-12 05:10:36,448 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:10:36,448 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:10:36 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '21644', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '21648', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9995', 'x-ratelimit-remaining-tokens': '197803', 'x-ratelimit-reset-requests': '37.074s', 'x-ratelimit-reset-tokens': '659ms', 'x-request-id': 'req_cf74e0506f0f72ceb6a1d52809ffd4f4', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5b12068a41cb3-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:10:36,448 - openai._base_client - DEBUG - request_id: req_cf74e0506f0f72ceb6a1d52809ffd4f4
2025-05-12 05:10:36,451 - ragas._analytics - DEBUG - Flushing triggered for 1 events
2025-05-12 05:10:36,451 - ragas._analytics - DEBUG - Grouped events: {('evaluation', ('faithfulness',), 'SINGLE_TURN'): EvaluationEvent(event_type='evaluation', user_id='a-c57b054261b446ec83e28aea108cead0', ragas_version='0.2.15', metrics=['faithfulness'], num_rows=1, evaluation_type='SINGLE_TURN', language='english')}
2025-05-12 05:10:36,452 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:10:36,688 - ragas._analytics - DEBUG - Flushing triggered for 1 events
2025-05-12 05:10:36,688 - ragas._analytics - DEBUG - Grouped events: {('evaluation', ('faithfulness',), 'SINGLE_TURN'): EvaluationEvent(event_type='evaluation', user_id='a-c57b054261b446ec83e28aea108cead0', ragas_version='0.2.15', metrics=['faithfulness'], num_rows=1, evaluation_type='SINGLE_TURN', language='english')}
2025-05-12 05:10:36,690 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:10:36,875 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:10:36,877 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:10:37,101 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:10:37,298 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:10:37,298 - evaluate.metrics - DEBUG - Результат RAGAS: {'answer_relevancy': 0.9604, 'faithfulness': 0.6111}
2025-05-12 05:10:37,298 - evaluate.metrics - ERROR - Внутренняя ошибка при вычислении метрик RAGAS: 0
2025-05-12 05:10:37,299 - evaluate.metrics - ERROR - Traceback (most recent call last):
  File "/Users/tochka/Documents/RAG/rag/evaluation/metrics.py", line 135, in compute_all_metrics
    if "answer_relevancy" in ragas_result:
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/ragas/dataset_schema.py", line 446, in __getitem__
    return self._scores_dict[key]
KeyError: 0

2025-05-12 05:10:37,300 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'Ты - точный оценщик качества ответов. Отвечай только числом от 0 до 1.'}, {'role': 'user', 'content': '\n        Вопрос: Как проверить китайского поставщика перед заключением контракта?\n        Ответ: Чтобы проверить надёжность китайского поставщика перед заключением контракта, следующие шаги рекомендованы. Сначала необходимо получить документы от поставщика, такие как свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара. Эти документы можно перевести на русский язык при помощи Google Translate, просто указав камеру на документ смартфоном. Если поставщик предоставил все необходимые документы, это может говорить о том, что он надёжный и в работе с ним не будет сюрпризов.\n\nДалее, важно подписать внешнеторговый контракт, который должен содержать все условия сделки, правила разрешения споров и форс-мажорные обстоятельства, которые могут негативно повлиять на исполнение обязательств. Контракт может быть адаптирован под себя по типовому варианту контракта. Обычно он состоит из двух частей на языке покупателя и продавца, чтобы не было разного толкования условий сделки.\n\nКроме того, для наладить общение с китайским поставщиком следует общаться на китайском языке, так как редко встречаются сотрудники фабрик, которые знают иностранные языки даже английский. Для детального обсуждения условий сделки и прописания всего подробно в контракте можно найти переводчика.\n\n        Насколько данный ответ релевантен вопросу, независимо от контекста? Ответь одним числом от 0 до 1.\n        '}], 'model': 'gpt-3.5-turbo', 'temperature': 0}, 'idempotency_key': 'stainless-python-retry-9b5ead16-a9bd-43a5-a34d-9793ed3b2add'}
2025-05-12 05:10:37,300 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:10:37,301 - httpcore.connection - DEBUG - close.started
2025-05-12 05:10:37,301 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:10:37,301 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-05-12 05:10:37,303 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x323248490>
2025-05-12 05:10:37,303 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x31bc520b0> server_hostname='api.openai.com' timeout=5.0
2025-05-12 05:10:37,514 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x31e840130>
2025-05-12 05:10:37,514 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:10:37,515 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:10:37,515 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:10:37,515 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:10:37,515 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:10:38,115 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:10:38 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'314'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'332'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'199326'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'202ms'), (b'x-request-id', b'req_52b28f58f533e9f2bc52fb23006a6b86'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b1b0a82bb8cc-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:10:38,116 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:10:38,116 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:10:38,116 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:10:38,116 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:10:38,116 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:10:38,116 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:10:38 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '314', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '332', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '199326', 'x-ratelimit-reset-requests': '8.64s', 'x-ratelimit-reset-tokens': '202ms', 'x-request-id': 'req_52b28f58f533e9f2bc52fb23006a6b86', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5b1b0a82bb8cc-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:10:38,116 - openai._base_client - DEBUG - request_id: req_52b28f58f533e9f2bc52fb23006a6b86
2025-05-12 05:10:38,117 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'Ты - точный оценщик качества ответов. Отвечай только числом от 0 до 1.'}, {'role': 'user', 'content': '\n        Ответ: Чтобы проверить надёжность китайского поставщика перед заключением контракта, следующие шаги рекомендованы. Сначала необходимо получить документы от поставщика, такие как свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара. Эти документы можно перевести на русский язык при помощи Google Translate, просто указав камеру на документ смартфоном. Если поставщик предоставил все необходимые документы, это может говорить о том, что он надёжный и в работе с ним не будет сюрпризов.\n\nДалее, важно подписать внешнеторговый контракт, который должен содержать все условия сделки, правила разрешения споров и форс-мажорные обстоятельства, которые могут негативно повлиять на исполнение обязательств. Контракт может быть адаптирован под себя по типовому варианту контракта. Обычно он состоит из двух частей на языке покупателя и продавца, чтобы не было разного толкования условий сделки.\n\nКроме того, для наладить общение с китайским поставщиком следует общаться на китайском языке, так как редко встречаются сотрудники фабрик, которые знают иностранные языки даже английский. Для детального обсуждения условий сделки и прописания всего подробно в контракте можно найти переводчика.\n        Контекст: Чтобы проверить китайского поставщика, дополнительно запросите:\n• свидетельство о регистрации поставщика в таможенной службе КНР;\n• лицензию КНР на экспорт товара. Лицензии и сертификаты можете перевести на русский через google объектив, наведя камеру смартфона на документ. Если поставщик предоставил все документы, значит, это надёжный поставщик и в работе с ним не будет сюрпризов. • Запросите банковские реквизиты и проверьте, чтобы счёт был открыт на компанию, а не на её директора. Подробнее о том, как проверить надёжность поставщика, читайте в статье Справочной. Как провести переговоры\nЧтобы наладить общение с китайским поставщиком, придерживайтесь таких правил:\n• Общайтесь на китайском. На фабриках редко есть сотрудники, которые знают иностранные языки, даже английский. Наймите переводчика, чтобы вы смогли детально обсудить условия сделки и прописать всё подробно в контракте. • Запросите регистрационные документы компании и проверьте их данные на сайтах национальных ведомств. • Запросите сведения о товаре: сертификаты качества, технические документы, фото, видео, образцы. • Запросите банковские реквизиты и проверяйте, чтобы счёт был открыт в материковом Китае, а не в Гонконге или Макао. • Не работайте с поставщиком, если он не даёт документы, долго отвечает на вопросы, пишет с разных аккаунтов, предлагает перевести деньги на личный счёт.\n\n        Насколько данный ответ соответствует только предоставленному контексту, без добавления лишней информации? Ответь одним числом от 0 до 1.\n        '}], 'model': 'gpt-3.5-turbo', 'temperature': 0}, 'idempotency_key': 'stainless-python-retry-e394c4f8-77e4-4e37-a5cb-9dcce7b149f2'}
2025-05-12 05:10:38,118 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:10:38,118 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:10:38,118 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:10:38,118 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:10:38,118 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:10:38,118 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:10:38,742 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:10:38 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'308'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'314'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9998'), (b'x-ratelimit-remaining-tokens', b'198712'), (b'x-ratelimit-reset-requests', b'16.677s'), (b'x-ratelimit-reset-tokens', b'386ms'), (b'x-request-id', b'req_385be663abc2a7a68a4197a35056cefc'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b1b469f6b8cc-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:10:38,742 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:10:38,742 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:10:38,743 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:10:38,743 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:10:38,743 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:10:38,743 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:10:38 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '308', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '314', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9998', 'x-ratelimit-remaining-tokens': '198712', 'x-ratelimit-reset-requests': '16.677s', 'x-ratelimit-reset-tokens': '386ms', 'x-request-id': 'req_385be663abc2a7a68a4197a35056cefc', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5b1b469f6b8cc-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:10:38,743 - openai._base_client - DEBUG - request_id: req_385be663abc2a7a68a4197a35056cefc
2025-05-12 05:10:38,743 - evaluate - INFO - Оценка вопроса: Как можно проверить подлинность диплома в России?
2025-05-12 05:10:38,744 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:8000
2025-05-12 05:10:39,015 - urllib3.connectionpool - DEBUG - http://localhost:8000 "POST /token HTTP/1.1" 200 173
2025-05-12 05:10:39,016 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:8000
2025-05-12 05:10:52,078 - urllib3.connectionpool - DEBUG - http://localhost:8000 "POST /ask HTTP/1.1" 200 4505
2025-05-12 05:10:52,081 - evaluate - INFO - Получен ответ от API для вопроса: Как можно проверить подлинност...
2025-05-12 05:10:52,081 - evaluate.metrics - DEBUG - Начинаем вычисление ROUGE-L
2025-05-12 05:10:52,081 - absl - INFO - Using default tokenizer.
2025-05-12 05:10:52,082 - evaluate.metrics - DEBUG - ROUGE-L выполнен успешно, значение: 0
2025-05-12 05:10:52,082 - evaluate.metrics - DEBUG - Начинаем вычисление BERTScore
2025-05-12 05:10:52,263 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /bert-base-multilingual-cased/resolve/main/tokenizer_config.json HTTP/1.1" 200 0
2025-05-12 05:10:52,325 - httpcore.connection - DEBUG - close.started
2025-05-12 05:10:52,326 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:10:52,529 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /bert-base-multilingual-cased/resolve/main/config.json HTTP/1.1" 200 0
2025-05-12 05:10:53,986 - httpcore.connection - DEBUG - close.started
2025-05-12 05:10:53,986 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:10:55,084 - evaluate.metrics - DEBUG - BERTScore выполнен успешно, значение: 0.6905
2025-05-12 05:10:55,084 - evaluate.metrics - DEBUG - Начинаем вычисление перекрытия контекста
2025-05-12 05:10:55,173 - evaluate.metrics - DEBUG - Перекрытие контекста выполнено успешно. Recall: 1.5, Precision: 1.0
2025-05-12 05:10:55,173 - evaluate.metrics - DEBUG - Начинаем вычисление семантической достоверности (faithfulness)
2025-05-12 05:10:55,222 - evaluate.metrics - DEBUG - Семантическая достоверность выполнена успешно, значение: 0.9682
2025-05-12 05:10:55,222 - evaluate.metrics - INFO - Начинаем вычисление метрик RAGAS
2025-05-12 05:10:55,222 - evaluate.metrics - DEBUG - Подготовка данных для RAGAS
2025-05-12 05:10:55,222 - evaluate.metrics - DEBUG - Создание датасета из данных
2025-05-12 05:10:55,225 - evaluate.metrics - INFO - RAGAS data: {'question': ['Как можно проверить подлинность диплома в России?'], 'answer': ['В России можно проверить подлинность диплома в Федеральном реестре сведений документов об образовании (ФРДО). Этот реестр содержит данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатам о владении русским языком и дополнительном профессиональном образовании. Однако не все сведения в ФРДО еще полностью внесены, поэтому возможно, что у вас не найдётся нужная информация. В случае отсутствия данных можно направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа составляет 30 дней. Кроме того, некоторые учебные заведения имеют собственные сервисы проверки подлинности документов, например, в ВШЭ или СПбГУ.'], 'contexts': [['Где проверить подлинность диплома\nВ России есть Федеральный реестр сведений документов об образовании (ФРДО), где любой желающий может бесплатно проверить подлинность документа. В базе есть данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатах о владении русским языком и дополнительном профессиональном образовании.', 'Коротко\n• Быстрее всего проверить подлинность диплома можно в реестре ФРДО. Заполняете данные и сразу узнаёте, есть ли у сотрудника заявленное образование. • Данные в ФРДО внесены ещё не полностью и, возможно, вы не найдёте нужную информацию, однако это не опровергает факт выдачи документа. • Самые верные способы проверки — направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа 30 дней. • В некоторых учебных заведениях есть собственные сервисы проверки, например, в ВШЭ или СПбГУ.', 'Запросите копии паспорта, свидетельства о регистрации (ОГРНИП), ИНН, а также лицензию, если она обязательна для ведения его деятельности.']], 'ground_truths': [['Через ФРДО, запрос в Рособрнадзор или вуз.']]}
2025-05-12 05:10:55,225 - evaluate.metrics - DEBUG - Метрики RAGAS: [answer_relevancy, faithfulness]
2025-05-12 05:10:55,225 - evaluate.metrics - DEBUG - Запуск evaluate() с RAGAS метриками
2025-05-12 05:10:55,228 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:10:56,107 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:10:56,128 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:10:56,129 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:10:56,145 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:10:56,145 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:10:56,152 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:10:56,153 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:10:56,164 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:10:56,164 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:10:56,191 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Given a question and an answer, analyze the complexity of each sentence in the answer. Break down each sentence into one or more fully understandable statements. Ensure that no pronouns are used in any statement. Format the outputs in JSON.\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"statements": {"description": "The generated statements", "items": {"type": "string"}, "title": "Statements", "type": "array"}}, "required": ["statements"], "title": "StatementGeneratorOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "question": "Who was Albert Einstein and what is he best known for?",\n    "answer": "He was a German-born theoretical physicist, widely acknowledged to be one of the greatest and most influential physicists of all time. He was best known for developing the theory of relativity, he also made important contributions to the development of the theory of quantum mechanics."\n}\nOutput: {\n    "statements": [\n        "Albert Einstein was a German-born theoretical physicist.",\n        "Albert Einstein is recognized as one of the greatest and most influential physicists of all time.",\n        "Albert Einstein was best known for developing the theory of relativity.",\n        "Albert Einstein also made important contributions to the development of the theory of quantum mechanics."\n    ]\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "question": "Как можно проверить подлинность диплома в России?",\n    "answer": "В России можно проверить подлинность диплома в Федеральном реестре сведений документов об образовании (ФРДО). Этот реестр содержит данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатам о владении русским языком и дополнительном профессиональном образовании. Однако не все сведения в ФРДО еще полностью внесены, поэтому возможно, что у вас не найдётся нужная информация. В случае отсутствия данных можно направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа составляет 30 дней. Кроме того, некоторые учебные заведения имеют собственные сервисы проверки подлинности документов, например, в ВШЭ или СПбГУ."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-6812f831-288e-4909-845b-d889453c009c'}
2025-05-12 05:10:56,191 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:10:56,192 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:10:56,192 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Generate a question for the given answer and Identify if answer is noncommittal. Give noncommittal as 1 if the answer is noncommittal and 0 if the answer is committal. A noncommittal answer is one that is evasive, vague, or ambiguous. For example, "I don\'t know" or "I\'m not sure" are noncommittal answers\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"question": {"title": "Question", "type": "string"}, "noncommittal": {"title": "Noncommittal", "type": "integer"}}, "required": ["question", "noncommittal"], "title": "ResponseRelevanceOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "response": "Albert Einstein was born in Germany."\n}\nOutput: {\n    "question": "Where was Albert Einstein born?",\n    "noncommittal": 0\n}\n\nExample 2\nInput: {\n    "response": "I don\'t know about the  groundbreaking feature of the smartphone invented in 2023 as am unaware of information beyond 2022. "\n}\nOutput: {\n    "question": "What was the groundbreaking feature of the smartphone invented in 2023?",\n    "noncommittal": 1\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "response": "В России можно проверить подлинность диплома в Федеральном реестре сведений документов об образовании (ФРДО). Этот реестр содержит данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатам о владении русским языком и дополнительном профессиональном образовании. Однако не все сведения в ФРДО еще полностью внесены, поэтому возможно, что у вас не найдётся нужная информация. В случае отсутствия данных можно направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа составляет 30 дней. Кроме того, некоторые учебные заведения имеют собственные сервисы проверки подлинности документов, например, в ВШЭ или СПбГУ."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-b89d4f9c-8592-465b-bdfd-a6e8b676c89e'}
2025-05-12 05:10:56,192 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:10:56,193 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Generate a question for the given answer and Identify if answer is noncommittal. Give noncommittal as 1 if the answer is noncommittal and 0 if the answer is committal. A noncommittal answer is one that is evasive, vague, or ambiguous. For example, "I don\'t know" or "I\'m not sure" are noncommittal answers\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"question": {"title": "Question", "type": "string"}, "noncommittal": {"title": "Noncommittal", "type": "integer"}}, "required": ["question", "noncommittal"], "title": "ResponseRelevanceOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "response": "Albert Einstein was born in Germany."\n}\nOutput: {\n    "question": "Where was Albert Einstein born?",\n    "noncommittal": 0\n}\n\nExample 2\nInput: {\n    "response": "I don\'t know about the  groundbreaking feature of the smartphone invented in 2023 as am unaware of information beyond 2022. "\n}\nOutput: {\n    "question": "What was the groundbreaking feature of the smartphone invented in 2023?",\n    "noncommittal": 1\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "response": "В России можно проверить подлинность диплома в Федеральном реестре сведений документов об образовании (ФРДО). Этот реестр содержит данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатам о владении русским языком и дополнительном профессиональном образовании. Однако не все сведения в ФРДО еще полностью внесены, поэтому возможно, что у вас не найдётся нужная информация. В случае отсутствия данных можно направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа составляет 30 дней. Кроме того, некоторые учебные заведения имеют собственные сервисы проверки подлинности документов, например, в ВШЭ или СПбГУ."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-8ba9c6d5-652d-4437-a878-d6f9af964a29'}
2025-05-12 05:10:56,193 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:10:56,193 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Generate a question for the given answer and Identify if answer is noncommittal. Give noncommittal as 1 if the answer is noncommittal and 0 if the answer is committal. A noncommittal answer is one that is evasive, vague, or ambiguous. For example, "I don\'t know" or "I\'m not sure" are noncommittal answers\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"question": {"title": "Question", "type": "string"}, "noncommittal": {"title": "Noncommittal", "type": "integer"}}, "required": ["question", "noncommittal"], "title": "ResponseRelevanceOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "response": "Albert Einstein was born in Germany."\n}\nOutput: {\n    "question": "Where was Albert Einstein born?",\n    "noncommittal": 0\n}\n\nExample 2\nInput: {\n    "response": "I don\'t know about the  groundbreaking feature of the smartphone invented in 2023 as am unaware of information beyond 2022. "\n}\nOutput: {\n    "question": "What was the groundbreaking feature of the smartphone invented in 2023?",\n    "noncommittal": 1\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "response": "В России можно проверить подлинность диплома в Федеральном реестре сведений документов об образовании (ФРДО). Этот реестр содержит данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатам о владении русским языком и дополнительном профессиональном образовании. Однако не все сведения в ФРДО еще полностью внесены, поэтому возможно, что у вас не найдётся нужная информация. В случае отсутствия данных можно направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа составляет 30 дней. Кроме того, некоторые учебные заведения имеют собственные сервисы проверки подлинности документов, например, в ВШЭ или СПбГУ."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-e13bab91-6a0d-4e5c-a03f-455a0399dee5'}
2025-05-12 05:10:56,193 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:10:56,194 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:10:56,194 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:10:56,194 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:10:56,195 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x31e873e80>
2025-05-12 05:10:56,195 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x3232357b0> server_hostname='api.openai.com' timeout=None
2025-05-12 05:10:56,198 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x32325d670>
2025-05-12 05:10:56,198 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x3232357b0> server_hostname='api.openai.com' timeout=None
2025-05-12 05:10:56,199 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x322c70970>
2025-05-12 05:10:56,199 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x3232357b0> server_hostname='api.openai.com' timeout=None
2025-05-12 05:10:56,200 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x322c704c0>
2025-05-12 05:10:56,200 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x3232357b0> server_hostname='api.openai.com' timeout=None
2025-05-12 05:10:56,421 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x16c40b850>
2025-05-12 05:10:56,422 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:10:56,422 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:10:56,422 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:10:56,422 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:10:56,422 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:10:56,426 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x3232499d0>
2025-05-12 05:10:56,427 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:10:56,427 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:10:56,427 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:10:56,427 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:10:56,427 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:10:56,428 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x323248a60>
2025-05-12 05:10:56,428 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:10:56,428 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:10:56,428 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:10:56,428 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:10:56,429 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:10:56,430 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x323249400>
2025-05-12 05:10:56,430 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:10:56,431 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:10:56,431 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:10:56,431 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:10:56,431 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:10:57,505 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:10:57 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'813'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'817'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9998'), (b'x-ratelimit-remaining-tokens', b'198657'), (b'x-ratelimit-reset-requests', b'17.267s'), (b'x-ratelimit-reset-tokens', b'402ms'), (b'x-request-id', b'req_abbc57dd3eb03e56e1f743a6c3482247'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=Ub71PG.gzCPU9Sl9ljXJgzNGzjuOfbV5bsrPqYu.71A-1747008657-1.0.1.1-ywBKCj78Q50uARzgoM4X9iiBO5hzK3Ee8kKSuEvCraLtnAFLyJCPrm5DhotTKrTEiVFMm153FdfqETxHkHPfOHIdeKcz..n1ErJhKrh2cLo; path=/; expires=Mon, 12-May-25 00:40:57 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=loEyVPFizI37ThHd3SogBZGqDqR9S_Tcu6aIepFbXqc-1747008657458-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b226dac1ffef-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:10:57,505 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:10:57,505 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:10:57,506 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:10:57,506 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:10:57,507 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:10:57,507 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:10:57 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '813'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '817'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9998'), ('x-ratelimit-remaining-tokens', '198657'), ('x-ratelimit-reset-requests', '17.267s'), ('x-ratelimit-reset-tokens', '402ms'), ('x-request-id', 'req_abbc57dd3eb03e56e1f743a6c3482247'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=Ub71PG.gzCPU9Sl9ljXJgzNGzjuOfbV5bsrPqYu.71A-1747008657-1.0.1.1-ywBKCj78Q50uARzgoM4X9iiBO5hzK3Ee8kKSuEvCraLtnAFLyJCPrm5DhotTKrTEiVFMm153FdfqETxHkHPfOHIdeKcz..n1ErJhKrh2cLo; path=/; expires=Mon, 12-May-25 00:40:57 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=loEyVPFizI37ThHd3SogBZGqDqR9S_Tcu6aIepFbXqc-1747008657458-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5b226dac1ffef-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:10:57,507 - openai._base_client - DEBUG - request_id: req_abbc57dd3eb03e56e1f743a6c3482247
2025-05-12 05:10:57,534 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:10:57 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'830'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'834'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9997'), (b'x-ratelimit-remaining-tokens', b'198040'), (b'x-ratelimit-reset-requests', b'25.9s'), (b'x-ratelimit-reset-tokens', b'587ms'), (b'x-request-id', b'req_cec862056e01892c7016483489788168'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=l1xxuVh1Qv.VjfYbvFGODP46sLCta47KkO13SdCfMFY-1747008657-1.0.1.1-HwwOJT1hTmD82a.KO65I3JjiSKxpoH0dMmcY.DrpRckLdLux3JvxCsnQBgLiX1QSjQdK_l0xT08xVf7VCF7t2.PS88FzFWBqFkEGZGLV7EU; path=/; expires=Mon, 12-May-25 00:40:57 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=0b_Ny9EPwu5PLh5FJ4nR0RtwNfubQ0xAbAt4W8ZOsvk-1747008657485-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b226de801c86-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:10:57,535 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:10:57,535 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:10:57,537 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:10:57,537 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:10:57,537 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:10:57,538 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:10:57 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '830'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '834'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9997'), ('x-ratelimit-remaining-tokens', '198040'), ('x-ratelimit-reset-requests', '25.9s'), ('x-ratelimit-reset-tokens', '587ms'), ('x-request-id', 'req_cec862056e01892c7016483489788168'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=l1xxuVh1Qv.VjfYbvFGODP46sLCta47KkO13SdCfMFY-1747008657-1.0.1.1-HwwOJT1hTmD82a.KO65I3JjiSKxpoH0dMmcY.DrpRckLdLux3JvxCsnQBgLiX1QSjQdK_l0xT08xVf7VCF7t2.PS88FzFWBqFkEGZGLV7EU; path=/; expires=Mon, 12-May-25 00:40:57 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=0b_Ny9EPwu5PLh5FJ4nR0RtwNfubQ0xAbAt4W8ZOsvk-1747008657485-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5b226de801c86-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:10:57,538 - openai._base_client - DEBUG - request_id: req_cec862056e01892c7016483489788168
2025-05-12 05:10:58,610 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:10:58 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'768'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'1744'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9996'), (b'x-ratelimit-remaining-tokens', b'197787'), (b'x-ratelimit-reset-requests', b'34.424s'), (b'x-ratelimit-reset-tokens', b'663ms'), (b'x-request-id', b'req_29b69d2291bc8538f0fb6ba44a76b3ca'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=hrLQefv_N9cJkSSSmruHZCIC4rzwMK0GceVTjgO.c6o-1747008658-1.0.1.1-FJllt.n7y128MTKEzi6YI_2f5wpxJaepNzp5QdMZ0cJLbMfoIYKATZuzC0LyOL_vYkFVR.E3Hihcw2MJf7q9VPxcdBbgnIC5UvlM0J5NK4M; path=/; expires=Mon, 12-May-25 00:40:58 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=89Gz7EAc1qg6tWJmFCw4BrlhbHCO0DsSmVP4ANL7NYA-1747008658507-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b226dd0f3d7f-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:10:58,612 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:10:58,612 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:10:58,613 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:10:58,613 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:10:58,613 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:10:58,614 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:10:58 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '768'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '1744'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9996'), ('x-ratelimit-remaining-tokens', '197787'), ('x-ratelimit-reset-requests', '34.424s'), ('x-ratelimit-reset-tokens', '663ms'), ('x-request-id', 'req_29b69d2291bc8538f0fb6ba44a76b3ca'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=hrLQefv_N9cJkSSSmruHZCIC4rzwMK0GceVTjgO.c6o-1747008658-1.0.1.1-FJllt.n7y128MTKEzi6YI_2f5wpxJaepNzp5QdMZ0cJLbMfoIYKATZuzC0LyOL_vYkFVR.E3Hihcw2MJf7q9VPxcdBbgnIC5UvlM0J5NK4M; path=/; expires=Mon, 12-May-25 00:40:58 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=89Gz7EAc1qg6tWJmFCw4BrlhbHCO0DsSmVP4ANL7NYA-1747008658507-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5b226dd0f3d7f-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:10:58,614 - openai._base_client - DEBUG - request_id: req_29b69d2291bc8538f0fb6ba44a76b3ca
2025-05-12 05:10:58,621 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'post_parser': <function Embeddings.create.<locals>.parser at 0x31e243e50>, 'json_data': {'input': [[27435, 16248, 91398, 69556, 18264, 40842, 11320, 2156, 61379, 7952, 48445, 3114, 12507, 1506, 5927, 49520, 23630, 2297, 47273, 30]], 'model': 'text-embedding-ada-002', 'encoding_format': 'base64'}, 'idempotency_key': 'stainless-python-retry-12e35a6c-e175-4b54-a784-692574d0cde0'}
2025-05-12 05:10:58,621 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/embeddings
2025-05-12 05:10:58,622 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:10:58,633 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x323256400>
2025-05-12 05:10:58,633 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x323235b30> server_hostname='api.openai.com' timeout=None
2025-05-12 05:10:58,852 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x323256b20>
2025-05-12 05:10:58,852 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:10:58,852 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:10:58,852 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:10:58,852 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:10:58,852 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:10:59,124 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:10:59 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-model', b'text-embedding-ada-002-v2'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'71'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'via', b'envoy-router-79d48dc4ff-g5vsg'), (b'x-envoy-upstream-service-time', b'74'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'1000000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'999980'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'1ms'), (b'x-request-id', b'req_b6fb9c50c28cdfd754085904c54e075d'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=zhRydlLd2radNZiX6JQqGbdkl2i9Z2fXLLSE0SjayRM-1747008659-1.0.1.1-dD9FwJMUEjGia1vENrE2U_A1brO.qEMocS_xXnpmGRPQLaN0Oq.UJjrd8YeqtJaJEI3mRnN738Dpl6UAtj8GkghdVFabqrDI75YlaF60N7k; path=/; expires=Mon, 12-May-25 00:40:59 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=1CtF6EsefiUw9wo6DTy78G.DL9zvSCrkEPBs7d7yGi8-1747008659077-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b235f993b8b4-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:10:59,124 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 05:10:59,124 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:10:59,125 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:10:59,125 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:10:59,125 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:10:59,125 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/embeddings "200 OK" Headers([('date', 'Mon, 12 May 2025 00:10:59 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-allow-origin', '*'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-model', 'text-embedding-ada-002-v2'), ('openai-organization', 'tochka'), ('openai-processing-ms', '71'), ('openai-version', '2020-10-01'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('via', 'envoy-router-79d48dc4ff-g5vsg'), ('x-envoy-upstream-service-time', '74'), ('x-ratelimit-limit-requests', '3000'), ('x-ratelimit-limit-tokens', '1000000'), ('x-ratelimit-remaining-requests', '2999'), ('x-ratelimit-remaining-tokens', '999980'), ('x-ratelimit-reset-requests', '20ms'), ('x-ratelimit-reset-tokens', '1ms'), ('x-request-id', 'req_b6fb9c50c28cdfd754085904c54e075d'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=zhRydlLd2radNZiX6JQqGbdkl2i9Z2fXLLSE0SjayRM-1747008659-1.0.1.1-dD9FwJMUEjGia1vENrE2U_A1brO.qEMocS_xXnpmGRPQLaN0Oq.UJjrd8YeqtJaJEI3mRnN738Dpl6UAtj8GkghdVFabqrDI75YlaF60N7k; path=/; expires=Mon, 12-May-25 00:40:59 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=1CtF6EsefiUw9wo6DTy78G.DL9zvSCrkEPBs7d7yGi8-1747008659077-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5b235f993b8b4-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:10:59,125 - openai._base_client - DEBUG - request_id: req_b6fb9c50c28cdfd754085904c54e075d
2025-05-12 05:10:59,126 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'post_parser': <function Embeddings.create.<locals>.parser at 0x31e243e50>, 'json_data': {'input': [[27435, 16248, 91398, 69556, 18264, 40842, 11320, 2156, 61379, 7952, 48445, 3114, 12507, 1506, 5927, 49520, 23630, 2297, 47273, 30], [27435, 16248, 91398, 69556, 18264, 40842, 11320, 2156, 61379, 7952, 48445, 3114, 12507, 1506, 5927, 49520, 23630, 2297, 47273, 30], [27435, 16248, 91398, 69556, 18264, 40842, 11320, 2156, 61379, 7952, 48445, 3114, 12507, 1506, 5927, 49520, 23630, 2297, 47273, 30]], 'model': 'text-embedding-ada-002', 'encoding_format': 'base64'}, 'idempotency_key': 'stainless-python-retry-65ecdee5-3296-4ab9-922a-896ffcdf5a0b'}
2025-05-12 05:10:59,127 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/embeddings
2025-05-12 05:10:59,127 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:10:59,128 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:10:59,128 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:10:59,128 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:10:59,128 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:10:59,484 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:10:59 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-model', b'text-embedding-ada-002-v2'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'124'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'via', b'envoy-router-5bd8f6d65-nv2vf'), (b'x-envoy-upstream-service-time', b'127'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'1000000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'999939'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'3ms'), (b'x-request-id', b'req_50bc1cddea83dfd687c28f7462aa0fdd'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b237ba24b8b4-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:10:59,485 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 05:10:59,485 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:10:59,579 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:10:59,579 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:10:59,579 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:10:59,579 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/embeddings "200 OK" Headers({'date': 'Mon, 12 May 2025 00:10:59 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Request-ID', 'openai-model': 'text-embedding-ada-002-v2', 'openai-organization': 'tochka', 'openai-processing-ms': '124', 'openai-version': '2020-10-01', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'via': 'envoy-router-5bd8f6d65-nv2vf', 'x-envoy-upstream-service-time': '127', 'x-ratelimit-limit-requests': '3000', 'x-ratelimit-limit-tokens': '1000000', 'x-ratelimit-remaining-requests': '2999', 'x-ratelimit-remaining-tokens': '999939', 'x-ratelimit-reset-requests': '20ms', 'x-ratelimit-reset-tokens': '3ms', 'x-request-id': 'req_50bc1cddea83dfd687c28f7462aa0fdd', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5b237ba24b8b4-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:10:59,580 - openai._base_client - DEBUG - request_id: req_50bc1cddea83dfd687c28f7462aa0fdd
2025-05-12 05:11:00,183 - ragas._analytics - DEBUG - Flushing triggered for 1 events
2025-05-12 05:11:00,184 - ragas._analytics - DEBUG - Grouped events: {('evaluation', ('answer_relevancy',), 'SINGLE_TURN'): EvaluationEvent(event_type='evaluation', user_id='a-c57b054261b446ec83e28aea108cead0', ragas_version='0.2.15', metrics=['answer_relevancy'], num_rows=1, evaluation_type='SINGLE_TURN', language='english')}
2025-05-12 05:11:00,189 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:11:00,592 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:11:01,255 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:11:01,256 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:11:01,275 - evaluate - INFO - Оценка вопроса: Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:11:01,277 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:8000
2025-05-12 05:11:01,433 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:11:01 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'4688'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4694'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'199257'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'222ms'), (b'x-request-id', b'req_b277c0494dc952aeca0e3fccf64c8143'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=yDCQjD2BIH1csm8tHbthZrTSvLVKDrtdR7ifVBqiViY-1747008661-1.0.1.1-elFaa9zGKb8hvyNyHMIyNgIc7w7y6_MWSbcquMlkISH0.VWN0nZgHaIjKQcKoQAChWWjIHz3F._SLPc.TKr0chx614_DKE6at7KFb4yLyoM; path=/; expires=Mon, 12-May-25 00:41:01 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=h8ZhrCkJREqLzWUHv7e4HqYicSjhvHrTQG4WUwoUY6Q-1747008661321-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b226c90fc5d6-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:11:01,433 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:11:01,434 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:11:01,434 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:11:01,434 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:11:01,434 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:11:01,435 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:11:01 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '4688'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '4694'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '199257'), ('x-ratelimit-reset-requests', '8.64s'), ('x-ratelimit-reset-tokens', '222ms'), ('x-request-id', 'req_b277c0494dc952aeca0e3fccf64c8143'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=yDCQjD2BIH1csm8tHbthZrTSvLVKDrtdR7ifVBqiViY-1747008661-1.0.1.1-elFaa9zGKb8hvyNyHMIyNgIc7w7y6_MWSbcquMlkISH0.VWN0nZgHaIjKQcKoQAChWWjIHz3F._SLPc.TKr0chx614_DKE6at7KFb4yLyoM; path=/; expires=Mon, 12-May-25 00:41:01 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=h8ZhrCkJREqLzWUHv7e4HqYicSjhvHrTQG4WUwoUY6Q-1747008661321-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5b226c90fc5d6-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:11:01,435 - openai._base_client - DEBUG - request_id: req_b277c0494dc952aeca0e3fccf64c8143
2025-05-12 05:11:01,445 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Your task is to judge the faithfulness of a series of statements based on a given context. For each statement you must return verdict as 1 if the statement can be directly inferred based on the context or 0 if the statement can not be directly inferred based on the context.\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"$defs": {"StatementFaithfulnessAnswer": {"properties": {"statement": {"description": "the original statement, word-by-word", "title": "Statement", "type": "string"}, "reason": {"description": "the reason of the verdict", "title": "Reason", "type": "string"}, "verdict": {"description": "the verdict(0/1) of the faithfulness.", "title": "Verdict", "type": "integer"}}, "required": ["statement", "reason", "verdict"], "title": "StatementFaithfulnessAnswer", "type": "object"}}, "properties": {"statements": {"items": {"$ref": "#/$defs/StatementFaithfulnessAnswer"}, "title": "Statements", "type": "array"}}, "required": ["statements"], "title": "NLIStatementOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "context": "John is a student at XYZ University. He is pursuing a degree in Computer Science. He is enrolled in several courses this semester, including Data Structures, Algorithms, and Database Management. John is a diligent student and spends a significant amount of time studying and completing assignments. He often stays late in the library to work on his projects.",\n    "statements": [\n        "John is majoring in Biology.",\n        "John is taking a course on Artificial Intelligence.",\n        "John is a dedicated student.",\n        "John has a part-time job."\n    ]\n}\nOutput: {\n    "statements": [\n        {\n            "statement": "John is majoring in Biology.",\n            "reason": "John\'s major is explicitly mentioned as Computer Science. There is no information suggesting he is majoring in Biology.",\n            "verdict": 0\n        },\n        {\n            "statement": "John is taking a course on Artificial Intelligence.",\n            "reason": "The context mentions the courses John is currently enrolled in, and Artificial Intelligence is not mentioned. Therefore, it cannot be deduced that John is taking a course on AI.",\n            "verdict": 0\n        },\n        {\n            "statement": "John is a dedicated student.",\n            "reason": "The context states that he spends a significant amount of time studying and completing assignments. Additionally, it mentions that he often stays late in the library to work on his projects, which implies dedication.",\n            "verdict": 1\n        },\n        {\n            "statement": "John has a part-time job.",\n            "reason": "There is no information given in the context about John having a part-time job.",\n            "verdict": 0\n        }\n    ]\n}\n\nExample 2\nInput: {\n    "context": "Photosynthesis is a process used by plants, algae, and certain bacteria to convert light energy into chemical energy.",\n    "statements": [\n        "Albert Einstein was a genius."\n    ]\n}\nOutput: {\n    "statements": [\n        {\n            "statement": "Albert Einstein was a genius.",\n            "reason": "The context and statement are unrelated",\n            "verdict": 0\n        }\n    ]\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "context": "Где проверить подлинность диплома\\nВ России есть Федеральный реестр сведений документов об образовании (ФРДО), где любой желающий может бесплатно проверить подлинность документа. В базе есть данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатах о владении русским языком и дополнительном профессиональном образовании.\\nКоротко\\n• Быстрее всего проверить подлинность диплома можно в реестре ФРДО. Заполняете данные и сразу узнаёте, есть ли у сотрудника заявленное образование. • Данные в ФРДО внесены ещё не полностью и, возможно, вы не найдёте нужную информацию, однако это не опровергает факт выдачи документа. • Самые верные способы проверки — направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа 30 дней. • В некоторых учебных заведениях есть собственные сервисы проверки, например, в ВШЭ или СПбГУ.\\nЗапросите копии паспорта, свидетельства о регистрации (ОГРНИП), ИНН, а также лицензию, если она обязательна для ведения его деятельности.",\n    "statements": [\n        "В России можно проверить подлинность диплома в Федеральном реестре сведений документов об образовании (ФРДО).",\n        "Федеральный реестр сведений документов об образовании (ФРДО) содержит данные по дипломам об общем образовании.",\n        "Федеральный реестр сведений документов об образовании (ФРДО) содержит данные по дипломам о среднем профессиональном образовании.",\n        "Федеральный реестр сведений документов об образовании (ФРДО) содержит данные по дипломам о высшем образовании.",\n        "Федеральный реестр сведений документов об образовании (ФРДО) содержит данные по сертификатам о владении русским языком.",\n        "Федеральный реестр сведений документов об образовании (ФРДО) содержит данные по дополнительному профессиональному образованию.",\n        "Не все сведения в Федеральном реестре сведений документов об образовании (ФРДО) еще полностью внесены.",\n        "Возможно, что нужная информация не найдётся.",\n        "В случае отсутствия данных можно направить письменные запросы в Рособрнадзор.",\n        "В случае отсутствия данных можно направить письменные запросы в учебное заведение.",\n        "Срок ответа на письменные запросы составляет 30 дней.",\n        "Некоторые учебные заведения имеют собственные сервисы проверки подлинности документов.",\n        "Примеры учебных заведений с собственными сервисами проверки подлинности документов включают ВШЭ и СПбГУ."\n    ]\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-f816786c-57e4-44e8-870b-3372ae1ec37e'}
2025-05-12 05:11:01,446 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:11:01,446 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:11:01,447 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:11:01,447 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:11:01,447 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:11:01,447 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:11:01,571 - urllib3.connectionpool - DEBUG - http://localhost:8000 "POST /token HTTP/1.1" 200 173
2025-05-12 05:11:01,572 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:8000
2025-05-12 05:11:10,926 - urllib3.connectionpool - DEBUG - http://localhost:8000 "POST /ask HTTP/1.1" 200 4144
2025-05-12 05:11:10,927 - evaluate - INFO - Получен ответ от API для вопроса: Что проверяет налоговая при оц...
2025-05-12 05:11:10,927 - evaluate.metrics - DEBUG - Начинаем вычисление ROUGE-L
2025-05-12 05:11:10,927 - absl - INFO - Using default tokenizer.
2025-05-12 05:11:10,927 - evaluate.metrics - DEBUG - ROUGE-L выполнен успешно, значение: 0
2025-05-12 05:11:10,927 - evaluate.metrics - DEBUG - Начинаем вычисление BERTScore
2025-05-12 05:11:10,930 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): huggingface.co:443
2025-05-12 05:11:11,393 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /bert-base-multilingual-cased/resolve/main/tokenizer_config.json HTTP/1.1" 200 0
2025-05-12 05:11:11,636 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /bert-base-multilingual-cased/resolve/main/config.json HTTP/1.1" 200 0
2025-05-12 05:11:14,451 - evaluate.metrics - DEBUG - BERTScore выполнен успешно, значение: 0.6459
2025-05-12 05:11:14,451 - evaluate.metrics - DEBUG - Начинаем вычисление перекрытия контекста
2025-05-12 05:11:14,550 - evaluate.metrics - DEBUG - Перекрытие контекста выполнено успешно. Recall: 1.5, Precision: 1.0
2025-05-12 05:11:14,550 - evaluate.metrics - DEBUG - Начинаем вычисление семантической достоверности (faithfulness)
2025-05-12 05:11:14,599 - evaluate.metrics - DEBUG - Семантическая достоверность выполнена успешно, значение: 0.9058
2025-05-12 05:11:14,599 - evaluate.metrics - INFO - Начинаем вычисление метрик RAGAS
2025-05-12 05:11:14,599 - evaluate.metrics - DEBUG - Подготовка данных для RAGAS
2025-05-12 05:11:14,600 - evaluate.metrics - DEBUG - Создание датасета из данных
2025-05-12 05:11:14,609 - evaluate.metrics - INFO - RAGAS data: {'question': ['Что проверяет налоговая при оценке надежности компании?'], 'answer': ['Налоговая проверяет надежность компании путем требования разъяснений и документов от компании и её контрагентов, аудиторов. Они также приглашают на беседу сотрудников компании и её контрагентов, используют переводчика для документов на иностранном языке, а также экспертов для исследования свойств предметов (например, фармацевтов, профессоров, художников, учителей). Кроме того, они осматривают помещения и документы компании.'], 'contexts': [['Вот что они делают для проверки:\n• Требуют разъяснения и документы у компании и её контрагентов, аудиторов. Про правила и порядок рассказывают статьи 93, 93.1, 93.2 НК РФ. • Приглашают на беседу в налоговую сотрудников компании и её контрагентов. • Привлекают переводчика, если документы на иностранном языке. • Привлекают экспертов, если нужно исследовать свойства предметов. Например, фармацевтов, профессоров, художников, учителей. Компания может давать своего эксперта. • Осматривают помещения и документы.', '• Чтобы избежать проблем в будущем, следите за полнотой, корректностью и актуальностью сведений в ЕГРЮЛ. Проверить данные можно скачав выписку на сайте налоговой.', 'Если на этом этапе будут несоответствия по одному или нескольким пунктам, налоговики закончат оценку. В компанию придёт выписка с критериями, которым компания не соответствует. Материалы для бизнеса в телеграм-канале Справочной\nПолучайте ежедневные дайджесты новостей и разборы законов, читайте истории предпринимателей и узнавайте о господдержке для бизнеса\nЧто будут проверять дальше.']], 'ground_truths': [['Записи в реестрах, наличие долгов, достоверность информации, показатели ликвидности и платёжеспособности.']]}
2025-05-12 05:11:14,609 - evaluate.metrics - DEBUG - Метрики RAGAS: [answer_relevancy, faithfulness]
2025-05-12 05:11:14,610 - evaluate.metrics - DEBUG - Запуск evaluate() с RAGAS метриками
2025-05-12 05:11:14,612 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:11:15,054 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 402 78
2025-05-12 05:11:15,073 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:11:15,074 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:11:15,428 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:11:15,428 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:11:15,433 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:11:15,433 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:11:15,437 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:11:15,438 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:11:15,497 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Generate a question for the given answer and Identify if answer is noncommittal. Give noncommittal as 1 if the answer is noncommittal and 0 if the answer is committal. A noncommittal answer is one that is evasive, vague, or ambiguous. For example, "I don\'t know" or "I\'m not sure" are noncommittal answers\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"question": {"title": "Question", "type": "string"}, "noncommittal": {"title": "Noncommittal", "type": "integer"}}, "required": ["question", "noncommittal"], "title": "ResponseRelevanceOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "response": "Albert Einstein was born in Germany."\n}\nOutput: {\n    "question": "Where was Albert Einstein born?",\n    "noncommittal": 0\n}\n\nExample 2\nInput: {\n    "response": "I don\'t know about the  groundbreaking feature of the smartphone invented in 2023 as am unaware of information beyond 2022. "\n}\nOutput: {\n    "question": "What was the groundbreaking feature of the smartphone invented in 2023?",\n    "noncommittal": 1\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "response": "Налоговая проверяет надежность компании путем требования разъяснений и документов от компании и её контрагентов, аудиторов. Они также приглашают на беседу сотрудников компании и её контрагентов, используют переводчика для документов на иностранном языке, а также экспертов для исследования свойств предметов (например, фармацевтов, профессоров, художников, учителей). Кроме того, они осматривают помещения и документы компании."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-0a289413-362d-440f-97af-be09f8f1b2cf'}
2025-05-12 05:11:15,498 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:11:15,503 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:11:15,503 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Generate a question for the given answer and Identify if answer is noncommittal. Give noncommittal as 1 if the answer is noncommittal and 0 if the answer is committal. A noncommittal answer is one that is evasive, vague, or ambiguous. For example, "I don\'t know" or "I\'m not sure" are noncommittal answers\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"question": {"title": "Question", "type": "string"}, "noncommittal": {"title": "Noncommittal", "type": "integer"}}, "required": ["question", "noncommittal"], "title": "ResponseRelevanceOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "response": "Albert Einstein was born in Germany."\n}\nOutput: {\n    "question": "Where was Albert Einstein born?",\n    "noncommittal": 0\n}\n\nExample 2\nInput: {\n    "response": "I don\'t know about the  groundbreaking feature of the smartphone invented in 2023 as am unaware of information beyond 2022. "\n}\nOutput: {\n    "question": "What was the groundbreaking feature of the smartphone invented in 2023?",\n    "noncommittal": 1\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "response": "Налоговая проверяет надежность компании путем требования разъяснений и документов от компании и её контрагентов, аудиторов. Они также приглашают на беседу сотрудников компании и её контрагентов, используют переводчика для документов на иностранном языке, а также экспертов для исследования свойств предметов (например, фармацевтов, профессоров, художников, учителей). Кроме того, они осматривают помещения и документы компании."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-53fb95a0-5b40-41d2-a3ae-f8a8cad26b77'}
2025-05-12 05:11:15,504 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:11:15,504 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Given a question and an answer, analyze the complexity of each sentence in the answer. Break down each sentence into one or more fully understandable statements. Ensure that no pronouns are used in any statement. Format the outputs in JSON.\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"statements": {"description": "The generated statements", "items": {"type": "string"}, "title": "Statements", "type": "array"}}, "required": ["statements"], "title": "StatementGeneratorOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "question": "Who was Albert Einstein and what is he best known for?",\n    "answer": "He was a German-born theoretical physicist, widely acknowledged to be one of the greatest and most influential physicists of all time. He was best known for developing the theory of relativity, he also made important contributions to the development of the theory of quantum mechanics."\n}\nOutput: {\n    "statements": [\n        "Albert Einstein was a German-born theoretical physicist.",\n        "Albert Einstein is recognized as one of the greatest and most influential physicists of all time.",\n        "Albert Einstein was best known for developing the theory of relativity.",\n        "Albert Einstein also made important contributions to the development of the theory of quantum mechanics."\n    ]\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "question": "Что проверяет налоговая при оценке надежности компании?",\n    "answer": "Налоговая проверяет надежность компании путем требования разъяснений и документов от компании и её контрагентов, аудиторов. Они также приглашают на беседу сотрудников компании и её контрагентов, используют переводчика для документов на иностранном языке, а также экспертов для исследования свойств предметов (например, фармацевтов, профессоров, художников, учителей). Кроме того, они осматривают помещения и документы компании."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-2463ca21-b3e9-4e26-998c-5bdf1a2b59e3'}
2025-05-12 05:11:15,504 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:11:15,504 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Generate a question for the given answer and Identify if answer is noncommittal. Give noncommittal as 1 if the answer is noncommittal and 0 if the answer is committal. A noncommittal answer is one that is evasive, vague, or ambiguous. For example, "I don\'t know" or "I\'m not sure" are noncommittal answers\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"question": {"title": "Question", "type": "string"}, "noncommittal": {"title": "Noncommittal", "type": "integer"}}, "required": ["question", "noncommittal"], "title": "ResponseRelevanceOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "response": "Albert Einstein was born in Germany."\n}\nOutput: {\n    "question": "Where was Albert Einstein born?",\n    "noncommittal": 0\n}\n\nExample 2\nInput: {\n    "response": "I don\'t know about the  groundbreaking feature of the smartphone invented in 2023 as am unaware of information beyond 2022. "\n}\nOutput: {\n    "question": "What was the groundbreaking feature of the smartphone invented in 2023?",\n    "noncommittal": 1\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "response": "Налоговая проверяет надежность компании путем требования разъяснений и документов от компании и её контрагентов, аудиторов. Они также приглашают на беседу сотрудников компании и её контрагентов, используют переводчика для документов на иностранном языке, а также экспертов для исследования свойств предметов (например, фармацевтов, профессоров, художников, учителей). Кроме того, они осматривают помещения и документы компании."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-edf0b8b3-240c-4fcc-b44b-bc4db8b0147f'}
2025-05-12 05:11:15,505 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:11:15,505 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:11:15,505 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:11:15,505 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:11:15,508 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x30940eb80>
2025-05-12 05:11:15,508 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x309054040> server_hostname='api.openai.com' timeout=None
2025-05-12 05:11:15,511 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x3090c6340>
2025-05-12 05:11:15,511 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x309054040> server_hostname='api.openai.com' timeout=None
2025-05-12 05:11:15,511 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x309466ac0>
2025-05-12 05:11:15,511 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x309054040> server_hostname='api.openai.com' timeout=None
2025-05-12 05:11:15,511 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x3090c6700>
2025-05-12 05:11:15,511 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x309054040> server_hostname='api.openai.com' timeout=None
2025-05-12 05:11:15,713 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x3090c66a0>
2025-05-12 05:11:15,714 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:11:15,714 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:11:15,714 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:11:15,715 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:11:15,715 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:11:15,731 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x3094661f0>
2025-05-12 05:11:15,732 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:11:15,732 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:11:15,732 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:11:15,733 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:11:15,733 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:11:15,745 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x309448a60>
2025-05-12 05:11:15,745 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:11:15,746 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:11:15,746 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:11:15,746 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x309449640>
2025-05-12 05:11:15,746 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:11:15,747 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:11:15,747 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:11:15,748 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:11:15,748 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:11:15,748 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:11:15,748 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:11:16,783 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:11:16 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'760'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'764'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9994'), (b'x-ratelimit-remaining-tokens', b'198502'), (b'x-ratelimit-reset-requests', b'49.787s'), (b'x-ratelimit-reset-tokens', b'449ms'), (b'x-request-id', b'req_bdb7bf65d5e597cc751888f8cc07caee'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=WYIhHSQ6z3xuXTfgYXM5UT6L.4oOfvCHkS5tFr2tR_E-1747008676-1.0.1.1-kelfuknNUEicP7K2ogh99ZgvEGvqwMMWa.ziV9Qt54Sgo0aLy1DvGM8jP59o0gOubsVqlHZFg1c3sO0u6TdtMB0tzIspypDybb8_kOzzZ2k; path=/; expires=Mon, 12-May-25 00:41:16 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=hMKfnoyV.Jo4Wu3R49P5Q9lfMjFfwZ1IuZIWCzw52kM-1747008676730-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b29fa9fcb234-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:11:16,785 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:11:16,785 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:11:16,786 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:11:16,786 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:11:16,786 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:11:16,786 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:11:16 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '760'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '764'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9994'), ('x-ratelimit-remaining-tokens', '198502'), ('x-ratelimit-reset-requests', '49.787s'), ('x-ratelimit-reset-tokens', '449ms'), ('x-request-id', 'req_bdb7bf65d5e597cc751888f8cc07caee'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=WYIhHSQ6z3xuXTfgYXM5UT6L.4oOfvCHkS5tFr2tR_E-1747008676-1.0.1.1-kelfuknNUEicP7K2ogh99ZgvEGvqwMMWa.ziV9Qt54Sgo0aLy1DvGM8jP59o0gOubsVqlHZFg1c3sO0u6TdtMB0tzIspypDybb8_kOzzZ2k; path=/; expires=Mon, 12-May-25 00:41:16 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=hMKfnoyV.Jo4Wu3R49P5Q9lfMjFfwZ1IuZIWCzw52kM-1747008676730-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5b29fa9fcb234-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:11:16,786 - openai._base_client - DEBUG - request_id: req_bdb7bf65d5e597cc751888f8cc07caee
2025-05-12 05:11:16,792 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:11:16 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'796'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'800'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9995'), (b'x-ratelimit-remaining-tokens', b'198980'), (b'x-ratelimit-reset-requests', b'41.164s'), (b'x-ratelimit-reset-tokens', b'305ms'), (b'x-request-id', b'req_01559384748a4298c71a77ebb5284978'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=76Iez_VT8ggZIBL4rgB7Pb9RNBaUVhkYwAAzT7nRzeg-1747008676-1.0.1.1-w705QTqCBABU.ZhNKk_ILmwSAWrXzrknYJuzVGUgpdG3VhTGNO9gL6_ayaYIJ20SwQAKRS3xqdWuAkIAq9JuvFbRZv0gySo4P7YdppkRiCY; path=/; expires=Mon, 12-May-25 00:41:16 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=G0Y30M1Qp9OX7Ov7Ba97oh.dnKDrlrmVKfF9fDp2GP4-1747008676745-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b29f7e441c7c-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:11:16,792 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:11:16,792 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:11:16,811 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:11:16,811 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:11:16,811 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:11:16,811 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:11:16 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '796'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '800'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9995'), ('x-ratelimit-remaining-tokens', '198980'), ('x-ratelimit-reset-requests', '41.164s'), ('x-ratelimit-reset-tokens', '305ms'), ('x-request-id', 'req_01559384748a4298c71a77ebb5284978'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=76Iez_VT8ggZIBL4rgB7Pb9RNBaUVhkYwAAzT7nRzeg-1747008676-1.0.1.1-w705QTqCBABU.ZhNKk_ILmwSAWrXzrknYJuzVGUgpdG3VhTGNO9gL6_ayaYIJ20SwQAKRS3xqdWuAkIAq9JuvFbRZv0gySo4P7YdppkRiCY; path=/; expires=Mon, 12-May-25 00:41:16 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=G0Y30M1Qp9OX7Ov7Ba97oh.dnKDrlrmVKfF9fDp2GP4-1747008676745-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5b29f7e441c7c-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:11:16,812 - openai._base_client - DEBUG - request_id: req_01559384748a4298c71a77ebb5284978
2025-05-12 05:11:16,868 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:11:16 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'892'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'899'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9996'), (b'x-ratelimit-remaining-tokens', b'199467'), (b'x-ratelimit-reset-requests', b'32.537s'), (b'x-ratelimit-reset-tokens', b'159ms'), (b'x-request-id', b'req_861032a36fd45be8ba07d444a9d16ce5'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=zQZ9.Rk2GFwSR.QlTPzD_QdHANTb6VrZgwEwuYN14Pk-1747008676-1.0.1.1-MiH3umb0jePPY19OgF8QR7QQx.joc_.lvRZic6ptLN2ZbTsMIt07Zk7qimGpSU33_cllrm7PMnIX2WWcgAnVXZyE6NmX0UtEiMYmrpV_lI0; path=/; expires=Mon, 12-May-25 00:41:16 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=CRpSO37p7GqAKUeZTrxC80tta2StaDnfKfpAtqH49jw-1747008676828-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b29f6b5c6630-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:11:16,868 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:11:16,868 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:11:16,873 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:11:16,873 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:11:16,873 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:11:16,873 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:11:16 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '892'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '899'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9996'), ('x-ratelimit-remaining-tokens', '199467'), ('x-ratelimit-reset-requests', '32.537s'), ('x-ratelimit-reset-tokens', '159ms'), ('x-request-id', 'req_861032a36fd45be8ba07d444a9d16ce5'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=zQZ9.Rk2GFwSR.QlTPzD_QdHANTb6VrZgwEwuYN14Pk-1747008676-1.0.1.1-MiH3umb0jePPY19OgF8QR7QQx.joc_.lvRZic6ptLN2ZbTsMIt07Zk7qimGpSU33_cllrm7PMnIX2WWcgAnVXZyE6NmX0UtEiMYmrpV_lI0; path=/; expires=Mon, 12-May-25 00:41:16 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=CRpSO37p7GqAKUeZTrxC80tta2StaDnfKfpAtqH49jw-1747008676828-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5b29f6b5c6630-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:11:16,873 - openai._base_client - DEBUG - request_id: req_861032a36fd45be8ba07d444a9d16ce5
2025-05-12 05:11:16,993 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'post_parser': <function Embeddings.create.<locals>.parser at 0x309058a60>, 'json_data': {'input': [[73919, 25657, 69556, 4329, 8341, 13373, 3114, 14837, 6856, 36497, 37405, 8379, 10589, 5372, 53671, 6850, 23680, 50436, 68742, 77573, 14332, 1840, 30]], 'model': 'text-embedding-ada-002', 'encoding_format': 'base64'}, 'idempotency_key': 'stainless-python-retry-7894936f-7379-4374-b363-d9816511e8c9'}
2025-05-12 05:11:16,993 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/embeddings
2025-05-12 05:11:16,994 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:11:16,995 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x309a6d760>
2025-05-12 05:11:16,996 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x3090542e0> server_hostname='api.openai.com' timeout=None
2025-05-12 05:11:17,219 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x309a6d730>
2025-05-12 05:11:17,219 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:11:17,219 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:11:17,219 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:11:17,219 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:11:17,219 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:11:17,714 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:11:17 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-model', b'text-embedding-ada-002-v2'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'75'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'via', b'envoy-router-66d9d5f44f-7jtx4'), (b'x-envoy-upstream-service-time', b'77'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'1000000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'999977'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'1ms'), (b'x-request-id', b'req_c7f521a8bc8f133157eb05f13059a5c8'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=lccKhaajM3L9VVUHVUkaZ9vUDZcWJhnf2KsDMaib2C8-1747008677-1.0.1.1-iwtdirmpGG5cXLjxtD9HHA5q7ZbSiX6QzBH76BTeEYkXg8sU99y3n85zTe44WISeN_TQyAjtmpyrslvPSNKa9mURbSsILe27aDfLiRvfU4k; path=/; expires=Mon, 12-May-25 00:41:17 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=JSgdRlpUZXk1mMIHH.bw9kQb0Bsi8oyEBDEZP_KQiQs-1747008677666-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b2a8c92721d7-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:11:17,715 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 05:11:17,715 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:11:17,716 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:11:17,716 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:11:17,716 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:11:17,716 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/embeddings "200 OK" Headers([('date', 'Mon, 12 May 2025 00:11:17 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-allow-origin', '*'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-model', 'text-embedding-ada-002-v2'), ('openai-organization', 'tochka'), ('openai-processing-ms', '75'), ('openai-version', '2020-10-01'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('via', 'envoy-router-66d9d5f44f-7jtx4'), ('x-envoy-upstream-service-time', '77'), ('x-ratelimit-limit-requests', '3000'), ('x-ratelimit-limit-tokens', '1000000'), ('x-ratelimit-remaining-requests', '2999'), ('x-ratelimit-remaining-tokens', '999977'), ('x-ratelimit-reset-requests', '20ms'), ('x-ratelimit-reset-tokens', '1ms'), ('x-request-id', 'req_c7f521a8bc8f133157eb05f13059a5c8'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=lccKhaajM3L9VVUHVUkaZ9vUDZcWJhnf2KsDMaib2C8-1747008677-1.0.1.1-iwtdirmpGG5cXLjxtD9HHA5q7ZbSiX6QzBH76BTeEYkXg8sU99y3n85zTe44WISeN_TQyAjtmpyrslvPSNKa9mURbSsILe27aDfLiRvfU4k; path=/; expires=Mon, 12-May-25 00:41:17 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=JSgdRlpUZXk1mMIHH.bw9kQb0Bsi8oyEBDEZP_KQiQs-1747008677666-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5b2a8c92721d7-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:11:17,716 - openai._base_client - DEBUG - request_id: req_c7f521a8bc8f133157eb05f13059a5c8
2025-05-12 05:11:17,717 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'post_parser': <function Embeddings.create.<locals>.parser at 0x30945c790>, 'json_data': {'input': [[27435, 16248, 13373, 3114, 14837, 6856, 36497, 69556, 4329, 8341, 6850, 23680, 50436, 61379, 77573, 14332, 1840, 30], [27435, 16248, 13373, 3114, 14837, 6856, 36497, 69556, 4329, 8341, 6850, 23680, 50436, 61379, 77573, 14332, 1840, 30], [27435, 16248, 13373, 3114, 14837, 6856, 36497, 69556, 4329, 8341, 6850, 23680, 50436, 61379, 77573, 14332, 1840, 30]], 'model': 'text-embedding-ada-002', 'encoding_format': 'base64'}, 'idempotency_key': 'stainless-python-retry-1881207e-6d31-4415-ba74-99aaa4afe305'}
2025-05-12 05:11:17,717 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/embeddings
2025-05-12 05:11:17,718 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:11:17,718 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:11:17,718 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:11:17,718 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:11:17,718 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:11:18,194 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:11:18 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-model', b'text-embedding-ada-002-v2'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'199'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'via', b'envoy-router-6b78fbf94c-kql8c'), (b'x-envoy-upstream-service-time', b'202'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'1000000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'999946'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'3ms'), (b'x-request-id', b'req_fd955fc48d31cce518ac1b33d198ea30'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b2abecc721d7-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:11:18,194 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 05:11:18,194 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:11:18,339 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:11:18,340 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:11:18,340 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:11:18,340 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/embeddings "200 OK" Headers({'date': 'Mon, 12 May 2025 00:11:18 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Request-ID', 'openai-model': 'text-embedding-ada-002-v2', 'openai-organization': 'tochka', 'openai-processing-ms': '199', 'openai-version': '2020-10-01', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'via': 'envoy-router-6b78fbf94c-kql8c', 'x-envoy-upstream-service-time': '202', 'x-ratelimit-limit-requests': '3000', 'x-ratelimit-limit-tokens': '1000000', 'x-ratelimit-remaining-requests': '2999', 'x-ratelimit-remaining-tokens': '999946', 'x-ratelimit-reset-requests': '20ms', 'x-ratelimit-reset-tokens': '3ms', 'x-request-id': 'req_fd955fc48d31cce518ac1b33d198ea30', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5b2abecc721d7-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:11:18,340 - openai._base_client - DEBUG - request_id: req_fd955fc48d31cce518ac1b33d198ea30
2025-05-12 05:11:18,393 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:11:18 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'16685'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'16690'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9995'), (b'x-ratelimit-remaining-tokens', b'198033'), (b'x-ratelimit-reset-requests', b'38.174s'), (b'x-ratelimit-reset-tokens', b'589ms'), (b'x-request-id', b'req_542b1a33951b005d8ca96fe8a96f2be9'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b24638f2c5d6-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:11:18,394 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:11:18,395 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:11:18,397 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:11:18,397 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:11:18,397 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:11:18,398 - httpcore.connection - DEBUG - close.started
2025-05-12 05:11:18,398 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:11:18,398 - httpcore.connection - DEBUG - close.started
2025-05-12 05:11:18,398 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:11:18,398 - httpcore.connection - DEBUG - close.started
2025-05-12 05:11:18,398 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:11:18,399 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:11:18 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '16685', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '16690', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9995', 'x-ratelimit-remaining-tokens': '198033', 'x-ratelimit-reset-requests': '38.174s', 'x-ratelimit-reset-tokens': '589ms', 'x-request-id': 'req_542b1a33951b005d8ca96fe8a96f2be9', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5b24638f2c5d6-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:11:18,400 - openai._base_client - DEBUG - request_id: req_542b1a33951b005d8ca96fe8a96f2be9
2025-05-12 05:11:18,414 - ragas._analytics - DEBUG - Flushing triggered for 1 events
2025-05-12 05:11:18,414 - ragas._analytics - DEBUG - Grouped events: {('evaluation', ('faithfulness',), 'SINGLE_TURN'): EvaluationEvent(event_type='evaluation', user_id='a-c57b054261b446ec83e28aea108cead0', ragas_version='0.2.15', metrics=['faithfulness'], num_rows=1, evaluation_type='SINGLE_TURN', language='english')}
2025-05-12 05:11:18,419 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:11:18,637 - ragas._analytics - DEBUG - Flushing triggered for 1 events
2025-05-12 05:11:18,637 - ragas._analytics - DEBUG - Grouped events: {('evaluation', ('faithfulness',), 'SINGLE_TURN'): EvaluationEvent(event_type='evaluation', user_id='a-c57b054261b446ec83e28aea108cead0', ragas_version='0.2.15', metrics=['faithfulness'], num_rows=1, evaluation_type='SINGLE_TURN', language='english')}
2025-05-12 05:11:18,638 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:11:18,805 - ragas._analytics - DEBUG - Flushing triggered for 1 events
2025-05-12 05:11:18,806 - ragas._analytics - DEBUG - Grouped events: {('evaluation', ('answer_relevancy',), 'SINGLE_TURN'): EvaluationEvent(event_type='evaluation', user_id='a-c57b054261b446ec83e28aea108cead0', ragas_version='0.2.15', metrics=['answer_relevancy'], num_rows=1, evaluation_type='SINGLE_TURN', language='english')}
2025-05-12 05:11:18,807 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:11:18,826 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:11:18,827 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:11:19,036 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:11:19,130 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:11:19 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'3110'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3113'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9993'), (b'x-ratelimit-remaining-tokens', b'197885'), (b'x-ratelimit-reset-requests', b'58.421s'), (b'x-ratelimit-reset-tokens', b'634ms'), (b'x-request-id', b'req_7da7f9f270914f492362de06aa3fa49a'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=nPitguI6RCJZOc0ZYnn92LtrLswjgjJBdBrrjQZImvU-1747008679-1.0.1.1-OU1hRHJcbkbYswUgRZtw40_ey8BhuIhi.I5QP0ZODTmtiDkyS00kfu3Lxkt.yrd62DE5FzPt775UwbsSIf5EslgGwrDn7VrBL5pDWHhkADs; path=/; expires=Mon, 12-May-25 00:41:19 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=xHcoxBZhUNLNyuge9PEIlfF6ERhIk0Ay9Ky2mJF0E10-1747008679082-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b29f9b0d1c8f-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:11:19,131 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:11:19,131 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:11:19,132 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:11:19,132 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:11:19,132 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:11:19,133 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:11:19 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '3110'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '3113'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9993'), ('x-ratelimit-remaining-tokens', '197885'), ('x-ratelimit-reset-requests', '58.421s'), ('x-ratelimit-reset-tokens', '634ms'), ('x-request-id', 'req_7da7f9f270914f492362de06aa3fa49a'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=nPitguI6RCJZOc0ZYnn92LtrLswjgjJBdBrrjQZImvU-1747008679-1.0.1.1-OU1hRHJcbkbYswUgRZtw40_ey8BhuIhi.I5QP0ZODTmtiDkyS00kfu3Lxkt.yrd62DE5FzPt775UwbsSIf5EslgGwrDn7VrBL5pDWHhkADs; path=/; expires=Mon, 12-May-25 00:41:19 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=xHcoxBZhUNLNyuge9PEIlfF6ERhIk0Ay9Ky2mJF0E10-1747008679082-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5b29f9b0d1c8f-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:11:19,133 - openai._base_client - DEBUG - request_id: req_7da7f9f270914f492362de06aa3fa49a
2025-05-12 05:11:19,137 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Your task is to judge the faithfulness of a series of statements based on a given context. For each statement you must return verdict as 1 if the statement can be directly inferred based on the context or 0 if the statement can not be directly inferred based on the context.\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"$defs": {"StatementFaithfulnessAnswer": {"properties": {"statement": {"description": "the original statement, word-by-word", "title": "Statement", "type": "string"}, "reason": {"description": "the reason of the verdict", "title": "Reason", "type": "string"}, "verdict": {"description": "the verdict(0/1) of the faithfulness.", "title": "Verdict", "type": "integer"}}, "required": ["statement", "reason", "verdict"], "title": "StatementFaithfulnessAnswer", "type": "object"}}, "properties": {"statements": {"items": {"$ref": "#/$defs/StatementFaithfulnessAnswer"}, "title": "Statements", "type": "array"}}, "required": ["statements"], "title": "NLIStatementOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "context": "John is a student at XYZ University. He is pursuing a degree in Computer Science. He is enrolled in several courses this semester, including Data Structures, Algorithms, and Database Management. John is a diligent student and spends a significant amount of time studying and completing assignments. He often stays late in the library to work on his projects.",\n    "statements": [\n        "John is majoring in Biology.",\n        "John is taking a course on Artificial Intelligence.",\n        "John is a dedicated student.",\n        "John has a part-time job."\n    ]\n}\nOutput: {\n    "statements": [\n        {\n            "statement": "John is majoring in Biology.",\n            "reason": "John\'s major is explicitly mentioned as Computer Science. There is no information suggesting he is majoring in Biology.",\n            "verdict": 0\n        },\n        {\n            "statement": "John is taking a course on Artificial Intelligence.",\n            "reason": "The context mentions the courses John is currently enrolled in, and Artificial Intelligence is not mentioned. Therefore, it cannot be deduced that John is taking a course on AI.",\n            "verdict": 0\n        },\n        {\n            "statement": "John is a dedicated student.",\n            "reason": "The context states that he spends a significant amount of time studying and completing assignments. Additionally, it mentions that he often stays late in the library to work on his projects, which implies dedication.",\n            "verdict": 1\n        },\n        {\n            "statement": "John has a part-time job.",\n            "reason": "There is no information given in the context about John having a part-time job.",\n            "verdict": 0\n        }\n    ]\n}\n\nExample 2\nInput: {\n    "context": "Photosynthesis is a process used by plants, algae, and certain bacteria to convert light energy into chemical energy.",\n    "statements": [\n        "Albert Einstein was a genius."\n    ]\n}\nOutput: {\n    "statements": [\n        {\n            "statement": "Albert Einstein was a genius.",\n            "reason": "The context and statement are unrelated",\n            "verdict": 0\n        }\n    ]\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "context": "Вот что они делают для проверки:\\n• Требуют разъяснения и документы у компании и её контрагентов, аудиторов. Про правила и порядок рассказывают статьи 93, 93.1, 93.2 НК РФ. • Приглашают на беседу в налоговую сотрудников компании и её контрагентов. • Привлекают переводчика, если документы на иностранном языке. • Привлекают экспертов, если нужно исследовать свойства предметов. Например, фармацевтов, профессоров, художников, учителей. Компания может давать своего эксперта. • Осматривают помещения и документы.\\n• Чтобы избежать проблем в будущем, следите за полнотой, корректностью и актуальностью сведений в ЕГРЮЛ. Проверить данные можно скачав выписку на сайте налоговой.\\nЕсли на этом этапе будут несоответствия по одному или нескольким пунктам, налоговики закончат оценку. В компанию придёт выписка с критериями, которым компания не соответствует. Материалы для бизнеса в телеграм-канале Справочной\\nПолучайте ежедневные дайджесты новостей и разборы законов, читайте истории предпринимателей и узнавайте о господдержке для бизнеса\\nЧто будут проверять дальше.",\n    "statements": [\n        "Налоговая проверяет надежность компании.",\n        "Налоговая требует разъяснений и документов от компании и её контрагентов.",\n        "Налоговая требует документы от аудиторов.",\n        "Налоговая приглашает на беседу сотрудников компании.",\n        "Налоговая приглашает на беседу контрагентов.",\n        "Налоговая использует переводчика для документов на иностранном языке.",\n        "Налоговая использует экспертов для исследования свойств предметов.",\n        "Экспертами могут быть фармацевты.",\n        "Экспертами могут быть профессора.",\n        "Экспертами могут быть художники.",\n        "Экспертами могут быть учителя.",\n        "Налоговая осматривает помещения компании.",\n        "Налоговая осматривает документы компании."\n    ]\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-6e3d67f4-d9dc-4da3-a7b4-7af1ecdbab9b'}
2025-05-12 05:11:19,138 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:11:19,139 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:11:19,139 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:11:19,139 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:11:19,139 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:11:19,139 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:11:19,198 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:11:19,236 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:11:19,236 - evaluate.metrics - DEBUG - Результат RAGAS: {'answer_relevancy': 0.0000, 'faithfulness': 1.0000}
2025-05-12 05:11:19,236 - evaluate.metrics - ERROR - Внутренняя ошибка при вычислении метрик RAGAS: 0
2025-05-12 05:11:19,290 - evaluate.metrics - ERROR - Traceback (most recent call last):
  File "/Users/tochka/Documents/RAG/rag/evaluation/metrics.py", line 135, in compute_all_metrics
    logger.debug(f"Результат RAGAS: {ragas_result}")
  File "/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/ragas/dataset_schema.py", line 446, in __getitem__
    return self._scores_dict[key]
KeyError: 0

2025-05-12 05:11:19,290 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'Ты - точный оценщик качества ответов. Отвечай только числом от 0 до 1.'}, {'role': 'user', 'content': '\n        Вопрос: Как можно проверить подлинность диплома в России?\n        Ответ: В России можно проверить подлинность диплома в Федеральном реестре сведений документов об образовании (ФРДО). Этот реестр содержит данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатам о владении русским языком и дополнительном профессиональном образовании. Однако не все сведения в ФРДО еще полностью внесены, поэтому возможно, что у вас не найдётся нужная информация. В случае отсутствия данных можно направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа составляет 30 дней. Кроме того, некоторые учебные заведения имеют собственные сервисы проверки подлинности документов, например, в ВШЭ или СПбГУ.\n\n        Насколько данный ответ релевантен вопросу, независимо от контекста? Ответь одним числом от 0 до 1.\n        '}], 'model': 'gpt-3.5-turbo', 'temperature': 0}, 'idempotency_key': 'stainless-python-retry-a1ea2528-3374-4fca-9da2-c3f4283c8699'}
2025-05-12 05:11:19,291 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:11:19,291 - httpcore.connection - DEBUG - close.started
2025-05-12 05:11:19,292 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:11:19,292 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-05-12 05:11:19,293 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x31e850a30>
2025-05-12 05:11:19,293 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x31bc520b0> server_hostname='api.openai.com' timeout=5.0
2025-05-12 05:11:19,509 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x31e8153d0>
2025-05-12 05:11:19,509 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:11:19,510 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:11:19,510 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:11:19,510 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:11:19,510 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:11:20,683 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:11:20 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'815'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'820'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'199577'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'126ms'), (b'x-request-id', b'req_ba45384fa5fdec472f37353163997da7'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b2b71ad73581-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:11:20,683 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:11:20,683 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:11:20,684 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:11:20,684 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:11:20,684 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:11:20,684 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:11:20 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '815', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '820', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '199577', 'x-ratelimit-reset-requests': '8.64s', 'x-ratelimit-reset-tokens': '126ms', 'x-request-id': 'req_ba45384fa5fdec472f37353163997da7', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5b2b71ad73581-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:11:20,684 - openai._base_client - DEBUG - request_id: req_ba45384fa5fdec472f37353163997da7
2025-05-12 05:11:20,685 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'Ты - точный оценщик качества ответов. Отвечай только числом от 0 до 1.'}, {'role': 'user', 'content': '\n        Ответ: В России можно проверить подлинность диплома в Федеральном реестре сведений документов об образовании (ФРДО). Этот реестр содержит данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатам о владении русским языком и дополнительном профессиональном образовании. Однако не все сведения в ФРДО еще полностью внесены, поэтому возможно, что у вас не найдётся нужная информация. В случае отсутствия данных можно направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа составляет 30 дней. Кроме того, некоторые учебные заведения имеют собственные сервисы проверки подлинности документов, например, в ВШЭ или СПбГУ.\n        Контекст: Где проверить подлинность диплома\nВ России есть Федеральный реестр сведений документов об образовании (ФРДО), где любой желающий может бесплатно проверить подлинность документа. В базе есть данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатах о владении русским языком и дополнительном профессиональном образовании. Коротко\n• Быстрее всего проверить подлинность диплома можно в реестре ФРДО. Заполняете данные и сразу узнаёте, есть ли у сотрудника заявленное образование. • Данные в ФРДО внесены ещё не полностью и, возможно, вы не найдёте нужную информацию, однако это не опровергает факт выдачи документа. • Самые верные способы проверки — направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа 30 дней. • В некоторых учебных заведениях есть собственные сервисы проверки, например, в ВШЭ или СПбГУ. Запросите копии паспорта, свидетельства о регистрации (ОГРНИП), ИНН, а также лицензию, если она обязательна для ведения его деятельности.\n\n        Насколько данный ответ соответствует только предоставленному контексту, без добавления лишней информации? Ответь одним числом от 0 до 1.\n        '}], 'model': 'gpt-3.5-turbo', 'temperature': 0}, 'idempotency_key': 'stainless-python-retry-63d153b2-3a79-4cfe-8023-731a855c6d6d'}
2025-05-12 05:11:20,685 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:11:20,685 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:11:20,685 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:11:20,685 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:11:20,686 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:11:20,686 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:11:21,295 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:11:21 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'273'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'290'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9998'), (b'x-ratelimit-remaining-tokens', b'199122'), (b'x-ratelimit-reset-requests', b'16.115s'), (b'x-ratelimit-reset-tokens', b'263ms'), (b'x-request-id', b'req_2631ad785affb38feffe7fb2d43f51eb'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b2be7a613581-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:11:21,295 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:11:21,296 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:11:21,296 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:11:21,296 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:11:21,296 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:11:21,296 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:11:21 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '273', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '290', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9998', 'x-ratelimit-remaining-tokens': '199122', 'x-ratelimit-reset-requests': '16.115s', 'x-ratelimit-reset-tokens': '263ms', 'x-request-id': 'req_2631ad785affb38feffe7fb2d43f51eb', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5b2be7a613581-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:11:21,296 - openai._base_client - DEBUG - request_id: req_2631ad785affb38feffe7fb2d43f51eb
2025-05-12 05:11:21,297 - evaluate - INFO - 
Сохранены результаты оценки в results/eval_subset_results.json
2025-05-12 05:11:21,297 - evaluate - INFO - 
--- Сводка по метрикам ---
2025-05-12 05:11:21,314 - evaluate - INFO -                             mean
rouge_l                   0.0000
bertscore                 0.6502
context_recall_manual     1.3333
context_precision_manual  1.0000
faithfulness_semantic     0.9351
ragas_answer_relevance       NaN
ragas_faithfulness           NaN
ragas_context_recall         NaN
llm_relevance             0.8333
llm_faithfulness          1.0000
2025-05-12 05:11:21,375 - evaluate - INFO - 
Сохранена сводка в results/eval_subset_results_summary.csv
2025-05-12 05:11:21,437 - matplotlib.pyplot - DEBUG - Loaded backend macosx version unknown.
2025-05-12 05:11:21,686 - matplotlib.font_manager - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2025-05-12 05:11:21,687 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,687 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-05-12 05:11:21,687 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-05-12 05:11:21,688 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,688 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,688 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,688 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,688 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,688 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,688 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,688 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,688 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,688 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,688 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,688 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,689 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,690 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,691 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,691 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:11:21,691 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,691 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,691 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,691 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,691 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,691 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,691 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,691 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:11:21,691 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,691 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,691 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,691 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,691 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,691 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,691 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,691 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,691 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,691 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,691 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,691 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,692 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,692 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,692 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,692 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,692 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2025-05-12 05:11:21,692 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,692 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,692 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,692 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,692 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,692 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,692 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,692 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,692 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,692 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,692 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:11:21,693 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,693 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,693 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,693 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,693 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,693 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,693 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,693 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,693 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:11:21,693 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,693 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,693 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-05-12 05:11:21,693 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,693 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,693 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/PingFang.ttc', name='PingFang HK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.ttf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,694 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,695 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-12 05:11:21,695 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,695 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,695 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,695 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-05-12 05:11:21,695 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,695 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,695 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,695 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,695 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,695 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,695 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,695 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,695 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-12 05:11:21,695 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,695 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,695 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,695 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,695 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,695 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,695 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,695 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,695 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,695 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-05-12 05:11:21,696 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,696 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,696 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,696 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:11:21,696 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,696 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,696 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,696 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,696 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,696 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,696 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,696 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,696 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,696 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,696 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,696 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,696 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
2025-05-12 05:11:21,696 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,697 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,697 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-05-12 05:11:21,697 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,697 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,698 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,698 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,698 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,698 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,698 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,698 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,698 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,698 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,698 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,699 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,700 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,701 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,701 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,701 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,701 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,701 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-12 05:11:21,701 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:11:21,701 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,701 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-05-12 05:11:21,701 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,701 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,701 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,701 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,701 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,701 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,701 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,701 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,701 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,701 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,702 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2025-05-12 05:11:21,702 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,702 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:11:21,702 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,702 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,702 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,702 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,702 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-05-12 05:11:21,702 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,702 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,703 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.ttf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
2025-05-12 05:11:21,704 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,705 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:11:21,705 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,705 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,705 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,705 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,705 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,705 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,705 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,705 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2025-05-12 05:11:21,705 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,705 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,705 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2025-05-12 05:11:21,705 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,705 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,705 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,705 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,705 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,705 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,705 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,705 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,705 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,705 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,705 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,706 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,706 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,706 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,706 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,706 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-12 05:11:21,706 - matplotlib.font_manager - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2025-05-12 05:11:21,714 - httpcore.connection - DEBUG - close.started
2025-05-12 05:11:21,714 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:11:21,754 - matplotlib.font_manager - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2025-05-12 05:11:21,755 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,755 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-05-12 05:11:21,755 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-05-12 05:11:21,761 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,761 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,761 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,761 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,761 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,761 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,761 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,762 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,762 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,762 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,763 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,763 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,763 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,764 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,764 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,764 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-05-12 05:11:21,764 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,765 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,765 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,766 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,766 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,766 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:11:21,766 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:11:21,769 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:11:21,769 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,769 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,775 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,775 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:11:21,775 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-05-12 05:11:21,777 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,777 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,777 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,777 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,778 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,778 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,779 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,780 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:11:21,780 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,780 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,780 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:11:21,780 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,780 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,780 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,782 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,782 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-05-12 05:11:21,783 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,784 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,784 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,784 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,785 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-12 05:11:21,785 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,785 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,785 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,785 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,785 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:11:21,785 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,785 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,785 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-12 05:11:21,785 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,785 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,785 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,785 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,785 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,785 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,785 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,785 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,786 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,786 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,786 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-05-12 05:11:21,786 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,787 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,787 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,787 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,787 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,787 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:11:21,787 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,787 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,787 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,787 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,787 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,787 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,788 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,788 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:11:21,788 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,788 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,788 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,788 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,788 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,788 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,788 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,788 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,788 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,788 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,788 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,790 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,790 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,790 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,790 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,791 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,791 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2025-05-12 05:11:21,791 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,791 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,794 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,794 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,794 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,794 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,804 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,804 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,804 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,804 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,804 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:11:21,804 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,804 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,804 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,805 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,805 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,805 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,805 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,805 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,805 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:11:21,805 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,805 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,806 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-05-12 05:11:21,806 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,807 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,807 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,807 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:11:21,807 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2025-05-12 05:11:21,807 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,807 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:11:21,807 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,807 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,807 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,807 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,808 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,808 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,808 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,808 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,808 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-05-12 05:11:21,808 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,808 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,810 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,810 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,810 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,810 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,811 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,811 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,811 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/PingFang.ttc', name='PingFang HK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,811 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,811 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,811 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,812 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.ttf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,812 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,812 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,812 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,812 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,812 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,813 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-12 05:11:21,813 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,813 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,813 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,818 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-05-12 05:11:21,818 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,818 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,818 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,818 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,818 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,818 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,819 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,819 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,819 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-12 05:11:21,819 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,819 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,819 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,819 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,819 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,819 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,819 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,819 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,819 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,819 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-05-12 05:11:21,819 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,819 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,819 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,820 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:11:21,820 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,820 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,820 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,820 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,820 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,820 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,820 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,820 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,820 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,820 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,820 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,820 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,820 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
2025-05-12 05:11:21,820 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,821 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,821 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-05-12 05:11:21,821 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,821 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,821 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,821 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,821 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,821 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,821 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,821 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,821 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,821 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,821 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,821 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-05-12 05:11:21,821 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,821 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,821 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,821 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,821 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,821 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:11:21,822 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,822 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,822 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-12 05:11:21,822 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,822 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,822 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,822 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2025-05-12 05:11:21,827 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,827 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,827 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,827 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,827 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,827 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,827 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,827 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,827 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,827 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,827 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,828 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,828 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,828 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,828 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,828 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,828 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,828 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,828 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,828 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:11:21,828 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,828 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,828 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,828 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,828 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-05-12 05:11:21,828 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,828 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,828 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,828 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,828 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:11:21,828 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,828 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,828 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,828 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:11:21,828 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,828 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,829 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,829 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,830 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,830 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:11:21,830 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,830 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,830 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:11:21,830 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,830 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,830 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,830 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,830 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,830 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,830 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,830 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-12 05:11:21,830 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:11:21,831 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,831 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-05-12 05:11:21,831 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,831 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,831 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,831 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,831 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,831 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,831 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,831 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,831 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,831 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,831 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2025-05-12 05:11:21,831 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,831 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:11:21,831 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,833 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,834 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,834 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,834 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-05-12 05:11:21,834 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,834 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,834 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:11:21,834 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,834 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,834 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,834 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,834 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,835 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,836 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,836 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,836 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,836 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,836 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,836 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2025-05-12 05:11:21,836 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,836 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,836 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,839 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,839 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,839 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,839 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,840 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,840 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,840 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,840 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,840 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:11:21,840 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,840 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,840 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,840 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,840 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,840 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,840 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,840 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,840 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,841 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
2025-05-12 05:11:21,841 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:11:21,841 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,841 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,841 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:11:21,841 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,841 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,841 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,841 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,841 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,841 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:11:21,841 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,841 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,841 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-05-12 05:11:21,845 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.ttf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,845 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,845 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:11:21,845 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,845 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,845 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,845 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,845 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
2025-05-12 05:11:21,846 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,846 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:11:21,846 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,846 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,847 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,847 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,847 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,847 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,847 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,847 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2025-05-12 05:11:21,847 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,847 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,847 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2025-05-12 05:11:21,847 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,847 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,847 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,847 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,847 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,847 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,847 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,847 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:11:21,847 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,847 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:11:21,847 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,847 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,847 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,847 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,847 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:11:21,848 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-12 05:11:21,848 - matplotlib.font_manager - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2025-05-12 05:11:22,043 - evaluate - INFO - График метрик сохранен в results/eval_subset_results_metrics.png/svg
2025-05-12 05:11:22,312 - evaluate - INFO - Диаграмма размаха сохранена в results/eval_subset_results_boxplot.png/svg
2025-05-12 05:11:22,481 - evaluate - INFO - Диаграмма рассеяния LLM сохранена в results/eval_subset_results_llm_scatter.png/svg
2025-05-12 05:11:22,481 - evaluate - INFO - Сохранены визуализации в results/eval_subset_results_*.svg/.png
2025-05-12 05:11:22,481 - evaluate - INFO - 
--- Лучшие и худшие примеры по метрикам ---
2025-05-12 05:11:22,481 - evaluate - INFO - 
rouge_l:
2025-05-12 05:11:22,481 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:11:22,481 - evaluate - INFO -     0.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:11:22,481 - evaluate - INFO -     0.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:11:22,481 - evaluate - INFO -     0.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:11:22,481 - evaluate - INFO -   Худшие 3:
2025-05-12 05:11:22,481 - evaluate - INFO -     0.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:11:22,481 - evaluate - INFO -     0.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:11:22,481 - evaluate - INFO -     0.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:11:22,481 - evaluate - INFO - 
bertscore:
2025-05-12 05:11:22,481 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:11:22,481 - evaluate - INFO -     0.6905 — Как можно проверить подлинность диплома в России?
2025-05-12 05:11:22,481 - evaluate - INFO -     0.6459 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:11:22,481 - evaluate - INFO -     0.6143 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:11:22,481 - evaluate - INFO -   Худшие 3:
2025-05-12 05:11:22,481 - evaluate - INFO -     0.6905 — Как можно проверить подлинность диплома в России?
2025-05-12 05:11:22,481 - evaluate - INFO -     0.6459 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:11:22,481 - evaluate - INFO -     0.6143 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:11:22,481 - evaluate - INFO - 
context_recall_manual:
2025-05-12 05:11:22,481 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:11:22,481 - evaluate - INFO -     1.5000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:11:22,481 - evaluate - INFO -     1.5000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:11:22,481 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:11:22,481 - evaluate - INFO -   Худшие 3:
2025-05-12 05:11:22,481 - evaluate - INFO -     1.5000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:11:22,481 - evaluate - INFO -     1.5000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:11:22,481 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:11:22,481 - evaluate - INFO - 
context_precision_manual:
2025-05-12 05:11:22,481 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:11:22,482 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:11:22,482 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:11:22,482 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:11:22,482 - evaluate - INFO -   Худшие 3:
2025-05-12 05:11:22,482 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:11:22,482 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:11:22,482 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:11:22,482 - evaluate - INFO - 
faithfulness_semantic:
2025-05-12 05:11:22,482 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:11:22,482 - evaluate - INFO -     0.9682 — Как можно проверить подлинность диплома в России?
2025-05-12 05:11:22,482 - evaluate - INFO -     0.9313 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:11:22,482 - evaluate - INFO -     0.9058 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:11:22,482 - evaluate - INFO -   Худшие 3:
2025-05-12 05:11:22,482 - evaluate - INFO -     0.9682 — Как можно проверить подлинность диплома в России?
2025-05-12 05:11:22,482 - evaluate - INFO -     0.9313 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:11:22,482 - evaluate - INFO -     0.9058 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:11:22,482 - evaluate - INFO - 
llm_relevance:
2025-05-12 05:11:22,482 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:11:22,482 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:11:22,482 - evaluate - INFO -     0.8000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:11:22,482 - evaluate - INFO -     0.7000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:11:22,482 - evaluate - INFO -   Худшие 3:
2025-05-12 05:11:22,482 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:11:22,482 - evaluate - INFO -     0.8000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:11:22,482 - evaluate - INFO -     0.7000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:11:22,482 - evaluate - INFO - 
llm_faithfulness:
2025-05-12 05:11:22,482 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:11:22,482 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:11:22,482 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:11:22,482 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:11:22,482 - evaluate - INFO -   Худшие 3:
2025-05-12 05:11:22,482 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:11:22,482 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:11:22,482 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:11:22,484 - ragas._analytics - DEBUG - AnalyticsBatcher shutdown complete
2025-05-12 05:11:37,374 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:11:37 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'17973'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'17978'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9992'), (b'x-ratelimit-remaining-tokens', b'198307'), (b'x-ratelimit-reset-requests', b'1m3.676s'), (b'x-ratelimit-reset-tokens', b'507ms'), (b'x-request-id', b'req_d00dd81a1e3d941050e009e16eb5013b'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b2b4cc346630-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:11:37,376 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:11:37,376 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:11:37,377 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:11:37,377 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:11:37,378 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:11:37,378 - httpcore.connection - DEBUG - close.started
2025-05-12 05:11:37,378 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:11:37,378 - httpcore.connection - DEBUG - close.started
2025-05-12 05:11:37,379 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:11:37,379 - httpcore.connection - DEBUG - close.started
2025-05-12 05:11:37,379 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:11:37,379 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:11:37 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '17973', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '17978', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9992', 'x-ratelimit-remaining-tokens': '198307', 'x-ratelimit-reset-requests': '1m3.676s', 'x-ratelimit-reset-tokens': '507ms', 'x-request-id': 'req_d00dd81a1e3d941050e009e16eb5013b', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5b2b4cc346630-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:11:37,379 - openai._base_client - DEBUG - request_id: req_d00dd81a1e3d941050e009e16eb5013b
2025-05-12 05:11:37,389 - ragas._analytics - DEBUG - Flushing triggered for 1 events
2025-05-12 05:11:37,389 - ragas._analytics - DEBUG - Grouped events: {('evaluation', ('faithfulness',), 'SINGLE_TURN'): EvaluationEvent(event_type='evaluation', user_id='a-c57b054261b446ec83e28aea108cead0', ragas_version='0.2.15', metrics=['faithfulness'], num_rows=1, evaluation_type='SINGLE_TURN', language='english')}
2025-05-12 05:11:37,391 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:11:37,840 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:11:37,844 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:11:38,276 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 402 78
2025-05-12 05:11:38,277 - evaluate.metrics - DEBUG - Результат RAGAS: {'answer_relevancy': 0.9712, 'faithfulness': 0.8462}
2025-05-12 05:11:38,277 - evaluate.metrics - DEBUG - Тип результата RAGAS: <class 'ragas.dataset_schema.EvaluationResult'>
2025-05-12 05:11:38,277 - evaluate.metrics - DEBUG - Ключи в результате RAGAS: нет ключей
2025-05-12 05:11:38,277 - evaluate.metrics - ERROR - Ошибка при извлечении значений из результата RAGAS: 0
2025-05-12 05:11:38,277 - evaluate.metrics - ERROR - Полный результат RAGAS: {'answer_relevancy': 0.9712, 'faithfulness': 0.8462}
2025-05-12 05:11:38,279 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'Ты - точный оценщик качества ответов. Отвечай только числом от 0 до 1.'}, {'role': 'user', 'content': '\n        Вопрос: Что проверяет налоговая при оценке надежности компании?\n        Ответ: Налоговая проверяет надежность компании путем требования разъяснений и документов от компании и её контрагентов, аудиторов. Они также приглашают на беседу сотрудников компании и её контрагентов, используют переводчика для документов на иностранном языке, а также экспертов для исследования свойств предметов (например, фармацевтов, профессоров, художников, учителей). Кроме того, они осматривают помещения и документы компании.\n\n        Насколько данный ответ релевантен вопросу, независимо от контекста? Ответь одним числом от 0 до 1.\n        '}], 'model': 'gpt-3.5-turbo', 'temperature': 0}, 'idempotency_key': 'stainless-python-retry-fa478e4f-b474-4aa7-b5ff-b3ac53ba128b'}
2025-05-12 05:11:38,280 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:11:38,280 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-05-12 05:11:38,283 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x3090c6790>
2025-05-12 05:11:38,283 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x30363d430> server_hostname='api.openai.com' timeout=5.0
2025-05-12 05:11:38,507 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x30907f3d0>
2025-05-12 05:11:38,507 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:11:38,507 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:11:38,507 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:11:38,507 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:11:38,508 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:11:39,138 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:11:39 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'363'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'366'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'199682'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'95ms'), (b'x-request-id', b'req_3eb3c69e98f27efd9bc0663218a53a9e'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=n9OWwytUsJYLcwRT6wCk57.CFR1CkcyLRg7NQ1hFj_c-1747008699-1.0.1.1-suJvLHtEVa8eWGeh6VUPFQF6zB60HFdKUfQ37VlXo_HGx_TJXHllybytZz3FHw94Ue3JiUzwGNOrSG.oZfnu4w45MKihQL0XrA_FAoQOHVs; path=/; expires=Mon, 12-May-25 00:41:39 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=fqP.WgoLSz4qR9Oj5d0KV50pNvO4PAXTegwIo1J2wZI-1747008699091-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b32ddb6dfe98-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:11:39,138 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:11:39,139 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:11:39,139 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:11:39,139 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:11:39,139 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:11:39,139 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:11:39 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '363'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '366'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '199682'), ('x-ratelimit-reset-requests', '8.64s'), ('x-ratelimit-reset-tokens', '95ms'), ('x-request-id', 'req_3eb3c69e98f27efd9bc0663218a53a9e'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=n9OWwytUsJYLcwRT6wCk57.CFR1CkcyLRg7NQ1hFj_c-1747008699-1.0.1.1-suJvLHtEVa8eWGeh6VUPFQF6zB60HFdKUfQ37VlXo_HGx_TJXHllybytZz3FHw94Ue3JiUzwGNOrSG.oZfnu4w45MKihQL0XrA_FAoQOHVs; path=/; expires=Mon, 12-May-25 00:41:39 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=fqP.WgoLSz4qR9Oj5d0KV50pNvO4PAXTegwIo1J2wZI-1747008699091-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5b32ddb6dfe98-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:11:39,139 - openai._base_client - DEBUG - request_id: req_3eb3c69e98f27efd9bc0663218a53a9e
2025-05-12 05:11:39,140 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'Ты - точный оценщик качества ответов. Отвечай только числом от 0 до 1.'}, {'role': 'user', 'content': '\n        Ответ: Налоговая проверяет надежность компании путем требования разъяснений и документов от компании и её контрагентов, аудиторов. Они также приглашают на беседу сотрудников компании и её контрагентов, используют переводчика для документов на иностранном языке, а также экспертов для исследования свойств предметов (например, фармацевтов, профессоров, художников, учителей). Кроме того, они осматривают помещения и документы компании.\n        Контекст: Вот что они делают для проверки:\n• Требуют разъяснения и документы у компании и её контрагентов, аудиторов. Про правила и порядок рассказывают статьи 93, 93.1, 93.2 НК РФ. • Приглашают на беседу в налоговую сотрудников компании и её контрагентов. • Привлекают переводчика, если документы на иностранном языке. • Привлекают экспертов, если нужно исследовать свойства предметов. Например, фармацевтов, профессоров, художников, учителей. Компания может давать своего эксперта. • Осматривают помещения и документы. • Чтобы избежать проблем в будущем, следите за полнотой, корректностью и актуальностью сведений в ЕГРЮЛ. Проверить данные можно скачав выписку на сайте налоговой. Если на этом этапе будут несоответствия по одному или нескольким пунктам, налоговики закончат оценку. В компанию придёт выписка с критериями, которым компания не соответствует. Материалы для бизнеса в телеграм-канале Справочной\nПолучайте ежедневные дайджесты новостей и разборы законов, читайте истории предпринимателей и узнавайте о господдержке для бизнеса\nЧто будут проверять дальше.\n\n        Насколько данный ответ соответствует только предоставленному контексту, без добавления лишней информации? Ответь одним числом от 0 до 1.\n        '}], 'model': 'gpt-3.5-turbo', 'temperature': 0}, 'idempotency_key': 'stainless-python-retry-3194f8c5-4b9c-42a7-932f-79f35f3d26fa'}
2025-05-12 05:11:39,141 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:11:39,141 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:11:39,141 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:11:39,142 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:11:39,142 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:11:39,142 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:11:39,728 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:11:39 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'296'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'300'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9998'), (b'x-ratelimit-remaining-tokens', b'199202'), (b'x-ratelimit-reset-requests', b'16.642s'), (b'x-ratelimit-reset-tokens', b'239ms'), (b'x-request-id', b'req_2e499680f512c3964e39572195de6949'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b331c860fe98-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:11:39,728 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:11:39,729 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:11:39,729 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:11:39,729 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:11:39,729 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:11:39,729 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:11:39 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '296', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '300', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9998', 'x-ratelimit-remaining-tokens': '199202', 'x-ratelimit-reset-requests': '16.642s', 'x-ratelimit-reset-tokens': '239ms', 'x-request-id': 'req_2e499680f512c3964e39572195de6949', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5b331c860fe98-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:11:39,730 - openai._base_client - DEBUG - request_id: req_2e499680f512c3964e39572195de6949
2025-05-12 05:11:39,731 - evaluate - INFO - Оценка вопроса: Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:11:39,733 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:8000
2025-05-12 05:11:40,018 - urllib3.connectionpool - DEBUG - http://localhost:8000 "POST /token HTTP/1.1" 200 173
2025-05-12 05:11:40,019 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:8000
2025-05-12 05:12:00,627 - urllib3.connectionpool - DEBUG - http://localhost:8000 "POST /ask HTTP/1.1" 200 6161
2025-05-12 05:12:00,632 - evaluate - INFO - Получен ответ от API для вопроса: Как проверить китайского поста...
2025-05-12 05:12:00,633 - evaluate.metrics - DEBUG - Начинаем вычисление ROUGE-L
2025-05-12 05:12:00,633 - absl - INFO - Using default tokenizer.
2025-05-12 05:12:00,633 - evaluate.metrics - DEBUG - ROUGE-L выполнен успешно, значение: 0.0
2025-05-12 05:12:00,634 - evaluate.metrics - DEBUG - Начинаем вычисление BERTScore
2025-05-12 05:12:00,972 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /bert-base-multilingual-cased/resolve/main/tokenizer_config.json HTTP/1.1" 200 0
2025-05-12 05:12:01,231 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /bert-base-multilingual-cased/resolve/main/config.json HTTP/1.1" 200 0
2025-05-12 05:12:03,663 - evaluate.metrics - DEBUG - BERTScore выполнен успешно, значение: 0.6143
2025-05-12 05:12:03,663 - evaluate.metrics - DEBUG - Начинаем вычисление перекрытия контекста
2025-05-12 05:12:03,747 - evaluate.metrics - DEBUG - Перекрытие контекста выполнено успешно. Recall: 1.0, Precision: 1.0
2025-05-12 05:12:03,747 - evaluate.metrics - DEBUG - Начинаем вычисление семантической достоверности (faithfulness)
2025-05-12 05:12:03,796 - evaluate.metrics - DEBUG - Семантическая достоверность выполнена успешно, значение: 0.9313
2025-05-12 05:12:03,796 - evaluate.metrics - INFO - Начинаем вычисление метрик RAGAS
2025-05-12 05:12:03,796 - evaluate.metrics - DEBUG - Подготовка данных для RAGAS
2025-05-12 05:12:03,796 - evaluate.metrics - DEBUG - Создание датасета из данных
2025-05-12 05:12:03,802 - evaluate.metrics - INFO - RAGAS data: {'question': ['Как проверить китайского поставщика перед заключением контракта?'], 'answer': ['Чтобы проверить надёжность китайского поставщика перед заключением контракта, следующие шаги рекомендованы. Сначала необходимо получить документы от поставщика, такие как свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара. Эти документы можно перевести на русский язык при помощи Google Translate, просто указав камеру на документ смартфоном. Если поставщик предоставил все необходимые документы, это может говорить о том, что он надёжный и в работе с ним не будет сюрпризов.\n\nДалее, важно подписать внешнеторговый контракт, который должен содержать все условия сделки, правила разрешения споров и форс-мажорные обстоятельства, которые могут негативно повлиять на исполнение обязательств. Контракт может быть адаптирован под себя по типовому варианту контракта. Обычно он состоит из двух частей на языке покупателя и продавца, чтобы не было разного толкования условий сделки.\n\nКроме того, для наладить общение с китайским поставщиком следует общаться на китайском языке, так как редко встречаются сотрудники фабрик, которые знают иностранные языки даже английский. Для детального обсуждения условий сделки и прописания всего подробно в контракте можно найти переводчика.'], 'contexts': [['Чтобы проверить китайского поставщика, дополнительно запросите:\n• свидетельство о регистрации поставщика в таможенной службе КНР;\n• лицензию КНР на экспорт товара. Лицензии и сертификаты можете перевести на русский через google объектив, наведя камеру смартфона на документ. Если поставщик предоставил все документы, значит, это надёжный поставщик и в работе с ним не будет сюрпризов.', '• Запросите банковские реквизиты и проверьте, чтобы счёт был открыт на компанию, а не на её директора. Подробнее о том, как проверить надёжность поставщика, читайте в статье Справочной. Как провести переговоры\nЧтобы наладить общение с китайским поставщиком, придерживайтесь таких правил:\n• Общайтесь на китайском. На фабриках редко есть сотрудники, которые знают иностранные языки, даже английский. Наймите переводчика, чтобы вы смогли детально обсудить условия сделки и прописать всё подробно в контракте.', '• Запросите регистрационные документы компании и проверьте их данные на сайтах национальных ведомств. • Запросите сведения о товаре: сертификаты качества, технические документы, фото, видео, образцы. • Запросите банковские реквизиты и проверяйте, чтобы счёт был открыт в материковом Китае, а не в Гонконге или Макао. • Не работайте с поставщиком, если он не даёт документы, долго отвечает на вопросы, пишет с разных аккаунтов, предлагает перевести деньги на личный счёт.']], 'ground_truths': [['Проверить адрес, документы, сайт, WeChat, отзывы, запросить сертификаты и реквизиты.']]}
2025-05-12 05:12:03,802 - evaluate.metrics - DEBUG - Метрики RAGAS: [answer_relevancy, faithfulness]
2025-05-12 05:12:03,802 - evaluate.metrics - DEBUG - Запуск evaluate() с RAGAS метриками
2025-05-12 05:12:03,804 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:12:04,249 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:12:04,256 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:12:04,257 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:12:04,264 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:12:04,264 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:12:04,271 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:12:04,271 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:12:04,276 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:12:04,276 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:12:04,292 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Given a question and an answer, analyze the complexity of each sentence in the answer. Break down each sentence into one or more fully understandable statements. Ensure that no pronouns are used in any statement. Format the outputs in JSON.\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"statements": {"description": "The generated statements", "items": {"type": "string"}, "title": "Statements", "type": "array"}}, "required": ["statements"], "title": "StatementGeneratorOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "question": "Who was Albert Einstein and what is he best known for?",\n    "answer": "He was a German-born theoretical physicist, widely acknowledged to be one of the greatest and most influential physicists of all time. He was best known for developing the theory of relativity, he also made important contributions to the development of the theory of quantum mechanics."\n}\nOutput: {\n    "statements": [\n        "Albert Einstein was a German-born theoretical physicist.",\n        "Albert Einstein is recognized as one of the greatest and most influential physicists of all time.",\n        "Albert Einstein was best known for developing the theory of relativity.",\n        "Albert Einstein also made important contributions to the development of the theory of quantum mechanics."\n    ]\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "question": "Как проверить китайского поставщика перед заключением контракта?",\n    "answer": "Чтобы проверить надёжность китайского поставщика перед заключением контракта, следующие шаги рекомендованы. Сначала необходимо получить документы от поставщика, такие как свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара. Эти документы можно перевести на русский язык при помощи Google Translate, просто указав камеру на документ смартфоном. Если поставщик предоставил все необходимые документы, это может говорить о том, что он надёжный и в работе с ним не будет сюрпризов.\\n\\nДалее, важно подписать внешнеторговый контракт, который должен содержать все условия сделки, правила разрешения споров и форс-мажорные обстоятельства, которые могут негативно повлиять на исполнение обязательств. Контракт может быть адаптирован под себя по типовому варианту контракта. Обычно он состоит из двух частей на языке покупателя и продавца, чтобы не было разного толкования условий сделки.\\n\\nКроме того, для наладить общение с китайским поставщиком следует общаться на китайском языке, так как редко встречаются сотрудники фабрик, которые знают иностранные языки даже английский. Для детального обсуждения условий сделки и прописания всего подробно в контракте можно найти переводчика."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-e98645ad-7174-4edf-9f5a-5ab07db64977'}
2025-05-12 05:12:04,293 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:12:04,294 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:12:04,294 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Generate a question for the given answer and Identify if answer is noncommittal. Give noncommittal as 1 if the answer is noncommittal and 0 if the answer is committal. A noncommittal answer is one that is evasive, vague, or ambiguous. For example, "I don\'t know" or "I\'m not sure" are noncommittal answers\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"question": {"title": "Question", "type": "string"}, "noncommittal": {"title": "Noncommittal", "type": "integer"}}, "required": ["question", "noncommittal"], "title": "ResponseRelevanceOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "response": "Albert Einstein was born in Germany."\n}\nOutput: {\n    "question": "Where was Albert Einstein born?",\n    "noncommittal": 0\n}\n\nExample 2\nInput: {\n    "response": "I don\'t know about the  groundbreaking feature of the smartphone invented in 2023 as am unaware of information beyond 2022. "\n}\nOutput: {\n    "question": "What was the groundbreaking feature of the smartphone invented in 2023?",\n    "noncommittal": 1\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "response": "Чтобы проверить надёжность китайского поставщика перед заключением контракта, следующие шаги рекомендованы. Сначала необходимо получить документы от поставщика, такие как свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара. Эти документы можно перевести на русский язык при помощи Google Translate, просто указав камеру на документ смартфоном. Если поставщик предоставил все необходимые документы, это может говорить о том, что он надёжный и в работе с ним не будет сюрпризов.\\n\\nДалее, важно подписать внешнеторговый контракт, который должен содержать все условия сделки, правила разрешения споров и форс-мажорные обстоятельства, которые могут негативно повлиять на исполнение обязательств. Контракт может быть адаптирован под себя по типовому варианту контракта. Обычно он состоит из двух частей на языке покупателя и продавца, чтобы не было разного толкования условий сделки.\\n\\nКроме того, для наладить общение с китайским поставщиком следует общаться на китайском языке, так как редко встречаются сотрудники фабрик, которые знают иностранные языки даже английский. Для детального обсуждения условий сделки и прописания всего подробно в контракте можно найти переводчика."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-541f5602-4c38-4b8d-8153-92854fe57c70'}
2025-05-12 05:12:04,294 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:12:04,295 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Generate a question for the given answer and Identify if answer is noncommittal. Give noncommittal as 1 if the answer is noncommittal and 0 if the answer is committal. A noncommittal answer is one that is evasive, vague, or ambiguous. For example, "I don\'t know" or "I\'m not sure" are noncommittal answers\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"question": {"title": "Question", "type": "string"}, "noncommittal": {"title": "Noncommittal", "type": "integer"}}, "required": ["question", "noncommittal"], "title": "ResponseRelevanceOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "response": "Albert Einstein was born in Germany."\n}\nOutput: {\n    "question": "Where was Albert Einstein born?",\n    "noncommittal": 0\n}\n\nExample 2\nInput: {\n    "response": "I don\'t know about the  groundbreaking feature of the smartphone invented in 2023 as am unaware of information beyond 2022. "\n}\nOutput: {\n    "question": "What was the groundbreaking feature of the smartphone invented in 2023?",\n    "noncommittal": 1\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "response": "Чтобы проверить надёжность китайского поставщика перед заключением контракта, следующие шаги рекомендованы. Сначала необходимо получить документы от поставщика, такие как свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара. Эти документы можно перевести на русский язык при помощи Google Translate, просто указав камеру на документ смартфоном. Если поставщик предоставил все необходимые документы, это может говорить о том, что он надёжный и в работе с ним не будет сюрпризов.\\n\\nДалее, важно подписать внешнеторговый контракт, который должен содержать все условия сделки, правила разрешения споров и форс-мажорные обстоятельства, которые могут негативно повлиять на исполнение обязательств. Контракт может быть адаптирован под себя по типовому варианту контракта. Обычно он состоит из двух частей на языке покупателя и продавца, чтобы не было разного толкования условий сделки.\\n\\nКроме того, для наладить общение с китайским поставщиком следует общаться на китайском языке, так как редко встречаются сотрудники фабрик, которые знают иностранные языки даже английский. Для детального обсуждения условий сделки и прописания всего подробно в контракте можно найти переводчика."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-a0d35ed5-8bbd-488f-8eef-16493ea38f2c'}
2025-05-12 05:12:04,295 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:12:04,295 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Generate a question for the given answer and Identify if answer is noncommittal. Give noncommittal as 1 if the answer is noncommittal and 0 if the answer is committal. A noncommittal answer is one that is evasive, vague, or ambiguous. For example, "I don\'t know" or "I\'m not sure" are noncommittal answers\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"question": {"title": "Question", "type": "string"}, "noncommittal": {"title": "Noncommittal", "type": "integer"}}, "required": ["question", "noncommittal"], "title": "ResponseRelevanceOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "response": "Albert Einstein was born in Germany."\n}\nOutput: {\n    "question": "Where was Albert Einstein born?",\n    "noncommittal": 0\n}\n\nExample 2\nInput: {\n    "response": "I don\'t know about the  groundbreaking feature of the smartphone invented in 2023 as am unaware of information beyond 2022. "\n}\nOutput: {\n    "question": "What was the groundbreaking feature of the smartphone invented in 2023?",\n    "noncommittal": 1\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "response": "Чтобы проверить надёжность китайского поставщика перед заключением контракта, следующие шаги рекомендованы. Сначала необходимо получить документы от поставщика, такие как свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара. Эти документы можно перевести на русский язык при помощи Google Translate, просто указав камеру на документ смартфоном. Если поставщик предоставил все необходимые документы, это может говорить о том, что он надёжный и в работе с ним не будет сюрпризов.\\n\\nДалее, важно подписать внешнеторговый контракт, который должен содержать все условия сделки, правила разрешения споров и форс-мажорные обстоятельства, которые могут негативно повлиять на исполнение обязательств. Контракт может быть адаптирован под себя по типовому варианту контракта. Обычно он состоит из двух частей на языке покупателя и продавца, чтобы не было разного толкования условий сделки.\\n\\nКроме того, для наладить общение с китайским поставщиком следует общаться на китайском языке, так как редко встречаются сотрудники фабрик, которые знают иностранные языки даже английский. Для детального обсуждения условий сделки и прописания всего подробно в контракте можно найти переводчика."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-25495d02-cbfb-485a-b566-6b4601a16cfb'}
2025-05-12 05:12:04,296 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:12:04,296 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:12:04,296 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:12:04,296 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:12:04,298 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x3194fa040>
2025-05-12 05:12:04,298 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x309054900> server_hostname='api.openai.com' timeout=None
2025-05-12 05:12:04,300 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x309449250>
2025-05-12 05:12:04,300 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x309054900> server_hostname='api.openai.com' timeout=None
2025-05-12 05:12:04,301 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x16f4f2520>
2025-05-12 05:12:04,301 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x309054900> server_hostname='api.openai.com' timeout=None
2025-05-12 05:12:04,301 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x16f4f2940>
2025-05-12 05:12:04,301 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x309054900> server_hostname='api.openai.com' timeout=None
2025-05-12 05:12:04,516 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x3194fafd0>
2025-05-12 05:12:04,517 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:12:04,517 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:12:04,517 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:12:04,518 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:12:04,518 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:12:04,526 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x16f4f78e0>
2025-05-12 05:12:04,526 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:12:04,526 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:12:04,526 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:12:04,527 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:12:04,527 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:12:04,527 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x3094494c0>
2025-05-12 05:12:04,527 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:12:04,527 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:12:04,527 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:12:04,528 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:12:04,528 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:12:04,530 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x16f4f7f40>
2025-05-12 05:12:04,530 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:12:04,531 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:12:04,531 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:12:04,531 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:12:04,531 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:12:05,739 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:12:05 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'936'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'940'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9996'), (b'x-ratelimit-remaining-tokens', b'199112'), (b'x-ratelimit-reset-requests', b'26.93s'), (b'x-ratelimit-reset-tokens', b'266ms'), (b'x-request-id', b'req_9580302bcebfac1f07478ab407a46a06'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=wMSbs_dBOY.pKPcyMwxZNCKH7V1afGyouvHNkcYwEBY-1747008725-1.0.1.1-fbaxnZ0PBt2gglcG0QBeNfuAr2lz08_GCcNFSEzTNhDrRTDbTBZLmwtqkapykH5DRqutB80OtYIwPzz8fAat46MlkSqnM0HvrM_ZPkas6Kk; path=/; expires=Mon, 12-May-25 00:42:05 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=rk5oncqRI7dz1MIEPlk.pJC.vWxcfvacu7nVvt1x7qE-1747008725674-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b3d06f8e96ec-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:12:05,741 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:12:05,742 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:12:05,743 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:12:05,743 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:12:05,743 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:12:05,743 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:12:05 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '936'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '940'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9996'), ('x-ratelimit-remaining-tokens', '199112'), ('x-ratelimit-reset-requests', '26.93s'), ('x-ratelimit-reset-tokens', '266ms'), ('x-request-id', 'req_9580302bcebfac1f07478ab407a46a06'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=wMSbs_dBOY.pKPcyMwxZNCKH7V1afGyouvHNkcYwEBY-1747008725-1.0.1.1-fbaxnZ0PBt2gglcG0QBeNfuAr2lz08_GCcNFSEzTNhDrRTDbTBZLmwtqkapykH5DRqutB80OtYIwPzz8fAat46MlkSqnM0HvrM_ZPkas6Kk; path=/; expires=Mon, 12-May-25 00:42:05 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=rk5oncqRI7dz1MIEPlk.pJC.vWxcfvacu7nVvt1x7qE-1747008725674-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5b3d06f8e96ec-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:12:05,743 - openai._base_client - DEBUG - request_id: req_9580302bcebfac1f07478ab407a46a06
2025-05-12 05:12:05,746 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:12:05 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'943'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'947'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9993'), (b'x-ratelimit-remaining-tokens', b'196383'), (b'x-ratelimit-reset-requests', b'52.838s'), (b'x-ratelimit-reset-tokens', b'1.084s'), (b'x-request-id', b'req_8ce4e269d1f4f40b3f8a3a178670f891'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=z_vUQx4ZN3Bi5ZgGGY0mOgdeS5jVkyX1D3CZVEBjK5Q-1747008725-1.0.1.1-uIpF04.jIigkVenyHOo7IcEqxU3g613cNqVc0Jk1BHwDU8LmgZZ7lWH7eVJXmrLcOXTmF_ZUvTvwLGI0hIiJXzWsVZeUBjp.JP837fgTPC4; path=/; expires=Mon, 12-May-25 00:42:05 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=m6XpwuZzAZK257RCC0eTaFwIiNnT5AExw_pPCzTsOTE-1747008725697-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b3d07a167875-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:12:05,747 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:12:05,747 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:12:05,748 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:12:05,749 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:12:05,749 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:12:05,749 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:12:05 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '943'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '947'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9993'), ('x-ratelimit-remaining-tokens', '196383'), ('x-ratelimit-reset-requests', '52.838s'), ('x-ratelimit-reset-tokens', '1.084s'), ('x-request-id', 'req_8ce4e269d1f4f40b3f8a3a178670f891'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=z_vUQx4ZN3Bi5ZgGGY0mOgdeS5jVkyX1D3CZVEBjK5Q-1747008725-1.0.1.1-uIpF04.jIigkVenyHOo7IcEqxU3g613cNqVc0Jk1BHwDU8LmgZZ7lWH7eVJXmrLcOXTmF_ZUvTvwLGI0hIiJXzWsVZeUBjp.JP837fgTPC4; path=/; expires=Mon, 12-May-25 00:42:05 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=m6XpwuZzAZK257RCC0eTaFwIiNnT5AExw_pPCzTsOTE-1747008725697-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5b3d07a167875-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:12:05,749 - openai._base_client - DEBUG - request_id: req_8ce4e269d1f4f40b3f8a3a178670f891
2025-05-12 05:12:05,757 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:12:05 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'966'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'971'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9994'), (b'x-ratelimit-remaining-tokens', b'197245'), (b'x-ratelimit-reset-requests', b'44.206s'), (b'x-ratelimit-reset-tokens', b'826ms'), (b'x-request-id', b'req_56d15138bf2c28fe008023242e9a94a8'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=_4eH8Zk8ABeYQu6cSMuogHs5hbxmj_GusVQFdTLcVo0-1747008725-1.0.1.1-ATSbWfBfSAk6PWHCjLZ4qUh2f5iqCPCHjQNPj6Q.eGGBFesmn77n2sZ5o25ImDCxVaTSipMDwz7YaDx.kVZ8r6IJf95Bm92mqTg61GbHIHE; path=/; expires=Mon, 12-May-25 00:42:05 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=XEGXrMxybrOc9xH_sGY15SoiA8wRYzCtyLVcFi1n9Qw-1747008725710-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b3d07eea1de3-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:12:05,758 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:12:05,758 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:12:05,759 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:12:05,759 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:12:05,759 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:12:05,759 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:12:05 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '966'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '971'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9994'), ('x-ratelimit-remaining-tokens', '197245'), ('x-ratelimit-reset-requests', '44.206s'), ('x-ratelimit-reset-tokens', '826ms'), ('x-request-id', 'req_56d15138bf2c28fe008023242e9a94a8'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=_4eH8Zk8ABeYQu6cSMuogHs5hbxmj_GusVQFdTLcVo0-1747008725-1.0.1.1-ATSbWfBfSAk6PWHCjLZ4qUh2f5iqCPCHjQNPj6Q.eGGBFesmn77n2sZ5o25ImDCxVaTSipMDwz7YaDx.kVZ8r6IJf95Bm92mqTg61GbHIHE; path=/; expires=Mon, 12-May-25 00:42:05 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=XEGXrMxybrOc9xH_sGY15SoiA8wRYzCtyLVcFi1n9Qw-1747008725710-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5b3d07eea1de3-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:12:05,759 - openai._base_client - DEBUG - request_id: req_56d15138bf2c28fe008023242e9a94a8
2025-05-12 05:12:05,762 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'post_parser': <function Embeddings.create.<locals>.parser at 0x3090ab040>, 'json_data': {'input': [[27435, 16248, 69556, 18264, 7820, 9542, 19039, 66144, 22885, 18154, 68374, 14476, 75281, 78757, 59313, 40571, 9882, 10298, 78085, 11001, 118, 44613, 30]], 'model': 'text-embedding-ada-002', 'encoding_format': 'base64'}, 'idempotency_key': 'stainless-python-retry-d0b86cbc-3b37-4528-bfe1-80a35e6814b5'}
2025-05-12 05:12:05,763 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/embeddings
2025-05-12 05:12:05,763 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:12:05,765 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16f4f0b20>
2025-05-12 05:12:05,765 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x309054890> server_hostname='api.openai.com' timeout=None
2025-05-12 05:12:05,990 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16f4f0af0>
2025-05-12 05:12:05,990 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:12:05,990 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:12:05,990 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:12:05,990 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:12:05,990 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:12:06,353 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:12:06 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-model', b'text-embedding-ada-002-v2'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'123'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'via', b'envoy-router-66d9d5f44f-5ps8h'), (b'x-envoy-upstream-service-time', b'126'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'1000000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'999977'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'1ms'), (b'x-request-id', b'req_97fcc1d9a1ab02ac9598bdf07e00d3ac'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=Rq8cmTQbWfs9d4y.lgeOOL4nd5MBenKIBkyCRClL4BM-1747008726-1.0.1.1-vx7Ev7EQLfsE0qtV2l8He.62kRjYPoxBWkOY.O4L6E8jKwXiiRQo24eEXH1sP_imgFXJnISONp6HWUbSTuQuaqa3.awWvgyJVLUZRz3ix0s; path=/; expires=Mon, 12-May-25 00:42:06 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=_JI5gCUuwMeEdUrM05d8rKP36hXwONtGA5rYt0GocKY-1747008726284-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b3d99c2bb1fb-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:12:06,354 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 05:12:06,355 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:12:06,356 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:12:06,356 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:12:06,356 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:12:06,356 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/embeddings "200 OK" Headers([('date', 'Mon, 12 May 2025 00:12:06 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-allow-origin', '*'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-model', 'text-embedding-ada-002-v2'), ('openai-organization', 'tochka'), ('openai-processing-ms', '123'), ('openai-version', '2020-10-01'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('via', 'envoy-router-66d9d5f44f-5ps8h'), ('x-envoy-upstream-service-time', '126'), ('x-ratelimit-limit-requests', '3000'), ('x-ratelimit-limit-tokens', '1000000'), ('x-ratelimit-remaining-requests', '2999'), ('x-ratelimit-remaining-tokens', '999977'), ('x-ratelimit-reset-requests', '20ms'), ('x-ratelimit-reset-tokens', '1ms'), ('x-request-id', 'req_97fcc1d9a1ab02ac9598bdf07e00d3ac'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=Rq8cmTQbWfs9d4y.lgeOOL4nd5MBenKIBkyCRClL4BM-1747008726-1.0.1.1-vx7Ev7EQLfsE0qtV2l8He.62kRjYPoxBWkOY.O4L6E8jKwXiiRQo24eEXH1sP_imgFXJnISONp6HWUbSTuQuaqa3.awWvgyJVLUZRz3ix0s; path=/; expires=Mon, 12-May-25 00:42:06 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=_JI5gCUuwMeEdUrM05d8rKP36hXwONtGA5rYt0GocKY-1747008726284-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5b3d99c2bb1fb-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:12:06,357 - openai._base_client - DEBUG - request_id: req_97fcc1d9a1ab02ac9598bdf07e00d3ac
2025-05-12 05:12:06,359 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'post_parser': <function Embeddings.create.<locals>.parser at 0x3090ab040>, 'json_data': {'input': [[27435, 16248, 50306, 55617, 34493, 1840, 77083, 13999, 57925, 8164, 2233, 19479, 94975, 20440, 69556, 17165, 6850, 23680, 45122, 17394, 68742, 7820, 9542, 19039, 66144, 22885, 18154, 68374, 14476, 75281, 78757, 59313, 40571, 9882, 10298, 78085, 11001, 118, 44613, 30], [27435, 16248, 50306, 55617, 34493, 1840, 77083, 13999, 57925, 8164, 2233, 19479, 94975, 20440, 69556, 17165, 6850, 23680, 45122, 17394, 68742, 7820, 9542, 19039, 66144, 22885, 18154, 68374, 14476, 75281, 78757, 59313, 40571, 9882, 10298, 78085, 11001, 118, 44613, 30], [27435, 16248, 50306, 55617, 34493, 1840, 77083, 13999, 57925, 8164, 2233, 19479, 94975, 20440, 69556, 17165, 6850, 23680, 45122, 17394, 68742, 7820, 9542, 19039, 66144, 22885, 18154, 68374, 14476, 75281, 78757, 59313, 40571, 9882, 10298, 78085, 11001, 118, 44613, 30]], 'model': 'text-embedding-ada-002', 'encoding_format': 'base64'}, 'idempotency_key': 'stainless-python-retry-a2e71a30-5790-4473-9ccd-c7a87a4beed9'}
2025-05-12 05:12:06,360 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/embeddings
2025-05-12 05:12:06,360 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:12:06,361 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:12:06,361 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:12:06,361 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:12:06,361 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:12:06,659 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:12:06 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-model', b'text-embedding-ada-002-v2'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'51'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'via', b'envoy-router-86bf4c9679-jltx2'), (b'x-envoy-upstream-service-time', b'53'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'1000000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'999880'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'7ms'), (b'x-request-id', b'req_f39d53f2e8c11839010c34bb5e93c00f'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b3dbeeb5b1fb-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:12:06,660 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 05:12:06,660 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:12:06,728 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:12:06,728 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:12:06,728 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:12:06,728 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/embeddings "200 OK" Headers({'date': 'Mon, 12 May 2025 00:12:06 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Request-ID', 'openai-model': 'text-embedding-ada-002-v2', 'openai-organization': 'tochka', 'openai-processing-ms': '51', 'openai-version': '2020-10-01', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'via': 'envoy-router-86bf4c9679-jltx2', 'x-envoy-upstream-service-time': '53', 'x-ratelimit-limit-requests': '3000', 'x-ratelimit-limit-tokens': '1000000', 'x-ratelimit-remaining-requests': '2999', 'x-ratelimit-remaining-tokens': '999880', 'x-ratelimit-reset-requests': '20ms', 'x-ratelimit-reset-tokens': '7ms', 'x-request-id': 'req_f39d53f2e8c11839010c34bb5e93c00f', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5b3dbeeb5b1fb-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:12:06,728 - openai._base_client - DEBUG - request_id: req_f39d53f2e8c11839010c34bb5e93c00f
2025-05-12 05:12:07,361 - ragas._analytics - DEBUG - Flushing triggered for 1 events
2025-05-12 05:12:07,366 - ragas._analytics - DEBUG - Grouped events: {('evaluation', ('answer_relevancy',), 'SINGLE_TURN'): EvaluationEvent(event_type='evaluation', user_id='a-c57b054261b446ec83e28aea108cead0', ragas_version='0.2.15', metrics=['answer_relevancy'], num_rows=1, evaluation_type='SINGLE_TURN', language='english')}
2025-05-12 05:12:07,369 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:12:07,800 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:12:11,493 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:12:11 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'6702'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'6706'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9995'), (b'x-ratelimit-remaining-tokens', b'198125'), (b'x-ratelimit-reset-requests', b'35.568s'), (b'x-ratelimit-reset-tokens', b'562ms'), (b'x-request-id', b'req_71d0bce83fce38d8b39c0791c799f279'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=64WVTZfprzrsUaHAcM8EAOWOwNM1X_1357IpJmy6CYQ-1747008731-1.0.1.1-7i_BIahB7QkaHfEP8ZG2wTeQkku7LpUYemrurf51iFglwB2ywhZkAWPYoroFWap_mQiQg0spvB66OsCQFXR84kQC6tEbwIi1.yfypO8WcBE; path=/; expires=Mon, 12-May-25 00:42:11 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=MEnXoKEXK9kFvPwfxuXBgiccZML5mVG9sCbB1D8KC90-1747008731445-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b3d07d6866ff-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:12:11,494 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:12:11,494 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:12:11,498 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:12:11,498 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:12:11,498 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:12:11,499 - httpcore.connection - DEBUG - close.started
2025-05-12 05:12:11,499 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:12:11,499 - httpcore.connection - DEBUG - close.started
2025-05-12 05:12:11,499 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:12:11,499 - httpcore.connection - DEBUG - close.started
2025-05-12 05:12:11,499 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:12:11,499 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:12:11 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '6702'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '6706'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9995'), ('x-ratelimit-remaining-tokens', '198125'), ('x-ratelimit-reset-requests', '35.568s'), ('x-ratelimit-reset-tokens', '562ms'), ('x-request-id', 'req_71d0bce83fce38d8b39c0791c799f279'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=64WVTZfprzrsUaHAcM8EAOWOwNM1X_1357IpJmy6CYQ-1747008731-1.0.1.1-7i_BIahB7QkaHfEP8ZG2wTeQkku7LpUYemrurf51iFglwB2ywhZkAWPYoroFWap_mQiQg0spvB66OsCQFXR84kQC6tEbwIi1.yfypO8WcBE; path=/; expires=Mon, 12-May-25 00:42:11 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=MEnXoKEXK9kFvPwfxuXBgiccZML5mVG9sCbB1D8KC90-1747008731445-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5b3d07d6866ff-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:12:11,499 - openai._base_client - DEBUG - request_id: req_71d0bce83fce38d8b39c0791c799f279
2025-05-12 05:12:11,502 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Your task is to judge the faithfulness of a series of statements based on a given context. For each statement you must return verdict as 1 if the statement can be directly inferred based on the context or 0 if the statement can not be directly inferred based on the context.\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"$defs": {"StatementFaithfulnessAnswer": {"properties": {"statement": {"description": "the original statement, word-by-word", "title": "Statement", "type": "string"}, "reason": {"description": "the reason of the verdict", "title": "Reason", "type": "string"}, "verdict": {"description": "the verdict(0/1) of the faithfulness.", "title": "Verdict", "type": "integer"}}, "required": ["statement", "reason", "verdict"], "title": "StatementFaithfulnessAnswer", "type": "object"}}, "properties": {"statements": {"items": {"$ref": "#/$defs/StatementFaithfulnessAnswer"}, "title": "Statements", "type": "array"}}, "required": ["statements"], "title": "NLIStatementOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "context": "John is a student at XYZ University. He is pursuing a degree in Computer Science. He is enrolled in several courses this semester, including Data Structures, Algorithms, and Database Management. John is a diligent student and spends a significant amount of time studying and completing assignments. He often stays late in the library to work on his projects.",\n    "statements": [\n        "John is majoring in Biology.",\n        "John is taking a course on Artificial Intelligence.",\n        "John is a dedicated student.",\n        "John has a part-time job."\n    ]\n}\nOutput: {\n    "statements": [\n        {\n            "statement": "John is majoring in Biology.",\n            "reason": "John\'s major is explicitly mentioned as Computer Science. There is no information suggesting he is majoring in Biology.",\n            "verdict": 0\n        },\n        {\n            "statement": "John is taking a course on Artificial Intelligence.",\n            "reason": "The context mentions the courses John is currently enrolled in, and Artificial Intelligence is not mentioned. Therefore, it cannot be deduced that John is taking a course on AI.",\n            "verdict": 0\n        },\n        {\n            "statement": "John is a dedicated student.",\n            "reason": "The context states that he spends a significant amount of time studying and completing assignments. Additionally, it mentions that he often stays late in the library to work on his projects, which implies dedication.",\n            "verdict": 1\n        },\n        {\n            "statement": "John has a part-time job.",\n            "reason": "There is no information given in the context about John having a part-time job.",\n            "verdict": 0\n        }\n    ]\n}\n\nExample 2\nInput: {\n    "context": "Photosynthesis is a process used by plants, algae, and certain bacteria to convert light energy into chemical energy.",\n    "statements": [\n        "Albert Einstein was a genius."\n    ]\n}\nOutput: {\n    "statements": [\n        {\n            "statement": "Albert Einstein was a genius.",\n            "reason": "The context and statement are unrelated",\n            "verdict": 0\n        }\n    ]\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "context": "Чтобы проверить китайского поставщика, дополнительно запросите:\\n• свидетельство о регистрации поставщика в таможенной службе КНР;\\n• лицензию КНР на экспорт товара. Лицензии и сертификаты можете перевести на русский через google объектив, наведя камеру смартфона на документ. Если поставщик предоставил все документы, значит, это надёжный поставщик и в работе с ним не будет сюрпризов.\\n• Запросите банковские реквизиты и проверьте, чтобы счёт был открыт на компанию, а не на её директора. Подробнее о том, как проверить надёжность поставщика, читайте в статье Справочной. Как провести переговоры\\nЧтобы наладить общение с китайским поставщиком, придерживайтесь таких правил:\\n• Общайтесь на китайском. На фабриках редко есть сотрудники, которые знают иностранные языки, даже английский. Наймите переводчика, чтобы вы смогли детально обсудить условия сделки и прописать всё подробно в контракте.\\n• Запросите регистрационные документы компании и проверьте их данные на сайтах национальных ведомств. • Запросите сведения о товаре: сертификаты качества, технические документы, фото, видео, образцы. • Запросите банковские реквизиты и проверяйте, чтобы счёт был открыт в материковом Китае, а не в Гонконге или Макао. • Не работайте с поставщиком, если он не даёт документы, долго отвечает на вопросы, пишет с разных аккаунтов, предлагает перевести деньги на личный счёт.",\n    "statements": [\n        "Для проверки надёжности китайского поставщика перед заключением контракта рекомендованы следующие шаги.",\n        "Необходимо получить документы от китайского поставщика.",\n        "Документы от китайского поставщика могут включать свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара.",\n        "Документы можно перевести на русский язык с помощью Google Translate.",\n        "Для перевода документов следует указать камеру на документ смартфоном.",\n        "Если китайский поставщик предоставил все необходимые документы, это может свидетельствовать о его надёжности.",\n        "Работа с надёжным поставщиком не будет сопровождаться сюрпризами.",\n        "Важно подписать внешнеторговый контракт.",\n        "Внешнеторговый контракт должен содержать все условия сделки.",\n        "Внешнеторговый контракт должен содержать правила разрешения споров.",\n        "Внешнеторговый контракт должен содержать форс-мажорные обстоятельства, которые могут негативно повлиять на исполнение обязательств.",\n        "Контракт может быть адаптирован под себя по типовому варианту контракта.",\n        "Обычно контракт состоит из двух частей на языке покупателя и продавца.",\n        "Две части контракта помогают избежать разного толкования условий сделки.",\n        "Для налаживания общения с китайским поставщиком следует общаться на китайском языке.",\n        "Сотрудники фабрик редко знают иностранные языки, включая английский.",\n        "Для детального обсуждения условий сделки можно найти переводчика.",\n        "Переводчик поможет прописать все подробно в контракте."\n    ]\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-763dff2a-a56b-4130-bc3f-9d184bba5907'}
2025-05-12 05:12:11,503 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:12:11,503 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:12:11,504 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:12:11,504 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:12:11,504 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:12:11,504 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:12:36,768 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:12:36 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'24927'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'24931'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9993'), (b'x-ratelimit-remaining-tokens', b'197790'), (b'x-ratelimit-reset-requests', b'54.502s'), (b'x-ratelimit-reset-tokens', b'663ms'), (b'x-request-id', b'req_106207611dfee655b601b4c80a38ef31'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b3fc1d4866ff-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:12:36,769 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:12:36,770 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:12:36,770 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:12:36,770 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:12:36,771 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:12:36,771 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:12:36 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '24927', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '24931', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9993', 'x-ratelimit-remaining-tokens': '197790', 'x-ratelimit-reset-requests': '54.502s', 'x-ratelimit-reset-tokens': '663ms', 'x-request-id': 'req_106207611dfee655b601b4c80a38ef31', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5b3fc1d4866ff-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:12:36,771 - openai._base_client - DEBUG - request_id: req_106207611dfee655b601b4c80a38ef31
2025-05-12 05:12:36,778 - ragas._analytics - DEBUG - Flushing triggered for 1 events
2025-05-12 05:12:36,778 - ragas._analytics - DEBUG - Grouped events: {('evaluation', ('faithfulness',), 'SINGLE_TURN'): EvaluationEvent(event_type='evaluation', user_id='a-c57b054261b446ec83e28aea108cead0', ragas_version='0.2.15', metrics=['faithfulness'], num_rows=1, evaluation_type='SINGLE_TURN', language='english')}
2025-05-12 05:12:36,780 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:12:36,886 - ragas._analytics - DEBUG - Flushing triggered for 1 events
2025-05-12 05:12:36,887 - ragas._analytics - DEBUG - Grouped events: {('evaluation', ('faithfulness',), 'SINGLE_TURN'): EvaluationEvent(event_type='evaluation', user_id='a-c57b054261b446ec83e28aea108cead0', ragas_version='0.2.15', metrics=['faithfulness'], num_rows=1, evaluation_type='SINGLE_TURN', language='english')}
2025-05-12 05:12:36,888 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:12:37,538 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:12:37,552 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:12:37,553 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:12:37,972 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:12:37,972 - evaluate.metrics - DEBUG - Результат RAGAS: {'answer_relevancy': 0.9604, 'faithfulness': 0.6111}
2025-05-12 05:12:37,972 - evaluate.metrics - DEBUG - Тип результата RAGAS: <class 'ragas.dataset_schema.EvaluationResult'>
2025-05-12 05:12:37,972 - evaluate.metrics - DEBUG - Ключи в результате RAGAS: нет ключей
2025-05-12 05:12:37,972 - evaluate.metrics - ERROR - Ошибка при извлечении значений из результата RAGAS: 0
2025-05-12 05:12:37,973 - evaluate.metrics - ERROR - Полный результат RAGAS: {'answer_relevancy': 0.9604, 'faithfulness': 0.6111}
2025-05-12 05:12:37,974 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'Ты - точный оценщик качества ответов. Отвечай только числом от 0 до 1.'}, {'role': 'user', 'content': '\n        Вопрос: Как проверить китайского поставщика перед заключением контракта?\n        Ответ: Чтобы проверить надёжность китайского поставщика перед заключением контракта, следующие шаги рекомендованы. Сначала необходимо получить документы от поставщика, такие как свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара. Эти документы можно перевести на русский язык при помощи Google Translate, просто указав камеру на документ смартфоном. Если поставщик предоставил все необходимые документы, это может говорить о том, что он надёжный и в работе с ним не будет сюрпризов.\n\nДалее, важно подписать внешнеторговый контракт, который должен содержать все условия сделки, правила разрешения споров и форс-мажорные обстоятельства, которые могут негативно повлиять на исполнение обязательств. Контракт может быть адаптирован под себя по типовому варианту контракта. Обычно он состоит из двух частей на языке покупателя и продавца, чтобы не было разного толкования условий сделки.\n\nКроме того, для наладить общение с китайским поставщиком следует общаться на китайском языке, так как редко встречаются сотрудники фабрик, которые знают иностранные языки даже английский. Для детального обсуждения условий сделки и прописания всего подробно в контракте можно найти переводчика.\n\n        Насколько данный ответ релевантен вопросу, независимо от контекста? Ответь одним числом от 0 до 1.\n        '}], 'model': 'gpt-3.5-turbo', 'temperature': 0}, 'idempotency_key': 'stainless-python-retry-8fc701e1-7272-4f95-bbb5-cbc7b33b471b'}
2025-05-12 05:12:37,975 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:12:37,976 - httpcore.connection - DEBUG - close.started
2025-05-12 05:12:37,976 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:12:37,976 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-05-12 05:12:38,052 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x30a2b8040>
2025-05-12 05:12:38,052 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x30363d430> server_hostname='api.openai.com' timeout=5.0
2025-05-12 05:12:38,280 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16f4f4a30>
2025-05-12 05:12:38,280 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:12:38,280 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:12:38,280 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:12:38,281 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:12:38,281 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:12:38,915 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:12:38 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'306'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'310'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'199326'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'202ms'), (b'x-request-id', b'req_a73431e6ffdd9417c3b7e37a1eae5ffd'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b4a369bfd949-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:12:38,916 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:12:38,916 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:12:38,916 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:12:38,916 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:12:38,917 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:12:38,917 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:12:38 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '306', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '310', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '199326', 'x-ratelimit-reset-requests': '8.64s', 'x-ratelimit-reset-tokens': '202ms', 'x-request-id': 'req_a73431e6ffdd9417c3b7e37a1eae5ffd', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5b4a369bfd949-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:12:38,917 - openai._base_client - DEBUG - request_id: req_a73431e6ffdd9417c3b7e37a1eae5ffd
2025-05-12 05:12:38,918 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'Ты - точный оценщик качества ответов. Отвечай только числом от 0 до 1.'}, {'role': 'user', 'content': '\n        Ответ: Чтобы проверить надёжность китайского поставщика перед заключением контракта, следующие шаги рекомендованы. Сначала необходимо получить документы от поставщика, такие как свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара. Эти документы можно перевести на русский язык при помощи Google Translate, просто указав камеру на документ смартфоном. Если поставщик предоставил все необходимые документы, это может говорить о том, что он надёжный и в работе с ним не будет сюрпризов.\n\nДалее, важно подписать внешнеторговый контракт, который должен содержать все условия сделки, правила разрешения споров и форс-мажорные обстоятельства, которые могут негативно повлиять на исполнение обязательств. Контракт может быть адаптирован под себя по типовому варианту контракта. Обычно он состоит из двух частей на языке покупателя и продавца, чтобы не было разного толкования условий сделки.\n\nКроме того, для наладить общение с китайским поставщиком следует общаться на китайском языке, так как редко встречаются сотрудники фабрик, которые знают иностранные языки даже английский. Для детального обсуждения условий сделки и прописания всего подробно в контракте можно найти переводчика.\n        Контекст: Чтобы проверить китайского поставщика, дополнительно запросите:\n• свидетельство о регистрации поставщика в таможенной службе КНР;\n• лицензию КНР на экспорт товара. Лицензии и сертификаты можете перевести на русский через google объектив, наведя камеру смартфона на документ. Если поставщик предоставил все документы, значит, это надёжный поставщик и в работе с ним не будет сюрпризов. • Запросите банковские реквизиты и проверьте, чтобы счёт был открыт на компанию, а не на её директора. Подробнее о том, как проверить надёжность поставщика, читайте в статье Справочной. Как провести переговоры\nЧтобы наладить общение с китайским поставщиком, придерживайтесь таких правил:\n• Общайтесь на китайском. На фабриках редко есть сотрудники, которые знают иностранные языки, даже английский. Наймите переводчика, чтобы вы смогли детально обсудить условия сделки и прописать всё подробно в контракте. • Запросите регистрационные документы компании и проверьте их данные на сайтах национальных ведомств. • Запросите сведения о товаре: сертификаты качества, технические документы, фото, видео, образцы. • Запросите банковские реквизиты и проверяйте, чтобы счёт был открыт в материковом Китае, а не в Гонконге или Макао. • Не работайте с поставщиком, если он не даёт документы, долго отвечает на вопросы, пишет с разных аккаунтов, предлагает перевести деньги на личный счёт.\n\n        Насколько данный ответ соответствует только предоставленному контексту, без добавления лишней информации? Ответь одним числом от 0 до 1.\n        '}], 'model': 'gpt-3.5-turbo', 'temperature': 0}, 'idempotency_key': 'stainless-python-retry-b1d53a25-e345-4bd6-9570-472dc1badde2'}
2025-05-12 05:12:38,919 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:12:38,919 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:12:38,919 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:12:38,919 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:12:38,919 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:12:38,919 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:12:39,414 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:12:39 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'224'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'228'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9998'), (b'x-ratelimit-remaining-tokens', b'198712'), (b'x-ratelimit-reset-requests', b'16.635s'), (b'x-ratelimit-reset-tokens', b'386ms'), (b'x-request-id', b'req_b1ce32e5118212c348ed1aa101a8df2c'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b4a76d97d949-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:12:39,415 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:12:39,415 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:12:39,417 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:12:39,417 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:12:39,417 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:12:39,417 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:12:39 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '224', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '228', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9998', 'x-ratelimit-remaining-tokens': '198712', 'x-ratelimit-reset-requests': '16.635s', 'x-ratelimit-reset-tokens': '386ms', 'x-request-id': 'req_b1ce32e5118212c348ed1aa101a8df2c', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5b4a76d97d949-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:12:39,418 - openai._base_client - DEBUG - request_id: req_b1ce32e5118212c348ed1aa101a8df2c
2025-05-12 05:12:39,419 - evaluate - INFO - Оценка вопроса: Как можно проверить подлинность диплома в России?
2025-05-12 05:12:39,422 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:8000
2025-05-12 05:12:39,712 - urllib3.connectionpool - DEBUG - http://localhost:8000 "POST /token HTTP/1.1" 200 173
2025-05-12 05:12:39,713 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:8000
2025-05-12 05:12:52,372 - urllib3.connectionpool - DEBUG - http://localhost:8000 "POST /ask HTTP/1.1" 200 4505
2025-05-12 05:12:52,382 - evaluate - INFO - Получен ответ от API для вопроса: Как можно проверить подлинност...
2025-05-12 05:12:52,383 - evaluate.metrics - DEBUG - Начинаем вычисление ROUGE-L
2025-05-12 05:12:52,383 - absl - INFO - Using default tokenizer.
2025-05-12 05:12:52,384 - evaluate.metrics - DEBUG - ROUGE-L выполнен успешно, значение: 0
2025-05-12 05:12:52,384 - evaluate.metrics - DEBUG - Начинаем вычисление BERTScore
2025-05-12 05:12:52,553 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /bert-base-multilingual-cased/resolve/main/tokenizer_config.json HTTP/1.1" 200 0
2025-05-12 05:12:52,612 - httpcore.connection - DEBUG - close.started
2025-05-12 05:12:52,612 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:12:52,824 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /bert-base-multilingual-cased/resolve/main/config.json HTTP/1.1" 200 0
2025-05-12 05:12:54,402 - httpcore.connection - DEBUG - close.started
2025-05-12 05:12:54,403 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:12:55,504 - evaluate.metrics - DEBUG - BERTScore выполнен успешно, значение: 0.6905
2025-05-12 05:12:55,504 - evaluate.metrics - DEBUG - Начинаем вычисление перекрытия контекста
2025-05-12 05:12:55,597 - evaluate.metrics - DEBUG - Перекрытие контекста выполнено успешно. Recall: 1.5, Precision: 1.0
2025-05-12 05:12:55,597 - evaluate.metrics - DEBUG - Начинаем вычисление семантической достоверности (faithfulness)
2025-05-12 05:12:55,641 - evaluate.metrics - DEBUG - Семантическая достоверность выполнена успешно, значение: 0.9682
2025-05-12 05:12:55,641 - evaluate.metrics - INFO - Начинаем вычисление метрик RAGAS
2025-05-12 05:12:55,641 - evaluate.metrics - DEBUG - Подготовка данных для RAGAS
2025-05-12 05:12:55,641 - evaluate.metrics - DEBUG - Создание датасета из данных
2025-05-12 05:12:55,656 - evaluate.metrics - INFO - RAGAS data: {'question': ['Как можно проверить подлинность диплома в России?'], 'answer': ['В России можно проверить подлинность диплома в Федеральном реестре сведений документов об образовании (ФРДО). Этот реестр содержит данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатам о владении русским языком и дополнительном профессиональном образовании. Однако не все сведения в ФРДО еще полностью внесены, поэтому возможно, что у вас не найдётся нужная информация. В случае отсутствия данных можно направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа составляет 30 дней. Кроме того, некоторые учебные заведения имеют собственные сервисы проверки подлинности документов, например, в ВШЭ или СПбГУ.'], 'contexts': [['Где проверить подлинность диплома\nВ России есть Федеральный реестр сведений документов об образовании (ФРДО), где любой желающий может бесплатно проверить подлинность документа. В базе есть данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатах о владении русским языком и дополнительном профессиональном образовании.', 'Коротко\n• Быстрее всего проверить подлинность диплома можно в реестре ФРДО. Заполняете данные и сразу узнаёте, есть ли у сотрудника заявленное образование. • Данные в ФРДО внесены ещё не полностью и, возможно, вы не найдёте нужную информацию, однако это не опровергает факт выдачи документа. • Самые верные способы проверки — направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа 30 дней. • В некоторых учебных заведениях есть собственные сервисы проверки, например, в ВШЭ или СПбГУ.', 'Запросите копии паспорта, свидетельства о регистрации (ОГРНИП), ИНН, а также лицензию, если она обязательна для ведения его деятельности.']], 'ground_truths': [['Через ФРДО, запрос в Рособрнадзор или вуз.']]}
2025-05-12 05:12:55,657 - evaluate.metrics - DEBUG - Метрики RAGAS: [answer_relevancy, faithfulness]
2025-05-12 05:12:55,657 - evaluate.metrics - DEBUG - Запуск evaluate() с RAGAS метриками
2025-05-12 05:12:55,659 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:12:56,085 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:12:56,093 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:12:56,093 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:12:56,099 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:12:56,099 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:12:56,104 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:12:56,104 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:12:56,108 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:12:56,108 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:12:56,121 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Given a question and an answer, analyze the complexity of each sentence in the answer. Break down each sentence into one or more fully understandable statements. Ensure that no pronouns are used in any statement. Format the outputs in JSON.\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"statements": {"description": "The generated statements", "items": {"type": "string"}, "title": "Statements", "type": "array"}}, "required": ["statements"], "title": "StatementGeneratorOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "question": "Who was Albert Einstein and what is he best known for?",\n    "answer": "He was a German-born theoretical physicist, widely acknowledged to be one of the greatest and most influential physicists of all time. He was best known for developing the theory of relativity, he also made important contributions to the development of the theory of quantum mechanics."\n}\nOutput: {\n    "statements": [\n        "Albert Einstein was a German-born theoretical physicist.",\n        "Albert Einstein is recognized as one of the greatest and most influential physicists of all time.",\n        "Albert Einstein was best known for developing the theory of relativity.",\n        "Albert Einstein also made important contributions to the development of the theory of quantum mechanics."\n    ]\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "question": "Как можно проверить подлинность диплома в России?",\n    "answer": "В России можно проверить подлинность диплома в Федеральном реестре сведений документов об образовании (ФРДО). Этот реестр содержит данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатам о владении русским языком и дополнительном профессиональном образовании. Однако не все сведения в ФРДО еще полностью внесены, поэтому возможно, что у вас не найдётся нужная информация. В случае отсутствия данных можно направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа составляет 30 дней. Кроме того, некоторые учебные заведения имеют собственные сервисы проверки подлинности документов, например, в ВШЭ или СПбГУ."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-24e6ad83-cb3d-4187-8be5-08b6988f7dd2'}
2025-05-12 05:12:56,122 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:12:56,122 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:12:56,122 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Generate a question for the given answer and Identify if answer is noncommittal. Give noncommittal as 1 if the answer is noncommittal and 0 if the answer is committal. A noncommittal answer is one that is evasive, vague, or ambiguous. For example, "I don\'t know" or "I\'m not sure" are noncommittal answers\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"question": {"title": "Question", "type": "string"}, "noncommittal": {"title": "Noncommittal", "type": "integer"}}, "required": ["question", "noncommittal"], "title": "ResponseRelevanceOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "response": "Albert Einstein was born in Germany."\n}\nOutput: {\n    "question": "Where was Albert Einstein born?",\n    "noncommittal": 0\n}\n\nExample 2\nInput: {\n    "response": "I don\'t know about the  groundbreaking feature of the smartphone invented in 2023 as am unaware of information beyond 2022. "\n}\nOutput: {\n    "question": "What was the groundbreaking feature of the smartphone invented in 2023?",\n    "noncommittal": 1\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "response": "В России можно проверить подлинность диплома в Федеральном реестре сведений документов об образовании (ФРДО). Этот реестр содержит данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатам о владении русским языком и дополнительном профессиональном образовании. Однако не все сведения в ФРДО еще полностью внесены, поэтому возможно, что у вас не найдётся нужная информация. В случае отсутствия данных можно направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа составляет 30 дней. Кроме того, некоторые учебные заведения имеют собственные сервисы проверки подлинности документов, например, в ВШЭ или СПбГУ."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-960b9943-91fc-4659-9ccd-7e9675028f66'}
2025-05-12 05:12:56,123 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:12:56,123 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Generate a question for the given answer and Identify if answer is noncommittal. Give noncommittal as 1 if the answer is noncommittal and 0 if the answer is committal. A noncommittal answer is one that is evasive, vague, or ambiguous. For example, "I don\'t know" or "I\'m not sure" are noncommittal answers\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"question": {"title": "Question", "type": "string"}, "noncommittal": {"title": "Noncommittal", "type": "integer"}}, "required": ["question", "noncommittal"], "title": "ResponseRelevanceOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "response": "Albert Einstein was born in Germany."\n}\nOutput: {\n    "question": "Where was Albert Einstein born?",\n    "noncommittal": 0\n}\n\nExample 2\nInput: {\n    "response": "I don\'t know about the  groundbreaking feature of the smartphone invented in 2023 as am unaware of information beyond 2022. "\n}\nOutput: {\n    "question": "What was the groundbreaking feature of the smartphone invented in 2023?",\n    "noncommittal": 1\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "response": "В России можно проверить подлинность диплома в Федеральном реестре сведений документов об образовании (ФРДО). Этот реестр содержит данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатам о владении русским языком и дополнительном профессиональном образовании. Однако не все сведения в ФРДО еще полностью внесены, поэтому возможно, что у вас не найдётся нужная информация. В случае отсутствия данных можно направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа составляет 30 дней. Кроме того, некоторые учебные заведения имеют собственные сервисы проверки подлинности документов, например, в ВШЭ или СПбГУ."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-5164f68f-7df7-4541-acc9-42fb21850265'}
2025-05-12 05:12:56,124 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:12:56,124 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Generate a question for the given answer and Identify if answer is noncommittal. Give noncommittal as 1 if the answer is noncommittal and 0 if the answer is committal. A noncommittal answer is one that is evasive, vague, or ambiguous. For example, "I don\'t know" or "I\'m not sure" are noncommittal answers\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"question": {"title": "Question", "type": "string"}, "noncommittal": {"title": "Noncommittal", "type": "integer"}}, "required": ["question", "noncommittal"], "title": "ResponseRelevanceOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "response": "Albert Einstein was born in Germany."\n}\nOutput: {\n    "question": "Where was Albert Einstein born?",\n    "noncommittal": 0\n}\n\nExample 2\nInput: {\n    "response": "I don\'t know about the  groundbreaking feature of the smartphone invented in 2023 as am unaware of information beyond 2022. "\n}\nOutput: {\n    "question": "What was the groundbreaking feature of the smartphone invented in 2023?",\n    "noncommittal": 1\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "response": "В России можно проверить подлинность диплома в Федеральном реестре сведений документов об образовании (ФРДО). Этот реестр содержит данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатам о владении русским языком и дополнительном профессиональном образовании. Однако не все сведения в ФРДО еще полностью внесены, поэтому возможно, что у вас не найдётся нужная информация. В случае отсутствия данных можно направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа составляет 30 дней. Кроме того, некоторые учебные заведения имеют собственные сервисы проверки подлинности документов, например, в ВШЭ или СПбГУ."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-7af1af2e-2d9d-406d-9f36-37da79cb42ac'}
2025-05-12 05:12:56,124 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:12:56,124 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:12:56,124 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:12:56,125 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:12:56,126 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x30a2b8580>
2025-05-12 05:12:56,126 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x31935cc80> server_hostname='api.openai.com' timeout=None
2025-05-12 05:12:56,128 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x309481190>
2025-05-12 05:12:56,128 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x31935cc80> server_hostname='api.openai.com' timeout=None
2025-05-12 05:12:56,128 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x309a6d7f0>
2025-05-12 05:12:56,128 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x31935cc80> server_hostname='api.openai.com' timeout=None
2025-05-12 05:12:56,129 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x309481ca0>
2025-05-12 05:12:56,129 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x31935cc80> server_hostname='api.openai.com' timeout=None
2025-05-12 05:12:56,341 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x301defb20>
2025-05-12 05:12:56,342 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:12:56,343 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:12:56,343 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:12:56,343 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:12:56,343 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:12:56,345 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x309481070>
2025-05-12 05:12:56,345 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:12:56,346 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:12:56,346 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:12:56,346 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:12:56,346 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:12:56,352 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x30a28d220>
2025-05-12 05:12:56,353 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:12:56,353 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:12:56,353 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:12:56,353 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:12:56,353 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:12:56,359 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x16f5069a0>
2025-05-12 05:12:56,359 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:12:56,359 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:12:56,359 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:12:56,360 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:12:56,360 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:12:57,552 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:12:57 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'823'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'828'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9994'), (b'x-ratelimit-remaining-tokens', b'197556'), (b'x-ratelimit-reset-requests', b'44.215s'), (b'x-ratelimit-reset-tokens', b'733ms'), (b'x-request-id', b'req_41d1cc40cafa484ba1d820faf3d82b0d'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=z2JSJcOa0YB6EFQ5lG0JA_rc3VdDQ06ZNEBWn0752s0-1747008777-1.0.1.1-gW.rOyIprRBt1nIbpHjvIEASx.94DrOoRHjUo0F666odaVLb.SjDa_R13HBkPzfoLtnO7S.au4QknbfMvDsqaMujih1olAYvP6gKVaskaeo; path=/; expires=Mon, 12-May-25 00:42:57 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=F6vYOi6c1ngBrSIYVWAmsJQ.EddSD4XGTgvFx71H87s-1747008777402-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b5146ed41c86-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:12:57,553 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:12:57,553 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:12:57,554 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:12:57 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'848'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'852'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9995'), (b'x-ratelimit-remaining-tokens', b'198070'), (b'x-ratelimit-reset-requests', b'35.613s'), (b'x-ratelimit-reset-tokens', b'578ms'), (b'x-request-id', b'req_2c3591f3da552a00577208097c324c65'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=Vy8r2IVdvXF8vfAR4N.WJlWAoY10aoevxAiKdVtG6mY-1747008777-1.0.1.1-B_MXWYY_iG4fyjr8PSGgvcZhcXm.vokIheg6oDIeNA6GpCp4c.ceVyBi8Ix65sGhr65PQwryOVQlK_PusjYz_.KSZGQNcFjouD.2TCehx_E; path=/; expires=Mon, 12-May-25 00:42:57 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=wcNsgfaj3POcGD0yoUmmJ.GDaR7S6gA.Wc3Hms1vlLU-1747008777415-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b5146f073379-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:12:57,554 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:12:57,555 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:12:57,555 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:12:57,555 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:12:57,555 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:12:57 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'855'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'860'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9996'), (b'x-ratelimit-remaining-tokens', b'198715'), (b'x-ratelimit-reset-requests', b'26.972s'), (b'x-ratelimit-reset-tokens', b'385ms'), (b'x-request-id', b'req_f647373ca7571cd57fc6fad886250a5b'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=aySABa9jwdQfNc0GG_WtIgWuVzM3y8f2J.w21BzgwkY-1747008777-1.0.1.1-JZxZXe53wrVko9ekTa4bFIBzkPXPXxi6gVwAG6.BWm8GAhPa5fUcTySvCJdw2Kn1rHJeDTOH8vLo9FiRxsdHuaSJG2Iy0uBIdoCv9HCrusI; path=/; expires=Mon, 12-May-25 00:42:57 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=wcNsgfaj3POcGD0yoUmmJ.GDaR7S6gA.Wc3Hms1vlLU-1747008777415-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b514588cfba5-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:12:57,556 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:12:57,556 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:12:57,556 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:12:57,556 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:12:57,557 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:12:57,557 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:12:57 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '848'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '852'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9995'), ('x-ratelimit-remaining-tokens', '198070'), ('x-ratelimit-reset-requests', '35.613s'), ('x-ratelimit-reset-tokens', '578ms'), ('x-request-id', 'req_2c3591f3da552a00577208097c324c65'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=Vy8r2IVdvXF8vfAR4N.WJlWAoY10aoevxAiKdVtG6mY-1747008777-1.0.1.1-B_MXWYY_iG4fyjr8PSGgvcZhcXm.vokIheg6oDIeNA6GpCp4c.ceVyBi8Ix65sGhr65PQwryOVQlK_PusjYz_.KSZGQNcFjouD.2TCehx_E; path=/; expires=Mon, 12-May-25 00:42:57 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=wcNsgfaj3POcGD0yoUmmJ.GDaR7S6gA.Wc3Hms1vlLU-1747008777415-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5b5146f073379-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:12:57,558 - openai._base_client - DEBUG - request_id: req_2c3591f3da552a00577208097c324c65
2025-05-12 05:12:57,559 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:12:57,559 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:12:57 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '855'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '860'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9996'), ('x-ratelimit-remaining-tokens', '198715'), ('x-ratelimit-reset-requests', '26.972s'), ('x-ratelimit-reset-tokens', '385ms'), ('x-request-id', 'req_f647373ca7571cd57fc6fad886250a5b'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=aySABa9jwdQfNc0GG_WtIgWuVzM3y8f2J.w21BzgwkY-1747008777-1.0.1.1-JZxZXe53wrVko9ekTa4bFIBzkPXPXxi6gVwAG6.BWm8GAhPa5fUcTySvCJdw2Kn1rHJeDTOH8vLo9FiRxsdHuaSJG2Iy0uBIdoCv9HCrusI; path=/; expires=Mon, 12-May-25 00:42:57 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=wcNsgfaj3POcGD0yoUmmJ.GDaR7S6gA.Wc3Hms1vlLU-1747008777415-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5b514588cfba5-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:12:57,560 - openai._base_client - DEBUG - request_id: req_f647373ca7571cd57fc6fad886250a5b
2025-05-12 05:12:57,560 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:12:57,560 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:12:57,561 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:12:57,561 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:12:57 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '823'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '828'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9994'), ('x-ratelimit-remaining-tokens', '197556'), ('x-ratelimit-reset-requests', '44.215s'), ('x-ratelimit-reset-tokens', '733ms'), ('x-request-id', 'req_41d1cc40cafa484ba1d820faf3d82b0d'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=z2JSJcOa0YB6EFQ5lG0JA_rc3VdDQ06ZNEBWn0752s0-1747008777-1.0.1.1-gW.rOyIprRBt1nIbpHjvIEASx.94DrOoRHjUo0F666odaVLb.SjDa_R13HBkPzfoLtnO7S.au4QknbfMvDsqaMujih1olAYvP6gKVaskaeo; path=/; expires=Mon, 12-May-25 00:42:57 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=F6vYOi6c1ngBrSIYVWAmsJQ.EddSD4XGTgvFx71H87s-1747008777402-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5b5146ed41c86-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:12:57,561 - openai._base_client - DEBUG - request_id: req_41d1cc40cafa484ba1d820faf3d82b0d
2025-05-12 05:12:57,569 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'post_parser': <function Embeddings.create.<locals>.parser at 0x309098790>, 'json_data': {'input': [[27435, 16248, 91398, 69556, 18264, 40842, 11320, 2156, 61379, 7952, 48445, 3114, 12507, 1506, 5927, 49520, 23630, 2297, 47273, 30]], 'model': 'text-embedding-ada-002', 'encoding_format': 'base64'}, 'idempotency_key': 'stainless-python-retry-8535af7a-0793-4cc4-86bb-5b8987bc47b2'}
2025-05-12 05:12:57,569 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/embeddings
2025-05-12 05:12:57,569 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:12:57,571 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x309a6d460>
2025-05-12 05:12:57,571 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x31935cba0> server_hostname='api.openai.com' timeout=None
2025-05-12 05:12:57,791 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x309a6d0a0>
2025-05-12 05:12:57,791 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:12:57,792 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:12:57,792 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:12:57,792 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:12:57,792 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:12:58,099 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:12:58 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-model', b'text-embedding-ada-002-v2'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'81'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'via', b'envoy-router-canary-59f47d845-fxtv7'), (b'x-envoy-upstream-service-time', b'84'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'1000000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'999980'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'1ms'), (b'x-request-id', b'req_d2129cbd3379331e4295d8afadefd643'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=gbNyox6msows54KZpSL3P9F72BIzZW4SS.ldaFlK9OQ-1747008778-1.0.1.1-NgT9dlriXtY3UUi6N4RkUlyftL2msearmsLyXb_mAAb1EMaU.nUtp0lxYtVjSEvsIQQWcIN1lszdc.dkW2Wb2WVZ9sZNhTvXWVVHYmEvW.Q; path=/; expires=Mon, 12-May-25 00:42:58 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=d6rYK46cDaU_x9QbCsiCJdUkeqR.XQUY8lrXZBRVSY0-1747008778051-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b51d5acff5b0-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:12:58,099 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 05:12:58,099 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:12:58,100 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:12:58,100 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:12:58,100 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:12:58,100 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/embeddings "200 OK" Headers([('date', 'Mon, 12 May 2025 00:12:58 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-allow-origin', '*'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-model', 'text-embedding-ada-002-v2'), ('openai-organization', 'tochka'), ('openai-processing-ms', '81'), ('openai-version', '2020-10-01'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('via', 'envoy-router-canary-59f47d845-fxtv7'), ('x-envoy-upstream-service-time', '84'), ('x-ratelimit-limit-requests', '3000'), ('x-ratelimit-limit-tokens', '1000000'), ('x-ratelimit-remaining-requests', '2999'), ('x-ratelimit-remaining-tokens', '999980'), ('x-ratelimit-reset-requests', '20ms'), ('x-ratelimit-reset-tokens', '1ms'), ('x-request-id', 'req_d2129cbd3379331e4295d8afadefd643'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=gbNyox6msows54KZpSL3P9F72BIzZW4SS.ldaFlK9OQ-1747008778-1.0.1.1-NgT9dlriXtY3UUi6N4RkUlyftL2msearmsLyXb_mAAb1EMaU.nUtp0lxYtVjSEvsIQQWcIN1lszdc.dkW2Wb2WVZ9sZNhTvXWVVHYmEvW.Q; path=/; expires=Mon, 12-May-25 00:42:58 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=d6rYK46cDaU_x9QbCsiCJdUkeqR.XQUY8lrXZBRVSY0-1747008778051-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5b51d5acff5b0-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:12:58,100 - openai._base_client - DEBUG - request_id: req_d2129cbd3379331e4295d8afadefd643
2025-05-12 05:12:58,101 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'post_parser': <function Embeddings.create.<locals>.parser at 0x309098790>, 'json_data': {'input': [[27435, 16248, 91398, 69556, 18264, 40842, 11320, 2156, 61379, 7952, 48445, 3114, 12507, 1506, 5927, 49520, 23630, 2297, 47273, 30], [27435, 16248, 91398, 69556, 18264, 40842, 11320, 2156, 61379, 7952, 48445, 3114, 12507, 1506, 5927, 49520, 23630, 2297, 47273, 30], [27435, 16248, 91398, 69556, 18264, 40842, 11320, 2156, 61379, 7952, 48445, 3114, 12507, 1506, 5927, 49520, 23630, 2297, 47273, 30]], 'model': 'text-embedding-ada-002', 'encoding_format': 'base64'}, 'idempotency_key': 'stainless-python-retry-2f2a5ab0-f448-46f0-8409-ffba5900f952'}
2025-05-12 05:12:58,102 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/embeddings
2025-05-12 05:12:58,102 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:12:58,102 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:12:58,102 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:12:58,102 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:12:58,102 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:12:58,503 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:12:58 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-model', b'text-embedding-ada-002-v2'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'119'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'via', b'envoy-router-7db5469759-q279v'), (b'x-envoy-upstream-service-time', b'122'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'1000000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'999939'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'3ms'), (b'x-request-id', b'req_800889fdd95da29c1898fd70ab0ddcef'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b51f4851f5b0-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:12:58,503 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 05:12:58,504 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:12:58,616 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:12:58,616 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:12:58,616 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:12:58,616 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/embeddings "200 OK" Headers({'date': 'Mon, 12 May 2025 00:12:58 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Request-ID', 'openai-model': 'text-embedding-ada-002-v2', 'openai-organization': 'tochka', 'openai-processing-ms': '119', 'openai-version': '2020-10-01', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'via': 'envoy-router-7db5469759-q279v', 'x-envoy-upstream-service-time': '122', 'x-ratelimit-limit-requests': '3000', 'x-ratelimit-limit-tokens': '1000000', 'x-ratelimit-remaining-requests': '2999', 'x-ratelimit-remaining-tokens': '999939', 'x-ratelimit-reset-requests': '20ms', 'x-ratelimit-reset-tokens': '3ms', 'x-request-id': 'req_800889fdd95da29c1898fd70ab0ddcef', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5b51f4851f5b0-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:12:58,616 - openai._base_client - DEBUG - request_id: req_800889fdd95da29c1898fd70ab0ddcef
2025-05-12 05:12:59,612 - ragas._analytics - DEBUG - Flushing triggered for 1 events
2025-05-12 05:12:59,612 - ragas._analytics - DEBUG - Grouped events: {('evaluation', ('answer_relevancy',), 'SINGLE_TURN'): EvaluationEvent(event_type='evaluation', user_id='a-c57b054261b446ec83e28aea108cead0', ragas_version='0.2.15', metrics=['answer_relevancy'], num_rows=1, evaluation_type='SINGLE_TURN', language='english')}
2025-05-12 05:12:59,614 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:13:00,016 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:13:02,464 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:13:02 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'5861'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'5868'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9997'), (b'x-ratelimit-remaining-tokens', b'199258'), (b'x-ratelimit-reset-requests', b'18.362s'), (b'x-ratelimit-reset-tokens', b'222ms'), (b'x-request-id', b'req_9ee46595a2a7cb3bb937b4c3711a0834'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=2hizu2EAxi0WdlwmH0VL0_065bIJhb1W30ZnsAtF8Hg-1747008782-1.0.1.1-0wU.qaEOG4.PVxZ4QKTQkPXpGtswzyMrCJfEhir9SMHm5ZCb7z0GOZlZk4OEbON6PiDMBn5oDAU5.TtBeRu4xsP5HQ_62CAVUgxQdxKNeXQ; path=/; expires=Mon, 12-May-25 00:43:02 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=u8.0N.X1W46ZTspmbjbmkjKLvNytFelQwbnUUbjNFBk-1747008782420-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b5144ab270b6-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:13:02,465 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:13:02,465 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:13:02,473 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:13:02,473 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:13:02,473 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:13:02,473 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:13:02 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '5861'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '5868'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9997'), ('x-ratelimit-remaining-tokens', '199258'), ('x-ratelimit-reset-requests', '18.362s'), ('x-ratelimit-reset-tokens', '222ms'), ('x-request-id', 'req_9ee46595a2a7cb3bb937b4c3711a0834'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=2hizu2EAxi0WdlwmH0VL0_065bIJhb1W30ZnsAtF8Hg-1747008782-1.0.1.1-0wU.qaEOG4.PVxZ4QKTQkPXpGtswzyMrCJfEhir9SMHm5ZCb7z0GOZlZk4OEbON6PiDMBn5oDAU5.TtBeRu4xsP5HQ_62CAVUgxQdxKNeXQ; path=/; expires=Mon, 12-May-25 00:43:02 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=u8.0N.X1W46ZTspmbjbmkjKLvNytFelQwbnUUbjNFBk-1747008782420-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5b5144ab270b6-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:13:02,474 - openai._base_client - DEBUG - request_id: req_9ee46595a2a7cb3bb937b4c3711a0834
2025-05-12 05:13:02,477 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Your task is to judge the faithfulness of a series of statements based on a given context. For each statement you must return verdict as 1 if the statement can be directly inferred based on the context or 0 if the statement can not be directly inferred based on the context.\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"$defs": {"StatementFaithfulnessAnswer": {"properties": {"statement": {"description": "the original statement, word-by-word", "title": "Statement", "type": "string"}, "reason": {"description": "the reason of the verdict", "title": "Reason", "type": "string"}, "verdict": {"description": "the verdict(0/1) of the faithfulness.", "title": "Verdict", "type": "integer"}}, "required": ["statement", "reason", "verdict"], "title": "StatementFaithfulnessAnswer", "type": "object"}}, "properties": {"statements": {"items": {"$ref": "#/$defs/StatementFaithfulnessAnswer"}, "title": "Statements", "type": "array"}}, "required": ["statements"], "title": "NLIStatementOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "context": "John is a student at XYZ University. He is pursuing a degree in Computer Science. He is enrolled in several courses this semester, including Data Structures, Algorithms, and Database Management. John is a diligent student and spends a significant amount of time studying and completing assignments. He often stays late in the library to work on his projects.",\n    "statements": [\n        "John is majoring in Biology.",\n        "John is taking a course on Artificial Intelligence.",\n        "John is a dedicated student.",\n        "John has a part-time job."\n    ]\n}\nOutput: {\n    "statements": [\n        {\n            "statement": "John is majoring in Biology.",\n            "reason": "John\'s major is explicitly mentioned as Computer Science. There is no information suggesting he is majoring in Biology.",\n            "verdict": 0\n        },\n        {\n            "statement": "John is taking a course on Artificial Intelligence.",\n            "reason": "The context mentions the courses John is currently enrolled in, and Artificial Intelligence is not mentioned. Therefore, it cannot be deduced that John is taking a course on AI.",\n            "verdict": 0\n        },\n        {\n            "statement": "John is a dedicated student.",\n            "reason": "The context states that he spends a significant amount of time studying and completing assignments. Additionally, it mentions that he often stays late in the library to work on his projects, which implies dedication.",\n            "verdict": 1\n        },\n        {\n            "statement": "John has a part-time job.",\n            "reason": "There is no information given in the context about John having a part-time job.",\n            "verdict": 0\n        }\n    ]\n}\n\nExample 2\nInput: {\n    "context": "Photosynthesis is a process used by plants, algae, and certain bacteria to convert light energy into chemical energy.",\n    "statements": [\n        "Albert Einstein was a genius."\n    ]\n}\nOutput: {\n    "statements": [\n        {\n            "statement": "Albert Einstein was a genius.",\n            "reason": "The context and statement are unrelated",\n            "verdict": 0\n        }\n    ]\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "context": "Где проверить подлинность диплома\\nВ России есть Федеральный реестр сведений документов об образовании (ФРДО), где любой желающий может бесплатно проверить подлинность документа. В базе есть данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатах о владении русским языком и дополнительном профессиональном образовании.\\nКоротко\\n• Быстрее всего проверить подлинность диплома можно в реестре ФРДО. Заполняете данные и сразу узнаёте, есть ли у сотрудника заявленное образование. • Данные в ФРДО внесены ещё не полностью и, возможно, вы не найдёте нужную информацию, однако это не опровергает факт выдачи документа. • Самые верные способы проверки — направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа 30 дней. • В некоторых учебных заведениях есть собственные сервисы проверки, например, в ВШЭ или СПбГУ.\\nЗапросите копии паспорта, свидетельства о регистрации (ОГРНИП), ИНН, а также лицензию, если она обязательна для ведения его деятельности.",\n    "statements": [\n        "В России можно проверить подлинность диплома в Федеральном реестре сведений документов об образовании (ФРДО).",\n        "Федеральный реестр сведений документов об образовании (ФРДО) содержит данные по дипломам об общем, среднем профессиональном и высшем образовании.",\n        "Федеральный реестр сведений документов об образовании (ФРДО) также содержит данные по сертификатам о владении русским языком и дополнительном профессиональном образовании.",\n        "Не все сведения в Федеральном реестре сведений документов об образовании (ФРДО) еще полностью внесены.",\n        "Возможно, что нужная информация не найдётся.",\n        "В случае отсутствия данных можно направить письменные запросы в Рособрнадзор или учебное заведение.",\n        "Срок ответа на письменные запросы составляет 30 дней.",\n        "Некоторые учебные заведения имеют собственные сервисы проверки подлинности документов.",\n        "Примеры учебных заведений с собственными сервисами проверки подлинности документов включают ВШЭ и СПбГУ."\n    ]\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-7deb4b95-c329-4092-9342-9d2656977b32'}
2025-05-12 05:13:02,478 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:13:02,479 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:13:02,479 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:13:02,479 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:13:02,479 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:13:02,479 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:13:18,982 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:13:18 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'16236'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'16241'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9994'), (b'x-ratelimit-remaining-tokens', b'198202'), (b'x-ratelimit-reset-requests', b'46.736s'), (b'x-ratelimit-reset-tokens', b'539ms'), (b'x-request-id', b'req_ef4474ddbd3190e8c8672237b6f63a16'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b53aa8af70b6-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:13:18,984 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:13:18,984 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:13:18,985 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:13:18,985 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:13:18,985 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:13:18,986 - httpcore.connection - DEBUG - close.started
2025-05-12 05:13:18,986 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:13:18,986 - httpcore.connection - DEBUG - close.started
2025-05-12 05:13:18,986 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:13:18,986 - httpcore.connection - DEBUG - close.started
2025-05-12 05:13:18,986 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:13:18,986 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:13:18 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '16236', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '16241', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9994', 'x-ratelimit-remaining-tokens': '198202', 'x-ratelimit-reset-requests': '46.736s', 'x-ratelimit-reset-tokens': '539ms', 'x-request-id': 'req_ef4474ddbd3190e8c8672237b6f63a16', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5b53aa8af70b6-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:13:18,987 - openai._base_client - DEBUG - request_id: req_ef4474ddbd3190e8c8672237b6f63a16
2025-05-12 05:13:18,992 - ragas._analytics - DEBUG - Flushing triggered for 1 events
2025-05-12 05:13:18,992 - ragas._analytics - DEBUG - Grouped events: {('evaluation', ('faithfulness',), 'SINGLE_TURN'): EvaluationEvent(event_type='evaluation', user_id='a-c57b054261b446ec83e28aea108cead0', ragas_version='0.2.15', metrics=['faithfulness'], num_rows=1, evaluation_type='SINGLE_TURN', language='english')}
2025-05-12 05:13:18,995 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:13:19,073 - ragas._analytics - DEBUG - Flushing triggered for 1 events
2025-05-12 05:13:19,073 - ragas._analytics - DEBUG - Grouped events: {('evaluation', ('faithfulness',), 'SINGLE_TURN'): EvaluationEvent(event_type='evaluation', user_id='a-c57b054261b446ec83e28aea108cead0', ragas_version='0.2.15', metrics=['faithfulness'], num_rows=1, evaluation_type='SINGLE_TURN', language='english')}
2025-05-12 05:13:19,075 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:13:19,416 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:13:19,417 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:13:19,488 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:13:19,841 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:13:19,842 - evaluate.metrics - DEBUG - Результат RAGAS: {'answer_relevancy': 0.0000, 'faithfulness': 1.0000}
2025-05-12 05:13:19,842 - evaluate.metrics - DEBUG - Тип результата RAGAS: <class 'ragas.dataset_schema.EvaluationResult'>
2025-05-12 05:13:19,842 - evaluate.metrics - DEBUG - Ключи в результате RAGAS: нет ключей
2025-05-12 05:13:19,842 - evaluate.metrics - ERROR - Ошибка при извлечении значений из результата RAGAS: 0
2025-05-12 05:13:19,842 - evaluate.metrics - ERROR - Полный результат RAGAS: {'answer_relevancy': 0.0000, 'faithfulness': 1.0000}
2025-05-12 05:13:19,844 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'Ты - точный оценщик качества ответов. Отвечай только числом от 0 до 1.'}, {'role': 'user', 'content': '\n        Вопрос: Как можно проверить подлинность диплома в России?\n        Ответ: В России можно проверить подлинность диплома в Федеральном реестре сведений документов об образовании (ФРДО). Этот реестр содержит данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатам о владении русским языком и дополнительном профессиональном образовании. Однако не все сведения в ФРДО еще полностью внесены, поэтому возможно, что у вас не найдётся нужная информация. В случае отсутствия данных можно направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа составляет 30 дней. Кроме того, некоторые учебные заведения имеют собственные сервисы проверки подлинности документов, например, в ВШЭ или СПбГУ.\n\n        Насколько данный ответ релевантен вопросу, независимо от контекста? Ответь одним числом от 0 до 1.\n        '}], 'model': 'gpt-3.5-turbo', 'temperature': 0}, 'idempotency_key': 'stainless-python-retry-c531c962-c2fb-4c2a-adf5-619477ffc87c'}
2025-05-12 05:13:19,845 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:13:19,845 - httpcore.connection - DEBUG - close.started
2025-05-12 05:13:19,846 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:13:19,846 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-05-12 05:13:20,102 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16f4ecfd0>
2025-05-12 05:13:20,102 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x30363d430> server_hostname='api.openai.com' timeout=5.0
2025-05-12 05:13:20,327 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x309055730>
2025-05-12 05:13:20,327 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:13:20,328 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:13:20,328 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:13:20,328 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:13:20,328 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:13:20,823 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:13:20 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'225'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'229'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'199578'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'126ms'), (b'x-request-id', b'req_ebaf14ead7c49ece24586d861a91d949'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b5aa3bc96602-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:13:20,824 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:13:20,824 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:13:20,824 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:13:20,824 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:13:20,824 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:13:20,824 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:13:20 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '225', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '229', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '199578', 'x-ratelimit-reset-requests': '8.64s', 'x-ratelimit-reset-tokens': '126ms', 'x-request-id': 'req_ebaf14ead7c49ece24586d861a91d949', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5b5aa3bc96602-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:13:20,825 - openai._base_client - DEBUG - request_id: req_ebaf14ead7c49ece24586d861a91d949
2025-05-12 05:13:20,826 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'Ты - точный оценщик качества ответов. Отвечай только числом от 0 до 1.'}, {'role': 'user', 'content': '\n        Ответ: В России можно проверить подлинность диплома в Федеральном реестре сведений документов об образовании (ФРДО). Этот реестр содержит данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатам о владении русским языком и дополнительном профессиональном образовании. Однако не все сведения в ФРДО еще полностью внесены, поэтому возможно, что у вас не найдётся нужная информация. В случае отсутствия данных можно направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа составляет 30 дней. Кроме того, некоторые учебные заведения имеют собственные сервисы проверки подлинности документов, например, в ВШЭ или СПбГУ.\n        Контекст: Где проверить подлинность диплома\nВ России есть Федеральный реестр сведений документов об образовании (ФРДО), где любой желающий может бесплатно проверить подлинность документа. В базе есть данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатах о владении русским языком и дополнительном профессиональном образовании. Коротко\n• Быстрее всего проверить подлинность диплома можно в реестре ФРДО. Заполняете данные и сразу узнаёте, есть ли у сотрудника заявленное образование. • Данные в ФРДО внесены ещё не полностью и, возможно, вы не найдёте нужную информацию, однако это не опровергает факт выдачи документа. • Самые верные способы проверки — направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа 30 дней. • В некоторых учебных заведениях есть собственные сервисы проверки, например, в ВШЭ или СПбГУ. Запросите копии паспорта, свидетельства о регистрации (ОГРНИП), ИНН, а также лицензию, если она обязательна для ведения его деятельности.\n\n        Насколько данный ответ соответствует только предоставленному контексту, без добавления лишней информации? Ответь одним числом от 0 до 1.\n        '}], 'model': 'gpt-3.5-turbo', 'temperature': 0}, 'idempotency_key': 'stainless-python-retry-6c3ea86c-312b-481d-bc73-938f80d846cf'}
2025-05-12 05:13:20,827 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:13:20,827 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:13:20,827 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:13:20,827 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:13:20,827 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:13:20,827 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:13:22,026 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:13:21 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'816'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'820'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9998'), (b'x-ratelimit-remaining-tokens', b'199123'), (b'x-ratelimit-reset-requests', b'16.779s'), (b'x-ratelimit-reset-tokens', b'263ms'), (b'x-request-id', b'req_d4fed36fdc0b7ed825919a72a759db84'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5b5ad5d5b6602-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:13:22,026 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:13:22,026 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:13:22,030 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:13:22,030 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:13:22,030 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:13:22,031 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:13:21 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '816', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '820', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9998', 'x-ratelimit-remaining-tokens': '199123', 'x-ratelimit-reset-requests': '16.779s', 'x-ratelimit-reset-tokens': '263ms', 'x-request-id': 'req_d4fed36fdc0b7ed825919a72a759db84', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5b5ad5d5b6602-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:13:22,031 - openai._base_client - DEBUG - request_id: req_d4fed36fdc0b7ed825919a72a759db84
2025-05-12 05:13:22,032 - evaluate - INFO - 
Сохранены результаты оценки в results/eval_subset_results.json
2025-05-12 05:13:22,032 - evaluate - INFO - 
--- Сводка по метрикам ---
2025-05-12 05:13:22,048 - evaluate - INFO -                             mean
rouge_l                   0.0000
bertscore                 0.6502
context_recall_manual     1.3333
context_precision_manual  1.0000
faithfulness_semantic     0.9351
ragas_answer_relevance       NaN
ragas_faithfulness           NaN
llm_relevance             0.8333
llm_faithfulness          1.0000
2025-05-12 05:13:22,051 - evaluate - INFO - 
Сохранена сводка в results/eval_subset_results_summary.csv
2025-05-12 05:13:22,100 - matplotlib.pyplot - DEBUG - Loaded backend macosx version unknown.
2025-05-12 05:13:22,303 - matplotlib.font_manager - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2025-05-12 05:13:22,304 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,304 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-05-12 05:13:22,304 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-05-12 05:13:22,304 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,304 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,304 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,304 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,304 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,304 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,304 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,304 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,304 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,304 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,304 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,304 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,304 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,304 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,304 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-05-12 05:13:22,305 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,306 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,307 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,308 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,308 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:13:22,308 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,308 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,308 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,308 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,308 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,308 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,308 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,308 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,308 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:13:22,308 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,308 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,308 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-05-12 05:13:22,308 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,309 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,309 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,309 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:13:22,309 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2025-05-12 05:13:22,309 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,309 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:13:22,309 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,309 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,309 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,309 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,309 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,310 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,310 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,310 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,310 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-05-12 05:13:22,310 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,310 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,310 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,310 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,310 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,310 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,310 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,310 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,310 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/PingFang.ttc', name='PingFang HK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,310 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,310 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,311 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,311 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.ttf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,311 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,311 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,311 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,311 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,311 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,311 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-12 05:13:22,312 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,312 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,312 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,312 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-05-12 05:13:22,312 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,312 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,312 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,312 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,312 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,312 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,312 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,312 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,312 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-12 05:13:22,313 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,313 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,313 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,313 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,313 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,313 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,313 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,313 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,313 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,313 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-05-12 05:13:22,313 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,313 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,313 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,313 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:13:22,313 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,313 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,313 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,313 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,313 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,313 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,313 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,313 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,313 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,314 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,314 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,314 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,314 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
2025-05-12 05:13:22,314 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,314 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,314 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-05-12 05:13:22,314 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,314 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,314 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,314 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,314 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,314 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,314 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,314 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,314 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,314 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,314 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,314 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-05-12 05:13:22,314 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,314 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,314 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,315 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,316 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,316 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,316 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-05-12 05:13:22,316 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,316 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,316 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,316 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,316 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:13:22,316 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,316 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,316 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,316 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:13:22,316 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,316 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,316 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,316 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,316 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,316 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:13:22,316 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,316 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,316 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:13:22,316 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,316 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,316 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,317 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,317 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,317 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,317 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,317 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-12 05:13:22,317 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:13:22,317 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,317 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-05-12 05:13:22,317 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,317 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,317 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,317 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,317 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,317 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,317 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,317 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,317 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,317 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,317 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2025-05-12 05:13:22,317 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,317 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:13:22,318 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,318 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,318 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,318 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,318 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-05-12 05:13:22,318 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,318 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,318 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:13:22,318 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,318 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,318 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,318 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,318 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,318 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,318 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,318 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,318 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,318 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,318 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,318 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2025-05-12 05:13:22,319 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,319 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,319 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,319 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,319 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,319 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,319 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,319 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,319 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,319 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,319 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,319 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:13:22,319 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,319 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,319 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
2025-05-12 05:13:22,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:13:22,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:13:22,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:13:22,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-05-12 05:13:22,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.ttf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:13:22,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,320 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
2025-05-12 05:13:22,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:13:22,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2025-05-12 05:13:22,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2025-05-12 05:13:22,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,321 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,322 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,322 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,322 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-12 05:13:22,322 - matplotlib.font_manager - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2025-05-12 05:13:22,324 - httpcore.connection - DEBUG - close.started
2025-05-12 05:13:22,325 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:13:22,361 - matplotlib.font_manager - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2025-05-12 05:13:22,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-05-12 05:13:22,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-05-12 05:13:22,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,362 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,362 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,362 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,362 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,362 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-05-12 05:13:22,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:13:22,371 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:13:22,371 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:13:22,371 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,371 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,371 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,371 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:13:22,371 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-05-12 05:13:22,371 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,371 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,371 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,377 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,377 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,377 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,379 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,379 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:13:22,379 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:13:22,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-05-12 05:13:22,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,399 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,399 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,399 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-12 05:13:22,399 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,403 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,404 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,404 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,404 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:13:22,406 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,406 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,406 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-12 05:13:22,406 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,411 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,411 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,411 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,411 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,412 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,412 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,412 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,412 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,417 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,417 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-05-12 05:13:22,417 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,423 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,423 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,423 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,423 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,431 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:13:22,432 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,432 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,432 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,433 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,433 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,433 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,433 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,445 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:13:22,445 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,445 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,445 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,445 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,445 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,445 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,445 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,452 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,452 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,452 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,452 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,457 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,457 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,457 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,458 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,458 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,458 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2025-05-12 05:13:22,458 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,458 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,458 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,458 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,458 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,459 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,459 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,459 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,459 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,459 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,459 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:13:22,459 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,459 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,459 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,459 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,459 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,459 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,459 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,459 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,459 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:13:22,459 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,459 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,459 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-05-12 05:13:22,459 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,459 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,459 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,459 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:13:22,460 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2025-05-12 05:13:22,460 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,460 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:13:22,460 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,471 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,471 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,471 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,471 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,483 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,483 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,484 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,484 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-05-12 05:13:22,485 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,485 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,485 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,485 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,485 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,485 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,485 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,485 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,485 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/PingFang.ttc', name='PingFang HK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,485 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,485 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,485 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,485 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.ttf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,485 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,485 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,485 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,485 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,485 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,485 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-12 05:13:22,486 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,486 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,486 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,486 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-05-12 05:13:22,486 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,486 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,486 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,486 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,486 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,486 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,486 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,486 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,486 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-12 05:13:22,486 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,486 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,486 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,486 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,486 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,486 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,486 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,486 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,486 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,486 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-05-12 05:13:22,486 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,486 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,486 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,486 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:13:22,487 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,487 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,487 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,487 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,487 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,487 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,487 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,487 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,487 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,487 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,487 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,487 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,487 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
2025-05-12 05:13:22,487 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,487 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,487 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-05-12 05:13:22,487 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,487 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,487 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,487 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,487 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,487 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,487 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,490 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,490 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,490 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,491 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,491 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-05-12 05:13:22,491 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,491 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,491 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,491 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,491 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,491 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:13:22,491 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,495 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,495 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-12 05:13:22,495 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,495 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,497 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,497 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2025-05-12 05:13:22,497 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,497 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,498 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,498 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,498 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,498 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,498 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,498 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,498 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,498 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,499 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,500 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,501 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-05-12 05:13:22,502 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,502 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,502 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:13:22,503 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,503 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,503 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,503 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,510 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,510 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,510 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,510 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,512 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,512 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,512 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,512 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2025-05-12 05:13:22,514 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,514 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,514 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,514 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,514 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,514 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,514 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,514 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,514 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,514 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,514 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,514 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:13:22,514 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,515 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,515 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,515 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,517 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,517 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,517 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,517 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,522 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,522 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
2025-05-12 05:13:22,522 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:13:22,522 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,525 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,525 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:13:22,525 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,525 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,527 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,527 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,527 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,532 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:13:22,532 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,532 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,532 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-05-12 05:13:22,533 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.ttf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,533 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,533 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:13:22,534 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,536 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,536 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,536 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,536 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
2025-05-12 05:13:22,537 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,537 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:13:22,537 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,537 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,537 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,537 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,537 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,538 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,538 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,538 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2025-05-12 05:13:22,538 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,538 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,538 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2025-05-12 05:13:22,538 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,538 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,539 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,539 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,539 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,539 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,539 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,539 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:13:22,539 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,539 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:13:22,539 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,539 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,539 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,539 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,539 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:13:22,540 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-12 05:13:22,540 - matplotlib.font_manager - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2025-05-12 05:13:22,724 - evaluate - INFO - График метрик сохранен в results/eval_subset_results_metrics.png/svg
2025-05-12 05:13:22,992 - evaluate - INFO - Диаграмма размаха сохранена в results/eval_subset_results_boxplot.png/svg
2025-05-12 05:13:23,149 - evaluate - INFO - Диаграмма рассеяния LLM сохранена в results/eval_subset_results_llm_scatter.png/svg
2025-05-12 05:13:23,150 - evaluate - INFO - Сохранены визуализации в results/eval_subset_results_*.svg/.png
2025-05-12 05:13:23,150 - evaluate - INFO - 
--- Лучшие и худшие примеры по метрикам ---
2025-05-12 05:13:23,150 - evaluate - INFO - 
rouge_l:
2025-05-12 05:13:23,150 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:13:23,150 - evaluate - INFO -     0.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:13:23,150 - evaluate - INFO -     0.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:13:23,150 - evaluate - INFO -     0.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:13:23,150 - evaluate - INFO -   Худшие 3:
2025-05-12 05:13:23,150 - evaluate - INFO -     0.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:13:23,150 - evaluate - INFO -     0.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:13:23,150 - evaluate - INFO -     0.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:13:23,150 - evaluate - INFO - 
bertscore:
2025-05-12 05:13:23,150 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:13:23,150 - evaluate - INFO -     0.6905 — Как можно проверить подлинность диплома в России?
2025-05-12 05:13:23,150 - evaluate - INFO -     0.6459 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:13:23,150 - evaluate - INFO -     0.6143 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:13:23,150 - evaluate - INFO -   Худшие 3:
2025-05-12 05:13:23,150 - evaluate - INFO -     0.6905 — Как можно проверить подлинность диплома в России?
2025-05-12 05:13:23,150 - evaluate - INFO -     0.6459 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:13:23,150 - evaluate - INFO -     0.6143 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:13:23,150 - evaluate - INFO - 
context_recall_manual:
2025-05-12 05:13:23,150 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:13:23,150 - evaluate - INFO -     1.5000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:13:23,150 - evaluate - INFO -     1.5000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:13:23,150 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:13:23,150 - evaluate - INFO -   Худшие 3:
2025-05-12 05:13:23,150 - evaluate - INFO -     1.5000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:13:23,150 - evaluate - INFO -     1.5000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:13:23,150 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:13:23,150 - evaluate - INFO - 
context_precision_manual:
2025-05-12 05:13:23,150 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:13:23,150 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:13:23,150 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:13:23,150 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:13:23,150 - evaluate - INFO -   Худшие 3:
2025-05-12 05:13:23,150 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:13:23,150 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:13:23,150 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:13:23,150 - evaluate - INFO - 
faithfulness_semantic:
2025-05-12 05:13:23,150 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:13:23,150 - evaluate - INFO -     0.9682 — Как можно проверить подлинность диплома в России?
2025-05-12 05:13:23,150 - evaluate - INFO -     0.9313 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:13:23,150 - evaluate - INFO -     0.9058 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:13:23,150 - evaluate - INFO -   Худшие 3:
2025-05-12 05:13:23,150 - evaluate - INFO -     0.9682 — Как можно проверить подлинность диплома в России?
2025-05-12 05:13:23,151 - evaluate - INFO -     0.9313 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:13:23,151 - evaluate - INFO -     0.9058 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:13:23,151 - evaluate - INFO - 
llm_relevance:
2025-05-12 05:13:23,151 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:13:23,151 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:13:23,151 - evaluate - INFO -     0.8000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:13:23,151 - evaluate - INFO -     0.7000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:13:23,151 - evaluate - INFO -   Худшие 3:
2025-05-12 05:13:23,151 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:13:23,151 - evaluate - INFO -     0.8000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:13:23,151 - evaluate - INFO -     0.7000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:13:23,151 - evaluate - INFO - 
llm_faithfulness:
2025-05-12 05:13:23,151 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:13:23,151 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:13:23,151 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:13:23,151 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:13:23,151 - evaluate - INFO -   Худшие 3:
2025-05-12 05:13:23,151 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:13:23,151 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:13:23,151 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:13:23,152 - ragas._analytics - DEBUG - AnalyticsBatcher shutdown complete
2025-05-12 05:24:02,204 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:24:02,204 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:24:02,223 - evaluate - INFO - Оценка вопроса: Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:24:02,226 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:8000
2025-05-12 05:24:02,496 - urllib3.connectionpool - DEBUG - http://localhost:8000 "POST /token HTTP/1.1" 200 173
2025-05-12 05:24:02,498 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:8000
2025-05-12 05:24:15,757 - urllib3.connectionpool - DEBUG - http://localhost:8000 "POST /ask HTTP/1.1" 200 4145
2025-05-12 05:24:15,763 - evaluate - INFO - Получен ответ от API для вопроса: Что проверяет налоговая при оц...
2025-05-12 05:24:15,763 - evaluate.metrics - DEBUG - Начинаем вычисление ROUGE-L
2025-05-12 05:24:15,764 - absl - INFO - Using default tokenizer.
2025-05-12 05:24:15,765 - evaluate.metrics - DEBUG - ROUGE-L выполнен успешно, значение: 0
2025-05-12 05:24:15,765 - evaluate.metrics - DEBUG - Начинаем вычисление BERTScore
2025-05-12 05:24:15,776 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): huggingface.co:443
2025-05-12 05:24:17,026 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /bert-base-multilingual-cased/resolve/main/tokenizer_config.json HTTP/1.1" 200 0
2025-05-12 05:24:17,437 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /bert-base-multilingual-cased/resolve/main/config.json HTTP/1.1" 200 0
2025-05-12 05:24:22,205 - evaluate.metrics - DEBUG - BERTScore выполнен успешно, значение: 0.6459
2025-05-12 05:24:22,206 - evaluate.metrics - DEBUG - Начинаем вычисление перекрытия контекста
2025-05-12 05:24:22,366 - evaluate.metrics - DEBUG - Перекрытие контекста выполнено успешно. Recall: 1.5, Precision: 1.0
2025-05-12 05:24:22,367 - evaluate.metrics - DEBUG - Начинаем вычисление семантической достоверности (faithfulness)
2025-05-12 05:24:22,416 - evaluate.metrics - DEBUG - Семантическая достоверность выполнена успешно, значение: 0.9058
2025-05-12 05:24:22,416 - evaluate.metrics - INFO - Начинаем вычисление метрик RAGAS
2025-05-12 05:24:22,416 - evaluate.metrics - DEBUG - Подготовка данных для RAGAS
2025-05-12 05:24:22,416 - evaluate.metrics - DEBUG - Создание датасета из данных
2025-05-12 05:24:22,448 - evaluate.metrics - INFO - RAGAS data: {'question': ['Что проверяет налоговая при оценке надежности компании?'], 'answer': ['Налоговая проверяет надежность компании путем требования разъяснений и документов от компании и её контрагентов, аудиторов. Они также приглашают на беседу сотрудников компании и её контрагентов, используют переводчика для документов на иностранном языке, а также экспертов для исследования свойств предметов (например, фармацевтов, профессоров, художников, учителей). Кроме того, они осматривают помещения и документы компании.'], 'contexts': [['Вот что они делают для проверки:\n• Требуют разъяснения и документы у компании и её контрагентов, аудиторов. Про правила и порядок рассказывают статьи 93, 93.1, 93.2 НК РФ. • Приглашают на беседу в налоговую сотрудников компании и её контрагентов. • Привлекают переводчика, если документы на иностранном языке. • Привлекают экспертов, если нужно исследовать свойства предметов. Например, фармацевтов, профессоров, художников, учителей. Компания может давать своего эксперта. • Осматривают помещения и документы.', '• Чтобы избежать проблем в будущем, следите за полнотой, корректностью и актуальностью сведений в ЕГРЮЛ. Проверить данные можно скачав выписку на сайте налоговой.', 'Если на этом этапе будут несоответствия по одному или нескольким пунктам, налоговики закончат оценку. В компанию придёт выписка с критериями, которым компания не соответствует. Материалы для бизнеса в телеграм-канале Справочной\nПолучайте ежедневные дайджесты новостей и разборы законов, читайте истории предпринимателей и узнавайте о господдержке для бизнеса\nЧто будут проверять дальше.']], 'ground_truths': [['Записи в реестрах, наличие долгов, достоверность информации, показатели ликвидности и платёжеспособности.']]}
2025-05-12 05:24:22,448 - evaluate.metrics - DEBUG - Метрики RAGAS: [answer_relevancy, faithfulness]
2025-05-12 05:24:22,448 - evaluate.metrics - DEBUG - Запуск evaluate() с RAGAS метриками
2025-05-12 05:24:22,457 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:24:23,061 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 402 78
2025-05-12 05:24:23,091 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:24:23,091 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:24:23,474 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:24:23,474 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:24:23,479 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:24:23,479 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:24:23,483 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:24:23,483 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:24:23,546 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Generate a question for the given answer and Identify if answer is noncommittal. Give noncommittal as 1 if the answer is noncommittal and 0 if the answer is committal. A noncommittal answer is one that is evasive, vague, or ambiguous. For example, "I don\'t know" or "I\'m not sure" are noncommittal answers\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"question": {"title": "Question", "type": "string"}, "noncommittal": {"title": "Noncommittal", "type": "integer"}}, "required": ["question", "noncommittal"], "title": "ResponseRelevanceOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "response": "Albert Einstein was born in Germany."\n}\nOutput: {\n    "question": "Where was Albert Einstein born?",\n    "noncommittal": 0\n}\n\nExample 2\nInput: {\n    "response": "I don\'t know about the  groundbreaking feature of the smartphone invented in 2023 as am unaware of information beyond 2022. "\n}\nOutput: {\n    "question": "What was the groundbreaking feature of the smartphone invented in 2023?",\n    "noncommittal": 1\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "response": "Налоговая проверяет надежность компании путем требования разъяснений и документов от компании и её контрагентов, аудиторов. Они также приглашают на беседу сотрудников компании и её контрагентов, используют переводчика для документов на иностранном языке, а также экспертов для исследования свойств предметов (например, фармацевтов, профессоров, художников, учителей). Кроме того, они осматривают помещения и документы компании."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-242e7df4-a8e2-4276-b7aa-415a0cb36db6'}
2025-05-12 05:24:23,547 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:24:23,552 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Generate a question for the given answer and Identify if answer is noncommittal. Give noncommittal as 1 if the answer is noncommittal and 0 if the answer is committal. A noncommittal answer is one that is evasive, vague, or ambiguous. For example, "I don\'t know" or "I\'m not sure" are noncommittal answers\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"question": {"title": "Question", "type": "string"}, "noncommittal": {"title": "Noncommittal", "type": "integer"}}, "required": ["question", "noncommittal"], "title": "ResponseRelevanceOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "response": "Albert Einstein was born in Germany."\n}\nOutput: {\n    "question": "Where was Albert Einstein born?",\n    "noncommittal": 0\n}\n\nExample 2\nInput: {\n    "response": "I don\'t know about the  groundbreaking feature of the smartphone invented in 2023 as am unaware of information beyond 2022. "\n}\nOutput: {\n    "question": "What was the groundbreaking feature of the smartphone invented in 2023?",\n    "noncommittal": 1\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "response": "Налоговая проверяет надежность компании путем требования разъяснений и документов от компании и её контрагентов, аудиторов. Они также приглашают на беседу сотрудников компании и её контрагентов, используют переводчика для документов на иностранном языке, а также экспертов для исследования свойств предметов (например, фармацевтов, профессоров, художников, учителей). Кроме того, они осматривают помещения и документы компании."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-d4d7ed99-4b96-41de-8d88-cfd7e3f75e86'}
2025-05-12 05:24:23,553 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:24:23,553 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:24:23,554 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:24:23,554 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Generate a question for the given answer and Identify if answer is noncommittal. Give noncommittal as 1 if the answer is noncommittal and 0 if the answer is committal. A noncommittal answer is one that is evasive, vague, or ambiguous. For example, "I don\'t know" or "I\'m not sure" are noncommittal answers\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"question": {"title": "Question", "type": "string"}, "noncommittal": {"title": "Noncommittal", "type": "integer"}}, "required": ["question", "noncommittal"], "title": "ResponseRelevanceOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "response": "Albert Einstein was born in Germany."\n}\nOutput: {\n    "question": "Where was Albert Einstein born?",\n    "noncommittal": 0\n}\n\nExample 2\nInput: {\n    "response": "I don\'t know about the  groundbreaking feature of the smartphone invented in 2023 as am unaware of information beyond 2022. "\n}\nOutput: {\n    "question": "What was the groundbreaking feature of the smartphone invented in 2023?",\n    "noncommittal": 1\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "response": "Налоговая проверяет надежность компании путем требования разъяснений и документов от компании и её контрагентов, аудиторов. Они также приглашают на беседу сотрудников компании и её контрагентов, используют переводчика для документов на иностранном языке, а также экспертов для исследования свойств предметов (например, фармацевтов, профессоров, художников, учителей). Кроме того, они осматривают помещения и документы компании."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-7558944f-e6c2-440d-ba46-ade42d45c537'}
2025-05-12 05:24:23,556 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:24:23,556 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Given a question and an answer, analyze the complexity of each sentence in the answer. Break down each sentence into one or more fully understandable statements. Ensure that no pronouns are used in any statement. Format the outputs in JSON.\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"statements": {"description": "The generated statements", "items": {"type": "string"}, "title": "Statements", "type": "array"}}, "required": ["statements"], "title": "StatementGeneratorOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "question": "Who was Albert Einstein and what is he best known for?",\n    "answer": "He was a German-born theoretical physicist, widely acknowledged to be one of the greatest and most influential physicists of all time. He was best known for developing the theory of relativity, he also made important contributions to the development of the theory of quantum mechanics."\n}\nOutput: {\n    "statements": [\n        "Albert Einstein was a German-born theoretical physicist.",\n        "Albert Einstein is recognized as one of the greatest and most influential physicists of all time.",\n        "Albert Einstein was best known for developing the theory of relativity.",\n        "Albert Einstein also made important contributions to the development of the theory of quantum mechanics."\n    ]\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "question": "Что проверяет налоговая при оценке надежности компании?",\n    "answer": "Налоговая проверяет надежность компании путем требования разъяснений и документов от компании и её контрагентов, аудиторов. Они также приглашают на беседу сотрудников компании и её контрагентов, используют переводчика для документов на иностранном языке, а также экспертов для исследования свойств предметов (например, фармацевтов, профессоров, художников, учителей). Кроме того, они осматривают помещения и документы компании."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-4ed34306-0681-4d72-b84b-f38f0bc4f30c'}
2025-05-12 05:24:23,557 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:24:23,557 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:24:23,557 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:24:23,675 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x30b5b1430>
2025-05-12 05:24:23,675 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x30b3b70b0> server_hostname='api.openai.com' timeout=None
2025-05-12 05:24:23,675 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x30b553e50>
2025-05-12 05:24:23,675 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x30b3b70b0> server_hostname='api.openai.com' timeout=None
2025-05-12 05:24:23,675 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x30b5b1fd0>
2025-05-12 05:24:23,675 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x30b3b70b0> server_hostname='api.openai.com' timeout=None
2025-05-12 05:24:23,676 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x30b5bf0d0>
2025-05-12 05:24:23,676 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x30b3b70b0> server_hostname='api.openai.com' timeout=None
2025-05-12 05:24:23,881 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x30b564b20>
2025-05-12 05:24:23,882 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:24:23,882 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:24:23,882 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:24:23,882 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:24:23,882 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:24:23,894 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x30b5bffa0>
2025-05-12 05:24:23,894 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:24:23,895 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:24:23,895 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:24:23,895 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:24:23,895 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:24:23,901 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x30b579e20>
2025-05-12 05:24:23,902 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:24:23,902 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:24:23,902 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:24:23,903 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:24:23,903 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:24:23,904 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x30b5bd730>
2025-05-12 05:24:23,904 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:24:23,905 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:24:23,905 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:24:23,905 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:24:23,905 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:24:25,055 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:24:25 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'813'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'817'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9997'), (b'x-ratelimit-remaining-tokens', b'198332'), (b'x-ratelimit-reset-requests', b'25.909s'), (b'x-ratelimit-reset-tokens', b'500ms'), (b'x-request-id', b'req_c0911f7e821138340c25c1eed153e1b0'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=mqPcHu0cP8NUThFxWKQi4t5GnAQnFS83QnKES_0qQek-1747009465-1.0.1.1-W58Uv4K1WceNW7eevtaWdlxadR8lI3xyHcCUaL9owELWpTo8iWzqGk57Gqa0qIzE6Hq2ut9v89Rge1KjxyIgVuKQDain8VjyRhoH2sC9F04; path=/; expires=Mon, 12-May-25 00:54:25 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=E7Oie65J1cWlTRqGdQPNc4KTeLSC9W7eu7clRlZIMF4-1747009465005-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5c5dd89476711-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:24:25,056 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:24:25,057 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:24:25,057 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:24:25,057 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:24:25,057 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:24:25,058 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:24:25 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '813'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '817'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9997'), ('x-ratelimit-remaining-tokens', '198332'), ('x-ratelimit-reset-requests', '25.909s'), ('x-ratelimit-reset-tokens', '500ms'), ('x-request-id', 'req_c0911f7e821138340c25c1eed153e1b0'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=mqPcHu0cP8NUThFxWKQi4t5GnAQnFS83QnKES_0qQek-1747009465-1.0.1.1-W58Uv4K1WceNW7eevtaWdlxadR8lI3xyHcCUaL9owELWpTo8iWzqGk57Gqa0qIzE6Hq2ut9v89Rge1KjxyIgVuKQDain8VjyRhoH2sC9F04; path=/; expires=Mon, 12-May-25 00:54:25 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=E7Oie65J1cWlTRqGdQPNc4KTeLSC9W7eu7clRlZIMF4-1747009465005-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5c5dd89476711-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:24:25,058 - openai._base_client - DEBUG - request_id: req_c0911f7e821138340c25c1eed153e1b0
2025-05-12 05:24:25,087 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:24:25 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'834'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'838'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9996'), (b'x-ratelimit-remaining-tokens', b'197776'), (b'x-ratelimit-reset-requests', b'34.556s'), (b'x-ratelimit-reset-tokens', b'666ms'), (b'x-request-id', b'req_873c0739b03bf558761555325de8369e'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=CR.X5i9F0VJA5FNCBMzbkF47M0lYVyNuqabR5BRkt5g-1747009465-1.0.1.1-nYg5Ex1aF8bmNfsnstJLsgzeiBYk6fO_frCFcVsQYtIq8XqSYyN.ePVYNs5wrW7vCVI7d_qkqY3bFrYCQTd14nIs0hMSfyhONA9xiGtmESE; path=/; expires=Mon, 12-May-25 00:54:25 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=nxbAUJFIp2r0MvqDXZMQi.wv13n.bDQXvEeF5NbklD0-1747009465037-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5c5dd988e9fee-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:24:25,087 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:24:25,088 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:24:25,089 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:24:25,089 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:24:25,089 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:24:25,089 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:24:25 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '834'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '838'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9996'), ('x-ratelimit-remaining-tokens', '197776'), ('x-ratelimit-reset-requests', '34.556s'), ('x-ratelimit-reset-tokens', '666ms'), ('x-request-id', 'req_873c0739b03bf558761555325de8369e'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=CR.X5i9F0VJA5FNCBMzbkF47M0lYVyNuqabR5BRkt5g-1747009465-1.0.1.1-nYg5Ex1aF8bmNfsnstJLsgzeiBYk6fO_frCFcVsQYtIq8XqSYyN.ePVYNs5wrW7vCVI7d_qkqY3bFrYCQTd14nIs0hMSfyhONA9xiGtmESE; path=/; expires=Mon, 12-May-25 00:54:25 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=nxbAUJFIp2r0MvqDXZMQi.wv13n.bDQXvEeF5NbklD0-1747009465037-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5c5dd988e9fee-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:24:25,089 - openai._base_client - DEBUG - request_id: req_873c0739b03bf558761555325de8369e
2025-05-12 05:24:25,098 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:24:25 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'861'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'868'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9998'), (b'x-ratelimit-remaining-tokens', b'198866'), (b'x-ratelimit-reset-requests', b'17.268s'), (b'x-ratelimit-reset-tokens', b'339ms'), (b'x-request-id', b'req_4c9e0fff3543c5b6e5da6dc3ca3a8072'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=_tsH.pmstl2itKiCNKXiDU9gE6Q.LzFuj17P7y5pUGM-1747009465-1.0.1.1-ejvwn1zVODY_HqZq_eorjhOwGVtSVi4ida8r8_To76QeS1bSV42kYEf2mKkCosCz.7H6YTT910nR_wXZa3vienN4Z3tJBabO2N2vfpcuqmM; path=/; expires=Mon, 12-May-25 00:54:25 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=d8JVq5FWZzRjCkEjkPhvMl700eP3abnAC95xMUfKMTU-1747009465050-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5c5dd8ff09fb4-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:24:25,098 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:24:25,098 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:24:25,099 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:24:25,099 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:24:25,099 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:24:25,100 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:24:25 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '861'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '868'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9998'), ('x-ratelimit-remaining-tokens', '198866'), ('x-ratelimit-reset-requests', '17.268s'), ('x-ratelimit-reset-tokens', '339ms'), ('x-request-id', 'req_4c9e0fff3543c5b6e5da6dc3ca3a8072'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=_tsH.pmstl2itKiCNKXiDU9gE6Q.LzFuj17P7y5pUGM-1747009465-1.0.1.1-ejvwn1zVODY_HqZq_eorjhOwGVtSVi4ida8r8_To76QeS1bSV42kYEf2mKkCosCz.7H6YTT910nR_wXZa3vienN4Z3tJBabO2N2vfpcuqmM; path=/; expires=Mon, 12-May-25 00:54:25 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=d8JVq5FWZzRjCkEjkPhvMl700eP3abnAC95xMUfKMTU-1747009465050-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5c5dd8ff09fb4-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:24:25,100 - openai._base_client - DEBUG - request_id: req_4c9e0fff3543c5b6e5da6dc3ca3a8072
2025-05-12 05:24:25,222 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'post_parser': <function Embeddings.create.<locals>.parser at 0x30b3d98b0>, 'json_data': {'input': [[73919, 25657, 69556, 4329, 8341, 13373, 3114, 14837, 6856, 36497, 37405, 8379, 10589, 5372, 53671, 6850, 23680, 50436, 68742, 77573, 14332, 1840, 30]], 'model': 'text-embedding-ada-002', 'encoding_format': 'base64'}, 'idempotency_key': 'stainless-python-retry-ffd7b292-f446-4dd5-8464-5a6157b86ccb'}
2025-05-12 05:24:25,222 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/embeddings
2025-05-12 05:24:25,222 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:24:25,224 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x30fe207f0>
2025-05-12 05:24:25,224 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x30b3b7350> server_hostname='api.openai.com' timeout=None
2025-05-12 05:24:25,439 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x30fe207c0>
2025-05-12 05:24:25,439 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:24:25,439 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:24:25,439 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:24:25,439 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:24:25,439 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:24:26,201 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:24:26 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-model', b'text-embedding-ada-002-v2'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'150'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'via', b'envoy-router-7d545f8f56-ntzbj'), (b'x-envoy-upstream-service-time', b'154'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'1000000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'999976'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'1ms'), (b'x-request-id', b'req_486e893b30f865b2b087a78378c7c881'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=ZK9O9Gwz979TQ38l6e6lKDYtJTT0gYFBMSrTjilYYzs-1747009466-1.0.1.1-1A02xYyGUiYfaZztcJvIFczyxHYcVoC5bwxuJndRhpQNyFJpn.Y7JoA2GXYWcM2LESyZzLxeVZy2iF5cHdMLipfCMOOMG4m5vc0vLB6rtJ0; path=/; expires=Mon, 12-May-25 00:54:26 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=aczeA0_jIvrEY1jxbiz9VQjXn9VIjPzl0DmQARBFIwY-1747009466129-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5c5e72a1157f0-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:24:26,202 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 05:24:26,203 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:24:26,203 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:24:26,203 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:24:26,203 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:24:26,204 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/embeddings "200 OK" Headers([('date', 'Mon, 12 May 2025 00:24:26 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-allow-origin', '*'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-model', 'text-embedding-ada-002-v2'), ('openai-organization', 'tochka'), ('openai-processing-ms', '150'), ('openai-version', '2020-10-01'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('via', 'envoy-router-7d545f8f56-ntzbj'), ('x-envoy-upstream-service-time', '154'), ('x-ratelimit-limit-requests', '3000'), ('x-ratelimit-limit-tokens', '1000000'), ('x-ratelimit-remaining-requests', '2999'), ('x-ratelimit-remaining-tokens', '999976'), ('x-ratelimit-reset-requests', '20ms'), ('x-ratelimit-reset-tokens', '1ms'), ('x-request-id', 'req_486e893b30f865b2b087a78378c7c881'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=ZK9O9Gwz979TQ38l6e6lKDYtJTT0gYFBMSrTjilYYzs-1747009466-1.0.1.1-1A02xYyGUiYfaZztcJvIFczyxHYcVoC5bwxuJndRhpQNyFJpn.Y7JoA2GXYWcM2LESyZzLxeVZy2iF5cHdMLipfCMOOMG4m5vc0vLB6rtJ0; path=/; expires=Mon, 12-May-25 00:54:26 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=aczeA0_jIvrEY1jxbiz9VQjXn9VIjPzl0DmQARBFIwY-1747009466129-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5c5e72a1157f0-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:24:26,204 - openai._base_client - DEBUG - request_id: req_486e893b30f865b2b087a78378c7c881
2025-05-12 05:24:26,206 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'post_parser': <function Embeddings.create.<locals>.parser at 0x30b5ce670>, 'json_data': {'input': [[27435, 16248, 13373, 3114, 14837, 6856, 36497, 69556, 4329, 8341, 6850, 23680, 50436, 61379, 77573, 14332, 1840, 30], [27435, 16248, 13373, 3114, 14837, 6856, 36497, 69556, 4329, 8341, 6850, 23680, 50436, 61379, 77573, 14332, 1840, 30], [27435, 16248, 13373, 3114, 14837, 6856, 36497, 69556, 4329, 8341, 6850, 23680, 50436, 61379, 77573, 14332, 1840, 30]], 'model': 'text-embedding-ada-002', 'encoding_format': 'base64'}, 'idempotency_key': 'stainless-python-retry-94f2ef2c-360f-4a7b-af1c-88d026202bda'}
2025-05-12 05:24:26,207 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/embeddings
2025-05-12 05:24:26,207 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:24:26,208 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:24:26,208 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:24:26,208 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:24:26,208 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:24:26,617 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:24:26 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-model', b'text-embedding-ada-002-v2'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'130'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'via', b'envoy-router-5bd8f6d65-t5nc2'), (b'x-envoy-upstream-service-time', b'133'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'1000000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'999946'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'3ms'), (b'x-request-id', b'req_263aade8d7863af43528e73a242d0581'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5c5ebfde157f0-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:24:26,618 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 05:24:26,618 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:24:26,724 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:24:26,724 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:24:26,725 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:24:26,725 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/embeddings "200 OK" Headers({'date': 'Mon, 12 May 2025 00:24:26 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Request-ID', 'openai-model': 'text-embedding-ada-002-v2', 'openai-organization': 'tochka', 'openai-processing-ms': '130', 'openai-version': '2020-10-01', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'via': 'envoy-router-5bd8f6d65-t5nc2', 'x-envoy-upstream-service-time': '133', 'x-ratelimit-limit-requests': '3000', 'x-ratelimit-limit-tokens': '1000000', 'x-ratelimit-remaining-requests': '2999', 'x-ratelimit-remaining-tokens': '999946', 'x-ratelimit-reset-requests': '20ms', 'x-ratelimit-reset-tokens': '3ms', 'x-request-id': 'req_263aade8d7863af43528e73a242d0581', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5c5ebfde157f0-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:24:26,726 - openai._base_client - DEBUG - request_id: req_263aade8d7863af43528e73a242d0581
2025-05-12 05:24:26,938 - ragas._analytics - DEBUG - Flushing triggered for 1 events
2025-05-12 05:24:26,938 - ragas._analytics - DEBUG - Grouped events: {('evaluation', ('answer_relevancy',), 'SINGLE_TURN'): EvaluationEvent(event_type='evaluation', user_id='a-c57b054261b446ec83e28aea108cead0', ragas_version='0.2.15', metrics=['answer_relevancy'], num_rows=1, evaluation_type='SINGLE_TURN', language='english')}
2025-05-12 05:24:26,940 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:24:27,268 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:24:27 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'3045'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'3048'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'199362'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'191ms'), (b'x-request-id', b'req_36a9324ac0b5d2ecb8535d0cf7a39d5c'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=eraMU23LAw.gX14mGIxQmlsK6ZMuAe8Zf3nGvutxyCM-1747009467-1.0.1.1-UcOHZInu8DvFvQGjwcJn4e6UsGiZY38bSg3b94FGd7X8bFtJI21.rUZV0oppC.RgQUTDM84FBjVdkE75EV2KC8bTHhEJk.yE437IMLD7KlU; path=/; expires=Mon, 12-May-25 00:54:27 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=1A3hpg418cT7IGVqLxzLwIcb3kzHVUuuzgEGZyKOInA-1747009467223-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5c5dd699499d3-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:24:27,269 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:24:27,270 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:24:27,275 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:24:27,275 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:24:27,275 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:24:27,276 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:24:27 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '3045'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '3048'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '199362'), ('x-ratelimit-reset-requests', '8.64s'), ('x-ratelimit-reset-tokens', '191ms'), ('x-request-id', 'req_36a9324ac0b5d2ecb8535d0cf7a39d5c'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=eraMU23LAw.gX14mGIxQmlsK6ZMuAe8Zf3nGvutxyCM-1747009467-1.0.1.1-UcOHZInu8DvFvQGjwcJn4e6UsGiZY38bSg3b94FGd7X8bFtJI21.rUZV0oppC.RgQUTDM84FBjVdkE75EV2KC8bTHhEJk.yE437IMLD7KlU; path=/; expires=Mon, 12-May-25 00:54:27 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=1A3hpg418cT7IGVqLxzLwIcb3kzHVUuuzgEGZyKOInA-1747009467223-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5c5dd699499d3-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:24:27,276 - openai._base_client - DEBUG - request_id: req_36a9324ac0b5d2ecb8535d0cf7a39d5c
2025-05-12 05:24:27,283 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Your task is to judge the faithfulness of a series of statements based on a given context. For each statement you must return verdict as 1 if the statement can be directly inferred based on the context or 0 if the statement can not be directly inferred based on the context.\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"$defs": {"StatementFaithfulnessAnswer": {"properties": {"statement": {"description": "the original statement, word-by-word", "title": "Statement", "type": "string"}, "reason": {"description": "the reason of the verdict", "title": "Reason", "type": "string"}, "verdict": {"description": "the verdict(0/1) of the faithfulness.", "title": "Verdict", "type": "integer"}}, "required": ["statement", "reason", "verdict"], "title": "StatementFaithfulnessAnswer", "type": "object"}}, "properties": {"statements": {"items": {"$ref": "#/$defs/StatementFaithfulnessAnswer"}, "title": "Statements", "type": "array"}}, "required": ["statements"], "title": "NLIStatementOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "context": "John is a student at XYZ University. He is pursuing a degree in Computer Science. He is enrolled in several courses this semester, including Data Structures, Algorithms, and Database Management. John is a diligent student and spends a significant amount of time studying and completing assignments. He often stays late in the library to work on his projects.",\n    "statements": [\n        "John is majoring in Biology.",\n        "John is taking a course on Artificial Intelligence.",\n        "John is a dedicated student.",\n        "John has a part-time job."\n    ]\n}\nOutput: {\n    "statements": [\n        {\n            "statement": "John is majoring in Biology.",\n            "reason": "John\'s major is explicitly mentioned as Computer Science. There is no information suggesting he is majoring in Biology.",\n            "verdict": 0\n        },\n        {\n            "statement": "John is taking a course on Artificial Intelligence.",\n            "reason": "The context mentions the courses John is currently enrolled in, and Artificial Intelligence is not mentioned. Therefore, it cannot be deduced that John is taking a course on AI.",\n            "verdict": 0\n        },\n        {\n            "statement": "John is a dedicated student.",\n            "reason": "The context states that he spends a significant amount of time studying and completing assignments. Additionally, it mentions that he often stays late in the library to work on his projects, which implies dedication.",\n            "verdict": 1\n        },\n        {\n            "statement": "John has a part-time job.",\n            "reason": "There is no information given in the context about John having a part-time job.",\n            "verdict": 0\n        }\n    ]\n}\n\nExample 2\nInput: {\n    "context": "Photosynthesis is a process used by plants, algae, and certain bacteria to convert light energy into chemical energy.",\n    "statements": [\n        "Albert Einstein was a genius."\n    ]\n}\nOutput: {\n    "statements": [\n        {\n            "statement": "Albert Einstein was a genius.",\n            "reason": "The context and statement are unrelated",\n            "verdict": 0\n        }\n    ]\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "context": "Вот что они делают для проверки:\\n• Требуют разъяснения и документы у компании и её контрагентов, аудиторов. Про правила и порядок рассказывают статьи 93, 93.1, 93.2 НК РФ. • Приглашают на беседу в налоговую сотрудников компании и её контрагентов. • Привлекают переводчика, если документы на иностранном языке. • Привлекают экспертов, если нужно исследовать свойства предметов. Например, фармацевтов, профессоров, художников, учителей. Компания может давать своего эксперта. • Осматривают помещения и документы.\\n• Чтобы избежать проблем в будущем, следите за полнотой, корректностью и актуальностью сведений в ЕГРЮЛ. Проверить данные можно скачав выписку на сайте налоговой.\\nЕсли на этом этапе будут несоответствия по одному или нескольким пунктам, налоговики закончат оценку. В компанию придёт выписка с критериями, которым компания не соответствует. Материалы для бизнеса в телеграм-канале Справочной\\nПолучайте ежедневные дайджесты новостей и разборы законов, читайте истории предпринимателей и узнавайте о господдержке для бизнеса\\nЧто будут проверять дальше.",\n    "statements": [\n        "Налоговая проверяет надежность компании путем требования разъяснений и документов от компании и её контрагентов.",\n        "Налоговая требует документы от аудиторов.",\n        "Налоговая также приглашает на беседу сотрудников компании и её контрагентов.",\n        "Налоговая использует переводчика для документов на иностранном языке.",\n        "Налоговая использует экспертов для исследования свойств предметов.",\n        "Экспертами могут быть фармацевты, профессора, художники и учителя.",\n        "Налоговая осматривает помещения и документы компании."\n    ]\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-ab7b9872-f8cb-4b4d-9fbd-e3368bb898c3'}
2025-05-12 05:24:27,284 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:24:27,284 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:24:27,285 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:24:27,285 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:24:27,285 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:24:27,285 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:24:27,382 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:24:38,380 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:24:38 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'10812'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'10816'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9995'), (b'x-ratelimit-remaining-tokens', b'198380'), (b'x-ratelimit-reset-requests', b'39.862s'), (b'x-ratelimit-reset-tokens', b'486ms'), (b'x-request-id', b'req_6f1c6194bd65ef3a9e1c93010071d258'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5c5f2a88e6711-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:24:38,382 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:24:38,382 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:24:38,383 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:24:38,383 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:24:38,383 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:24:38,384 - httpcore.connection - DEBUG - close.started
2025-05-12 05:24:38,384 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:24:38,384 - httpcore.connection - DEBUG - close.started
2025-05-12 05:24:38,384 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:24:38,384 - httpcore.connection - DEBUG - close.started
2025-05-12 05:24:38,384 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:24:38,385 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:24:38 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '10812', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '10816', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9995', 'x-ratelimit-remaining-tokens': '198380', 'x-ratelimit-reset-requests': '39.862s', 'x-ratelimit-reset-tokens': '486ms', 'x-request-id': 'req_6f1c6194bd65ef3a9e1c93010071d258', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5c5f2a88e6711-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:24:38,385 - openai._base_client - DEBUG - request_id: req_6f1c6194bd65ef3a9e1c93010071d258
2025-05-12 05:24:38,399 - ragas._analytics - DEBUG - Flushing triggered for 1 events
2025-05-12 05:24:38,399 - ragas._analytics - DEBUG - Grouped events: {('evaluation', ('faithfulness',), 'SINGLE_TURN'): EvaluationEvent(event_type='evaluation', user_id='a-c57b054261b446ec83e28aea108cead0', ragas_version='0.2.15', metrics=['faithfulness'], num_rows=1, evaluation_type='SINGLE_TURN', language='english')}
2025-05-12 05:24:38,401 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:24:38,425 - ragas._analytics - DEBUG - Flushing triggered for 1 events
2025-05-12 05:24:38,426 - ragas._analytics - DEBUG - Grouped events: {('evaluation', ('faithfulness',), 'SINGLE_TURN'): EvaluationEvent(event_type='evaluation', user_id='a-c57b054261b446ec83e28aea108cead0', ragas_version='0.2.15', metrics=['faithfulness'], num_rows=1, evaluation_type='SINGLE_TURN', language='english')}
2025-05-12 05:24:38,426 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:24:38,841 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:24:38,842 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:24:39,164 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 402 78
2025-05-12 05:24:39,258 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:24:39,258 - evaluate.metrics - DEBUG - Результат RAGAS: {'answer_relevancy': 0.9712, 'faithfulness': 0.8571}
2025-05-12 05:24:39,258 - evaluate.metrics - DEBUG - Тип результата RAGAS: <class 'ragas.dataset_schema.EvaluationResult'>
2025-05-12 05:24:39,258 - evaluate.metrics - DEBUG - Ключи в результате RAGAS: нет ключей
2025-05-12 05:24:39,258 - evaluate.metrics - ERROR - Ошибка при извлечении значений из результата RAGAS: 0
2025-05-12 05:24:39,258 - evaluate.metrics - ERROR - Полный результат RAGAS: {'answer_relevancy': 0.9712, 'faithfulness': 0.8571}
2025-05-12 05:24:39,264 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'Ты - точный оценщик качества ответов. Отвечай только числом от 0 до 1.'}, {'role': 'user', 'content': '\n        Вопрос: Что проверяет налоговая при оценке надежности компании?\n        Ответ: Налоговая проверяет надежность компании путем требования разъяснений и документов от компании и её контрагентов, аудиторов. Они также приглашают на беседу сотрудников компании и её контрагентов, используют переводчика для документов на иностранном языке, а также экспертов для исследования свойств предметов (например, фармацевтов, профессоров, художников, учителей). Кроме того, они осматривают помещения и документы компании.\n\n        Насколько данный ответ релевантен вопросу, независимо от контекста? Ответь одним числом от 0 до 1.\n        '}], 'model': 'gpt-3.5-turbo', 'temperature': 0}, 'idempotency_key': 'stainless-python-retry-298b24fd-e132-4231-8d1d-962840effd0e'}
2025-05-12 05:24:39,264 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:24:39,265 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-05-12 05:24:39,267 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x30b5bd0a0>
2025-05-12 05:24:39,267 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x17b17d430> server_hostname='api.openai.com' timeout=5.0
2025-05-12 05:24:39,483 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x30b5d82e0>
2025-05-12 05:24:39,483 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:24:39,484 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:24:39,484 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:24:39,484 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:24:39,484 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:24:40,022 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:24:39 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'232'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'236'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'199683'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'95ms'), (b'x-request-id', b'req_1f1359d123dc3acbb12498068d4a0204'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=fSBTwcD0YELugRGObJFP1shLTKpZhk_KG_Xz2CSUB2I-1747009479-1.0.1.1-7PPerurTejrX2aS297vM3z9heczPfLLeZbgLvbllZ4d2n8YKvAN.6_Tbk9R3.J589cQlqz_SkI7Ldpwm42VepsV9puUbjnaDj50M2Q28Hm8; path=/; expires=Mon, 12-May-25 00:54:39 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=ZtL_lhNkyLDTeRqlMFmAdw74WHpk0tM_Iri7GKs55YI-1747009479939-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5c63eebd38b43-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:24:40,023 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:24:40,023 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:24:40,024 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:24:40,024 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:24:40,024 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:24:40,024 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:24:39 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '232'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '236'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '199683'), ('x-ratelimit-reset-requests', '8.64s'), ('x-ratelimit-reset-tokens', '95ms'), ('x-request-id', 'req_1f1359d123dc3acbb12498068d4a0204'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=fSBTwcD0YELugRGObJFP1shLTKpZhk_KG_Xz2CSUB2I-1747009479-1.0.1.1-7PPerurTejrX2aS297vM3z9heczPfLLeZbgLvbllZ4d2n8YKvAN.6_Tbk9R3.J589cQlqz_SkI7Ldpwm42VepsV9puUbjnaDj50M2Q28Hm8; path=/; expires=Mon, 12-May-25 00:54:39 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=ZtL_lhNkyLDTeRqlMFmAdw74WHpk0tM_Iri7GKs55YI-1747009479939-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5c63eebd38b43-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:24:40,024 - openai._base_client - DEBUG - request_id: req_1f1359d123dc3acbb12498068d4a0204
2025-05-12 05:24:40,025 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'Ты - точный оценщик качества ответов. Отвечай только числом от 0 до 1.'}, {'role': 'user', 'content': '\n        Ответ: Налоговая проверяет надежность компании путем требования разъяснений и документов от компании и её контрагентов, аудиторов. Они также приглашают на беседу сотрудников компании и её контрагентов, используют переводчика для документов на иностранном языке, а также экспертов для исследования свойств предметов (например, фармацевтов, профессоров, художников, учителей). Кроме того, они осматривают помещения и документы компании.\n        Контекст: Вот что они делают для проверки:\n• Требуют разъяснения и документы у компании и её контрагентов, аудиторов. Про правила и порядок рассказывают статьи 93, 93.1, 93.2 НК РФ. • Приглашают на беседу в налоговую сотрудников компании и её контрагентов. • Привлекают переводчика, если документы на иностранном языке. • Привлекают экспертов, если нужно исследовать свойства предметов. Например, фармацевтов, профессоров, художников, учителей. Компания может давать своего эксперта. • Осматривают помещения и документы. • Чтобы избежать проблем в будущем, следите за полнотой, корректностью и актуальностью сведений в ЕГРЮЛ. Проверить данные можно скачав выписку на сайте налоговой. Если на этом этапе будут несоответствия по одному или нескольким пунктам, налоговики закончат оценку. В компанию придёт выписка с критериями, которым компания не соответствует. Материалы для бизнеса в телеграм-канале Справочной\nПолучайте ежедневные дайджесты новостей и разборы законов, читайте истории предпринимателей и узнавайте о господдержке для бизнеса\nЧто будут проверять дальше.\n\n        Насколько данный ответ соответствует только предоставленному контексту, без добавления лишней информации? Ответь одним числом от 0 до 1.\n        '}], 'model': 'gpt-3.5-turbo', 'temperature': 0}, 'idempotency_key': 'stainless-python-retry-81141476-9160-4447-920f-998ee7853c48'}
2025-05-12 05:24:40,026 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:24:40,026 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:24:40,026 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:24:40,026 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:24:40,026 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:24:40,027 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:24:40,625 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:24:40 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'323'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'331'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9998'), (b'x-ratelimit-remaining-tokens', b'199202'), (b'x-ratelimit-reset-requests', b'16.709s'), (b'x-ratelimit-reset-tokens', b'239ms'), (b'x-request-id', b'req_4a6f45534b1098fb7a901d3481448554'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5c6425d148b43-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:24:40,625 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:24:40,626 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:24:40,632 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:24:40,632 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:24:40,632 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:24:40,632 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:24:40 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '323', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '331', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9998', 'x-ratelimit-remaining-tokens': '199202', 'x-ratelimit-reset-requests': '16.709s', 'x-ratelimit-reset-tokens': '239ms', 'x-request-id': 'req_4a6f45534b1098fb7a901d3481448554', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5c6425d148b43-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:24:40,632 - openai._base_client - DEBUG - request_id: req_4a6f45534b1098fb7a901d3481448554
2025-05-12 05:24:40,633 - evaluate - INFO - Оценка вопроса: Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:24:40,634 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:8000
2025-05-12 05:24:40,929 - urllib3.connectionpool - DEBUG - http://localhost:8000 "POST /token HTTP/1.1" 200 173
2025-05-12 05:24:40,930 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:8000
2025-05-12 05:25:02,017 - urllib3.connectionpool - DEBUG - http://localhost:8000 "POST /ask HTTP/1.1" 200 6162
2025-05-12 05:25:02,019 - evaluate - INFO - Получен ответ от API для вопроса: Как проверить китайского поста...
2025-05-12 05:25:02,019 - evaluate.metrics - DEBUG - Начинаем вычисление ROUGE-L
2025-05-12 05:25:02,020 - absl - INFO - Using default tokenizer.
2025-05-12 05:25:02,020 - evaluate.metrics - DEBUG - ROUGE-L выполнен успешно, значение: 0.0
2025-05-12 05:25:02,020 - evaluate.metrics - DEBUG - Начинаем вычисление BERTScore
2025-05-12 05:25:02,189 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /bert-base-multilingual-cased/resolve/main/tokenizer_config.json HTTP/1.1" 200 0
2025-05-12 05:25:02,426 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /bert-base-multilingual-cased/resolve/main/config.json HTTP/1.1" 200 0
2025-05-12 05:25:05,214 - evaluate.metrics - DEBUG - BERTScore выполнен успешно, значение: 0.6143
2025-05-12 05:25:05,215 - evaluate.metrics - DEBUG - Начинаем вычисление перекрытия контекста
2025-05-12 05:25:05,305 - evaluate.metrics - DEBUG - Перекрытие контекста выполнено успешно. Recall: 1.0, Precision: 1.0
2025-05-12 05:25:05,305 - evaluate.metrics - DEBUG - Начинаем вычисление семантической достоверности (faithfulness)
2025-05-12 05:25:05,355 - evaluate.metrics - DEBUG - Семантическая достоверность выполнена успешно, значение: 0.9313
2025-05-12 05:25:05,355 - evaluate.metrics - INFO - Начинаем вычисление метрик RAGAS
2025-05-12 05:25:05,355 - evaluate.metrics - DEBUG - Подготовка данных для RAGAS
2025-05-12 05:25:05,355 - evaluate.metrics - DEBUG - Создание датасета из данных
2025-05-12 05:25:05,372 - evaluate.metrics - INFO - RAGAS data: {'question': ['Как проверить китайского поставщика перед заключением контракта?'], 'answer': ['Чтобы проверить надёжность китайского поставщика перед заключением контракта, следующие шаги рекомендованы. Сначала необходимо получить документы от поставщика, такие как свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара. Эти документы можно перевести на русский язык при помощи Google Translate, просто указав камеру на документ смартфоном. Если поставщик предоставил все необходимые документы, это может говорить о том, что он надёжный и в работе с ним не будет сюрпризов.\n\nДалее, важно подписать внешнеторговый контракт, который должен содержать все условия сделки, правила разрешения споров и форс-мажорные обстоятельства, которые могут негативно повлиять на исполнение обязательств. Контракт может быть адаптирован под себя по типовому варианту контракта. Обычно он состоит из двух частей на языке покупателя и продавца, чтобы не было разного толкования условий сделки.\n\nКроме того, для наладить общение с китайским поставщиком следует общаться на китайском языке, так как редко встречаются сотрудники фабрик, которые знают иностранные языки даже английский. Для детального обсуждения условий сделки и прописания всего подробно в контракте можно найти переводчика.'], 'contexts': [['Чтобы проверить китайского поставщика, дополнительно запросите:\n• свидетельство о регистрации поставщика в таможенной службе КНР;\n• лицензию КНР на экспорт товара. Лицензии и сертификаты можете перевести на русский через google объектив, наведя камеру смартфона на документ. Если поставщик предоставил все документы, значит, это надёжный поставщик и в работе с ним не будет сюрпризов.', '• Запросите банковские реквизиты и проверьте, чтобы счёт был открыт на компанию, а не на её директора. Подробнее о том, как проверить надёжность поставщика, читайте в статье Справочной. Как провести переговоры\nЧтобы наладить общение с китайским поставщиком, придерживайтесь таких правил:\n• Общайтесь на китайском. На фабриках редко есть сотрудники, которые знают иностранные языки, даже английский. Наймите переводчика, чтобы вы смогли детально обсудить условия сделки и прописать всё подробно в контракте.', '• Запросите регистрационные документы компании и проверьте их данные на сайтах национальных ведомств. • Запросите сведения о товаре: сертификаты качества, технические документы, фото, видео, образцы. • Запросите банковские реквизиты и проверяйте, чтобы счёт был открыт в материковом Китае, а не в Гонконге или Макао. • Не работайте с поставщиком, если он не даёт документы, долго отвечает на вопросы, пишет с разных аккаунтов, предлагает перевести деньги на личный счёт.']], 'ground_truths': [['Проверить адрес, документы, сайт, WeChat, отзывы, запросить сертификаты и реквизиты.']]}
2025-05-12 05:25:05,373 - evaluate.metrics - DEBUG - Метрики RAGAS: [answer_relevancy, faithfulness]
2025-05-12 05:25:05,373 - evaluate.metrics - DEBUG - Запуск evaluate() с RAGAS метриками
2025-05-12 05:25:05,376 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:25:05,783 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:25:05,790 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:25:05,791 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:25:05,796 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:25:05,796 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:25:05,800 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:25:05,800 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:25:05,804 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:25:05,805 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:25:05,817 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Given a question and an answer, analyze the complexity of each sentence in the answer. Break down each sentence into one or more fully understandable statements. Ensure that no pronouns are used in any statement. Format the outputs in JSON.\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"statements": {"description": "The generated statements", "items": {"type": "string"}, "title": "Statements", "type": "array"}}, "required": ["statements"], "title": "StatementGeneratorOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "question": "Who was Albert Einstein and what is he best known for?",\n    "answer": "He was a German-born theoretical physicist, widely acknowledged to be one of the greatest and most influential physicists of all time. He was best known for developing the theory of relativity, he also made important contributions to the development of the theory of quantum mechanics."\n}\nOutput: {\n    "statements": [\n        "Albert Einstein was a German-born theoretical physicist.",\n        "Albert Einstein is recognized as one of the greatest and most influential physicists of all time.",\n        "Albert Einstein was best known for developing the theory of relativity.",\n        "Albert Einstein also made important contributions to the development of the theory of quantum mechanics."\n    ]\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "question": "Как проверить китайского поставщика перед заключением контракта?",\n    "answer": "Чтобы проверить надёжность китайского поставщика перед заключением контракта, следующие шаги рекомендованы. Сначала необходимо получить документы от поставщика, такие как свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара. Эти документы можно перевести на русский язык при помощи Google Translate, просто указав камеру на документ смартфоном. Если поставщик предоставил все необходимые документы, это может говорить о том, что он надёжный и в работе с ним не будет сюрпризов.\\n\\nДалее, важно подписать внешнеторговый контракт, который должен содержать все условия сделки, правила разрешения споров и форс-мажорные обстоятельства, которые могут негативно повлиять на исполнение обязательств. Контракт может быть адаптирован под себя по типовому варианту контракта. Обычно он состоит из двух частей на языке покупателя и продавца, чтобы не было разного толкования условий сделки.\\n\\nКроме того, для наладить общение с китайским поставщиком следует общаться на китайском языке, так как редко встречаются сотрудники фабрик, которые знают иностранные языки даже английский. Для детального обсуждения условий сделки и прописания всего подробно в контракте можно найти переводчика."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-4378eebe-b786-4570-9238-79a63c3c0939'}
2025-05-12 05:25:05,818 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:25:05,819 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:25:05,819 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Generate a question for the given answer and Identify if answer is noncommittal. Give noncommittal as 1 if the answer is noncommittal and 0 if the answer is committal. A noncommittal answer is one that is evasive, vague, or ambiguous. For example, "I don\'t know" or "I\'m not sure" are noncommittal answers\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"question": {"title": "Question", "type": "string"}, "noncommittal": {"title": "Noncommittal", "type": "integer"}}, "required": ["question", "noncommittal"], "title": "ResponseRelevanceOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "response": "Albert Einstein was born in Germany."\n}\nOutput: {\n    "question": "Where was Albert Einstein born?",\n    "noncommittal": 0\n}\n\nExample 2\nInput: {\n    "response": "I don\'t know about the  groundbreaking feature of the smartphone invented in 2023 as am unaware of information beyond 2022. "\n}\nOutput: {\n    "question": "What was the groundbreaking feature of the smartphone invented in 2023?",\n    "noncommittal": 1\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "response": "Чтобы проверить надёжность китайского поставщика перед заключением контракта, следующие шаги рекомендованы. Сначала необходимо получить документы от поставщика, такие как свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара. Эти документы можно перевести на русский язык при помощи Google Translate, просто указав камеру на документ смартфоном. Если поставщик предоставил все необходимые документы, это может говорить о том, что он надёжный и в работе с ним не будет сюрпризов.\\n\\nДалее, важно подписать внешнеторговый контракт, который должен содержать все условия сделки, правила разрешения споров и форс-мажорные обстоятельства, которые могут негативно повлиять на исполнение обязательств. Контракт может быть адаптирован под себя по типовому варианту контракта. Обычно он состоит из двух частей на языке покупателя и продавца, чтобы не было разного толкования условий сделки.\\n\\nКроме того, для наладить общение с китайским поставщиком следует общаться на китайском языке, так как редко встречаются сотрудники фабрик, которые знают иностранные языки даже английский. Для детального обсуждения условий сделки и прописания всего подробно в контракте можно найти переводчика."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-bb120d3f-3357-4717-8c9e-822176c0238e'}
2025-05-12 05:25:05,819 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:25:05,819 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Generate a question for the given answer and Identify if answer is noncommittal. Give noncommittal as 1 if the answer is noncommittal and 0 if the answer is committal. A noncommittal answer is one that is evasive, vague, or ambiguous. For example, "I don\'t know" or "I\'m not sure" are noncommittal answers\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"question": {"title": "Question", "type": "string"}, "noncommittal": {"title": "Noncommittal", "type": "integer"}}, "required": ["question", "noncommittal"], "title": "ResponseRelevanceOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "response": "Albert Einstein was born in Germany."\n}\nOutput: {\n    "question": "Where was Albert Einstein born?",\n    "noncommittal": 0\n}\n\nExample 2\nInput: {\n    "response": "I don\'t know about the  groundbreaking feature of the smartphone invented in 2023 as am unaware of information beyond 2022. "\n}\nOutput: {\n    "question": "What was the groundbreaking feature of the smartphone invented in 2023?",\n    "noncommittal": 1\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "response": "Чтобы проверить надёжность китайского поставщика перед заключением контракта, следующие шаги рекомендованы. Сначала необходимо получить документы от поставщика, такие как свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара. Эти документы можно перевести на русский язык при помощи Google Translate, просто указав камеру на документ смартфоном. Если поставщик предоставил все необходимые документы, это может говорить о том, что он надёжный и в работе с ним не будет сюрпризов.\\n\\nДалее, важно подписать внешнеторговый контракт, который должен содержать все условия сделки, правила разрешения споров и форс-мажорные обстоятельства, которые могут негативно повлиять на исполнение обязательств. Контракт может быть адаптирован под себя по типовому варианту контракта. Обычно он состоит из двух частей на языке покупателя и продавца, чтобы не было разного толкования условий сделки.\\n\\nКроме того, для наладить общение с китайским поставщиком следует общаться на китайском языке, так как редко встречаются сотрудники фабрик, которые знают иностранные языки даже английский. Для детального обсуждения условий сделки и прописания всего подробно в контракте можно найти переводчика."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-d041223f-c7c2-4b02-a5ac-1336c9613ebd'}
2025-05-12 05:25:05,820 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:25:05,820 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Generate a question for the given answer and Identify if answer is noncommittal. Give noncommittal as 1 if the answer is noncommittal and 0 if the answer is committal. A noncommittal answer is one that is evasive, vague, or ambiguous. For example, "I don\'t know" or "I\'m not sure" are noncommittal answers\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"question": {"title": "Question", "type": "string"}, "noncommittal": {"title": "Noncommittal", "type": "integer"}}, "required": ["question", "noncommittal"], "title": "ResponseRelevanceOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "response": "Albert Einstein was born in Germany."\n}\nOutput: {\n    "question": "Where was Albert Einstein born?",\n    "noncommittal": 0\n}\n\nExample 2\nInput: {\n    "response": "I don\'t know about the  groundbreaking feature of the smartphone invented in 2023 as am unaware of information beyond 2022. "\n}\nOutput: {\n    "question": "What was the groundbreaking feature of the smartphone invented in 2023?",\n    "noncommittal": 1\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "response": "Чтобы проверить надёжность китайского поставщика перед заключением контракта, следующие шаги рекомендованы. Сначала необходимо получить документы от поставщика, такие как свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара. Эти документы можно перевести на русский язык при помощи Google Translate, просто указав камеру на документ смартфоном. Если поставщик предоставил все необходимые документы, это может говорить о том, что он надёжный и в работе с ним не будет сюрпризов.\\n\\nДалее, важно подписать внешнеторговый контракт, который должен содержать все условия сделки, правила разрешения споров и форс-мажорные обстоятельства, которые могут негативно повлиять на исполнение обязательств. Контракт может быть адаптирован под себя по типовому варианту контракта. Обычно он состоит из двух частей на языке покупателя и продавца, чтобы не было разного толкования условий сделки.\\n\\nКроме того, для наладить общение с китайским поставщиком следует общаться на китайском языке, так как редко встречаются сотрудники фабрик, которые знают иностранные языки даже английский. Для детального обсуждения условий сделки и прописания всего подробно в контракте можно найти переводчика."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-38e2b17d-2706-4a5c-a656-8bfb657d5b87'}
2025-05-12 05:25:05,820 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:25:05,820 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:25:05,821 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:25:05,821 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:25:05,897 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x30f8d58e0>
2025-05-12 05:25:05,897 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x30b570cf0> server_hostname='api.openai.com' timeout=None
2025-05-12 05:25:05,897 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x170428550>
2025-05-12 05:25:05,897 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x30b570cf0> server_hostname='api.openai.com' timeout=None
2025-05-12 05:25:05,898 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x30b5bf280>
2025-05-12 05:25:05,898 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x30b570cf0> server_hostname='api.openai.com' timeout=None
2025-05-12 05:25:05,898 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x170428f10>
2025-05-12 05:25:05,898 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x30b570cf0> server_hostname='api.openai.com' timeout=None
2025-05-12 05:25:06,209 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x30b53c6a0>
2025-05-12 05:25:06,210 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:25:06,210 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:25:06,210 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:25:06,211 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x170421910>
2025-05-12 05:25:06,211 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:25:06,211 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:25:06,211 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:25:06,212 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:25:06,212 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:25:06,212 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:25:06,212 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:25:06,217 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x30f8d5fa0>
2025-05-12 05:25:06,217 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:25:06,217 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:25:06,217 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:25:06,218 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:25:06,218 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:25:06,218 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x170421f70>
2025-05-12 05:25:06,218 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:25:06,219 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:25:06,219 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:25:06,219 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:25:06,219 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:25:07,449 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:25:07 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'967'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'970'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9995'), (b'x-ratelimit-remaining-tokens', b'196383'), (b'x-ratelimit-reset-requests', b'35.502s'), (b'x-ratelimit-reset-tokens', b'1.084s'), (b'x-request-id', b'req_1a4c969df14953eae93cb14b8088d84f'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=nClvd1JsNLXc7RDSAMpFcEOMieaJLPB0YFA7gSBrHJk-1747009507-1.0.1.1-qfP8Aa.Ikdc.vcuOUH5Ns_28xgWClKSRWjAqUnJ3NU9YwAvAXBCrVkGCKFfAfEwyms5_C0eKtJCWYL9v9r.Aagm0EtT3k0C1bqwTHxYe.pc; path=/; expires=Mon, 12-May-25 00:55:07 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=kgsF07wWwm5XRcWsnqCyS5EbP5O9ZqMTKUJ0ghA0D0E-1747009507401-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5c6e608dd9b4e-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:25:07,450 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:25:07,450 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:25:07,450 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:25:07 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'971'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'979'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9997'), (b'x-ratelimit-remaining-tokens', b'198151'), (b'x-ratelimit-reset-requests', b'18.224s'), (b'x-ratelimit-reset-tokens', b'554ms'), (b'x-request-id', b'req_3692f44d8602d3e622cd6cabbefe96b7'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=EMew.S78VWqmdxgRAjbYeXga5j4W28WFWnCQEXrb4hU-1747009507-1.0.1.1-pX45eGYScfgvDxFA2wNI7RcKIJfohWYe8Ksl0HyTodl.Q_hN63O1iDZOYZR.ZU4SwRs4SEZT4QiRq69APumdAfMkUvHh_G6pM_9_FlT0UAw; path=/; expires=Mon, 12-May-25 00:55:07 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=xV7ml_FnyzNWob4gJrw9ECryzVJtVIZHMj6XPjJPmDs-1747009507405-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5c6e60ee50d28-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:25:07,451 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:25:07,451 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:25:07,451 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:25:07,452 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:25:07,452 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:25:07,452 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:25:07 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '967'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '970'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9995'), ('x-ratelimit-remaining-tokens', '196383'), ('x-ratelimit-reset-requests', '35.502s'), ('x-ratelimit-reset-tokens', '1.084s'), ('x-request-id', 'req_1a4c969df14953eae93cb14b8088d84f'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=nClvd1JsNLXc7RDSAMpFcEOMieaJLPB0YFA7gSBrHJk-1747009507-1.0.1.1-qfP8Aa.Ikdc.vcuOUH5Ns_28xgWClKSRWjAqUnJ3NU9YwAvAXBCrVkGCKFfAfEwyms5_C0eKtJCWYL9v9r.Aagm0EtT3k0C1bqwTHxYe.pc; path=/; expires=Mon, 12-May-25 00:55:07 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=kgsF07wWwm5XRcWsnqCyS5EbP5O9ZqMTKUJ0ghA0D0E-1747009507401-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5c6e608dd9b4e-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:25:07,452 - openai._base_client - DEBUG - request_id: req_1a4c969df14953eae93cb14b8088d84f
2025-05-12 05:25:07,454 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:25:07,454 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:25:07,454 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:25:07,454 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:25:07 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '971'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '979'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9997'), ('x-ratelimit-remaining-tokens', '198151'), ('x-ratelimit-reset-requests', '18.224s'), ('x-ratelimit-reset-tokens', '554ms'), ('x-request-id', 'req_3692f44d8602d3e622cd6cabbefe96b7'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=EMew.S78VWqmdxgRAjbYeXga5j4W28WFWnCQEXrb4hU-1747009507-1.0.1.1-pX45eGYScfgvDxFA2wNI7RcKIJfohWYe8Ksl0HyTodl.Q_hN63O1iDZOYZR.ZU4SwRs4SEZT4QiRq69APumdAfMkUvHh_G6pM_9_FlT0UAw; path=/; expires=Mon, 12-May-25 00:55:07 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=xV7ml_FnyzNWob4gJrw9ECryzVJtVIZHMj6XPjJPmDs-1747009507405-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5c6e60ee50d28-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:25:07,454 - openai._base_client - DEBUG - request_id: req_3692f44d8602d3e622cd6cabbefe96b7
2025-05-12 05:25:07,477 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:25:07 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'992'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'996'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9996'), (b'x-ratelimit-remaining-tokens', b'197265'), (b'x-ratelimit-reset-requests', b'26.863s'), (b'x-ratelimit-reset-tokens', b'820ms'), (b'x-request-id', b'req_cf406ae19c4d4e3e1ba3ae7e20fe318c'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=VlpMYlqDqFUvtIgOVn9pGiPI2r_ixJt8sbSU.sTqAsk-1747009507-1.0.1.1-__PAcT_C.tbkNkrRgS8xTyE5NSF87FP8pnLmfGlZOOlIOPrpv6H5Si1qKtWahucRfA10CmbRAbRLoAUMyACnMkq0tNuOHfbN2tN8PPqpO04; path=/; expires=Mon, 12-May-25 00:55:07 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=.PZwo_W5e41o9Q1mORKL9IgHbLVQDpMsECb7THLWiJk-1747009507428-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5c6e609c3def8-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:25:07,478 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:25:07,478 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:25:07,478 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:25:07,478 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:25:07,479 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:25:07,479 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:25:07 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '992'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '996'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9996'), ('x-ratelimit-remaining-tokens', '197265'), ('x-ratelimit-reset-requests', '26.863s'), ('x-ratelimit-reset-tokens', '820ms'), ('x-request-id', 'req_cf406ae19c4d4e3e1ba3ae7e20fe318c'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=VlpMYlqDqFUvtIgOVn9pGiPI2r_ixJt8sbSU.sTqAsk-1747009507-1.0.1.1-__PAcT_C.tbkNkrRgS8xTyE5NSF87FP8pnLmfGlZOOlIOPrpv6H5Si1qKtWahucRfA10CmbRAbRLoAUMyACnMkq0tNuOHfbN2tN8PPqpO04; path=/; expires=Mon, 12-May-25 00:55:07 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=.PZwo_W5e41o9Q1mORKL9IgHbLVQDpMsECb7THLWiJk-1747009507428-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5c6e609c3def8-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:25:07,479 - openai._base_client - DEBUG - request_id: req_cf406ae19c4d4e3e1ba3ae7e20fe318c
2025-05-12 05:25:07,484 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'post_parser': <function Embeddings.create.<locals>.parser at 0x30b5ce5e0>, 'json_data': {'input': [[27435, 16248, 69556, 18264, 7820, 9542, 19039, 66144, 22885, 18154, 68374, 14476, 75281, 78757, 59313, 40571, 9882, 10298, 78085, 11001, 118, 44613, 30]], 'model': 'text-embedding-ada-002', 'encoding_format': 'base64'}, 'idempotency_key': 'stainless-python-retry-eb19d955-cd79-4dcf-9332-f43bb3bd6a29'}
2025-05-12 05:25:07,485 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/embeddings
2025-05-12 05:25:07,485 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:25:07,486 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x17041aa30>
2025-05-12 05:25:07,486 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x30b3b7890> server_hostname='api.openai.com' timeout=None
2025-05-12 05:25:07,708 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x17041ae20>
2025-05-12 05:25:07,709 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:25:07,709 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:25:07,709 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:25:07,709 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:25:07,709 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:25:08,732 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:25:08 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-model', b'text-embedding-ada-002-v2'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'152'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'via', b'envoy-router-76bf7d8494-gg44x'), (b'x-envoy-upstream-service-time', b'156'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'1000000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'999977'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'1ms'), (b'x-request-id', b'req_b6dcc4fcdc99634ee04317840d66d55d'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=1uOJr7XMt7RTR_v42uhNLwSuaD0oDQfeNlmTIA1FGXA-1747009508-1.0.1.1-h_KNLZTJKP4eWHkwU72GiTrmtUj73_ZSBezqfwkds37k.rXtlmkf6nqDsrvvRROOP5tEXLEcODea3rISYdFDwZ_FkUmVL1nvyUQ5SeVV_bU; path=/; expires=Mon, 12-May-25 00:55:08 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=kYcSdC8FShXW5y5OezXNAWVZ3AF9_1M_TLBkp5vFPYU-1747009508683-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5c6ef5fc1dfd3-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:25:08,733 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 05:25:08,733 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:25:08,733 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:25:08,733 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:25:08,733 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:25:08,733 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/embeddings "200 OK" Headers([('date', 'Mon, 12 May 2025 00:25:08 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-allow-origin', '*'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-model', 'text-embedding-ada-002-v2'), ('openai-organization', 'tochka'), ('openai-processing-ms', '152'), ('openai-version', '2020-10-01'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('via', 'envoy-router-76bf7d8494-gg44x'), ('x-envoy-upstream-service-time', '156'), ('x-ratelimit-limit-requests', '3000'), ('x-ratelimit-limit-tokens', '1000000'), ('x-ratelimit-remaining-requests', '2999'), ('x-ratelimit-remaining-tokens', '999977'), ('x-ratelimit-reset-requests', '20ms'), ('x-ratelimit-reset-tokens', '1ms'), ('x-request-id', 'req_b6dcc4fcdc99634ee04317840d66d55d'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=1uOJr7XMt7RTR_v42uhNLwSuaD0oDQfeNlmTIA1FGXA-1747009508-1.0.1.1-h_KNLZTJKP4eWHkwU72GiTrmtUj73_ZSBezqfwkds37k.rXtlmkf6nqDsrvvRROOP5tEXLEcODea3rISYdFDwZ_FkUmVL1nvyUQ5SeVV_bU; path=/; expires=Mon, 12-May-25 00:55:08 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=kYcSdC8FShXW5y5OezXNAWVZ3AF9_1M_TLBkp5vFPYU-1747009508683-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5c6ef5fc1dfd3-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:25:08,733 - openai._base_client - DEBUG - request_id: req_b6dcc4fcdc99634ee04317840d66d55d
2025-05-12 05:25:08,735 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'post_parser': <function Embeddings.create.<locals>.parser at 0x30b5ce5e0>, 'json_data': {'input': [[27435, 16248, 50306, 55617, 34493, 1840, 77083, 13999, 57925, 8164, 2233, 19479, 94975, 20440, 69556, 17165, 6850, 23680, 45122, 17394, 68742, 7820, 9542, 19039, 66144, 22885, 18154, 68374, 14476, 75281, 78757, 59313, 40571, 9882, 10298, 78085, 11001, 118, 44613, 30], [27435, 16248, 50306, 55617, 34493, 1840, 77083, 13999, 57925, 8164, 2233, 19479, 94975, 20440, 69556, 17165, 6850, 23680, 45122, 17394, 68742, 7820, 9542, 19039, 66144, 22885, 18154, 68374, 14476, 75281, 78757, 59313, 40571, 9882, 10298, 78085, 11001, 118, 44613, 30], [27435, 16248, 50306, 55617, 34493, 1840, 77083, 13999, 57925, 8164, 2233, 19479, 94975, 20440, 69556, 17165, 6850, 23680, 45122, 17394, 68742, 7820, 9542, 19039, 66144, 22885, 18154, 68374, 14476, 75281, 78757, 59313, 40571, 9882, 10298, 78085, 11001, 118, 44613, 30]], 'model': 'text-embedding-ada-002', 'encoding_format': 'base64'}, 'idempotency_key': 'stainless-python-retry-291adba7-7ac1-47e4-9147-c48a242272c4'}
2025-05-12 05:25:08,735 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/embeddings
2025-05-12 05:25:08,735 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:25:08,735 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:25:08,735 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:25:08,736 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:25:08,736 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:25:09,107 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:25:08 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-model', b'text-embedding-ada-002-v2'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'57'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'via', b'envoy-router-7db5469759-sq4wb'), (b'x-envoy-upstream-service-time', b'61'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'1000000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'999880'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'7ms'), (b'x-request-id', b'req_b35717dc58b4e4209047a9c46e6b795b'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5c6f5cdefdfd3-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:25:09,108 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 05:25:09,108 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:25:09,129 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:25:09,129 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:25:09,129 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:25:09,129 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/embeddings "200 OK" Headers({'date': 'Mon, 12 May 2025 00:25:08 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Request-ID', 'openai-model': 'text-embedding-ada-002-v2', 'openai-organization': 'tochka', 'openai-processing-ms': '57', 'openai-version': '2020-10-01', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'via': 'envoy-router-7db5469759-sq4wb', 'x-envoy-upstream-service-time': '61', 'x-ratelimit-limit-requests': '3000', 'x-ratelimit-limit-tokens': '1000000', 'x-ratelimit-remaining-requests': '2999', 'x-ratelimit-remaining-tokens': '999880', 'x-ratelimit-reset-requests': '20ms', 'x-ratelimit-reset-tokens': '7ms', 'x-request-id': 'req_b35717dc58b4e4209047a9c46e6b795b', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5c6f5cdefdfd3-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:25:09,130 - openai._base_client - DEBUG - request_id: req_b35717dc58b4e4209047a9c46e6b795b
2025-05-12 05:25:09,270 - ragas._analytics - DEBUG - Flushing triggered for 1 events
2025-05-12 05:25:09,271 - ragas._analytics - DEBUG - Grouped events: {('evaluation', ('answer_relevancy',), 'SINGLE_TURN'): EvaluationEvent(event_type='evaluation', user_id='a-c57b054261b446ec83e28aea108cead0', ragas_version='0.2.15', metrics=['answer_relevancy'], num_rows=1, evaluation_type='SINGLE_TURN', language='english')}
2025-05-12 05:25:09,272 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:25:09,694 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:25:13,055 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:25:13 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'6576'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'6580'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9998'), (b'x-ratelimit-remaining-tokens', b'199005'), (b'x-ratelimit-reset-requests', b'9.594s'), (b'x-ratelimit-reset-tokens', b'298ms'), (b'x-request-id', b'req_2c321a744a280ac20480a00422546a70'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=rlE.lZWbsgELZwbosks4JzAuLpV9EHV.leWdOL782Tc-1747009513-1.0.1.1-mTQzEL8dwFWTqrZOQ2uXO0gYcfDzQBM7HqXn2pPB_OrYFyZw9Hz9ey3eQBz2xb_NDLoW0_9QKlZT3GU21l0N3n27d07PU8fArKqmKFVBZL0; path=/; expires=Mon, 12-May-25 00:55:13 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=CIFOgu5EyAyVuTZ.ZKCpWj5WQK4jh.LqZS36igruiJo-1747009513005-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5c6e5fdbbc148-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:25:13,059 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:25:13,060 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:25:13,060 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:25:13,061 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:25:13,061 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:25:13,061 - httpcore.connection - DEBUG - close.started
2025-05-12 05:25:13,061 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:25:13,061 - httpcore.connection - DEBUG - close.started
2025-05-12 05:25:13,061 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:25:13,062 - httpcore.connection - DEBUG - close.started
2025-05-12 05:25:13,062 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:25:13,062 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:25:13 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '6576'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '6580'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9998'), ('x-ratelimit-remaining-tokens', '199005'), ('x-ratelimit-reset-requests', '9.594s'), ('x-ratelimit-reset-tokens', '298ms'), ('x-request-id', 'req_2c321a744a280ac20480a00422546a70'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=rlE.lZWbsgELZwbosks4JzAuLpV9EHV.leWdOL782Tc-1747009513-1.0.1.1-mTQzEL8dwFWTqrZOQ2uXO0gYcfDzQBM7HqXn2pPB_OrYFyZw9Hz9ey3eQBz2xb_NDLoW0_9QKlZT3GU21l0N3n27d07PU8fArKqmKFVBZL0; path=/; expires=Mon, 12-May-25 00:55:13 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=CIFOgu5EyAyVuTZ.ZKCpWj5WQK4jh.LqZS36igruiJo-1747009513005-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5c6e5fdbbc148-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:25:13,062 - openai._base_client - DEBUG - request_id: req_2c321a744a280ac20480a00422546a70
2025-05-12 05:25:13,073 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Your task is to judge the faithfulness of a series of statements based on a given context. For each statement you must return verdict as 1 if the statement can be directly inferred based on the context or 0 if the statement can not be directly inferred based on the context.\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"$defs": {"StatementFaithfulnessAnswer": {"properties": {"statement": {"description": "the original statement, word-by-word", "title": "Statement", "type": "string"}, "reason": {"description": "the reason of the verdict", "title": "Reason", "type": "string"}, "verdict": {"description": "the verdict(0/1) of the faithfulness.", "title": "Verdict", "type": "integer"}}, "required": ["statement", "reason", "verdict"], "title": "StatementFaithfulnessAnswer", "type": "object"}}, "properties": {"statements": {"items": {"$ref": "#/$defs/StatementFaithfulnessAnswer"}, "title": "Statements", "type": "array"}}, "required": ["statements"], "title": "NLIStatementOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "context": "John is a student at XYZ University. He is pursuing a degree in Computer Science. He is enrolled in several courses this semester, including Data Structures, Algorithms, and Database Management. John is a diligent student and spends a significant amount of time studying and completing assignments. He often stays late in the library to work on his projects.",\n    "statements": [\n        "John is majoring in Biology.",\n        "John is taking a course on Artificial Intelligence.",\n        "John is a dedicated student.",\n        "John has a part-time job."\n    ]\n}\nOutput: {\n    "statements": [\n        {\n            "statement": "John is majoring in Biology.",\n            "reason": "John\'s major is explicitly mentioned as Computer Science. There is no information suggesting he is majoring in Biology.",\n            "verdict": 0\n        },\n        {\n            "statement": "John is taking a course on Artificial Intelligence.",\n            "reason": "The context mentions the courses John is currently enrolled in, and Artificial Intelligence is not mentioned. Therefore, it cannot be deduced that John is taking a course on AI.",\n            "verdict": 0\n        },\n        {\n            "statement": "John is a dedicated student.",\n            "reason": "The context states that he spends a significant amount of time studying and completing assignments. Additionally, it mentions that he often stays late in the library to work on his projects, which implies dedication.",\n            "verdict": 1\n        },\n        {\n            "statement": "John has a part-time job.",\n            "reason": "There is no information given in the context about John having a part-time job.",\n            "verdict": 0\n        }\n    ]\n}\n\nExample 2\nInput: {\n    "context": "Photosynthesis is a process used by plants, algae, and certain bacteria to convert light energy into chemical energy.",\n    "statements": [\n        "Albert Einstein was a genius."\n    ]\n}\nOutput: {\n    "statements": [\n        {\n            "statement": "Albert Einstein was a genius.",\n            "reason": "The context and statement are unrelated",\n            "verdict": 0\n        }\n    ]\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "context": "Чтобы проверить китайского поставщика, дополнительно запросите:\\n• свидетельство о регистрации поставщика в таможенной службе КНР;\\n• лицензию КНР на экспорт товара. Лицензии и сертификаты можете перевести на русский через google объектив, наведя камеру смартфона на документ. Если поставщик предоставил все документы, значит, это надёжный поставщик и в работе с ним не будет сюрпризов.\\n• Запросите банковские реквизиты и проверьте, чтобы счёт был открыт на компанию, а не на её директора. Подробнее о том, как проверить надёжность поставщика, читайте в статье Справочной. Как провести переговоры\\nЧтобы наладить общение с китайским поставщиком, придерживайтесь таких правил:\\n• Общайтесь на китайском. На фабриках редко есть сотрудники, которые знают иностранные языки, даже английский. Наймите переводчика, чтобы вы смогли детально обсудить условия сделки и прописать всё подробно в контракте.\\n• Запросите регистрационные документы компании и проверьте их данные на сайтах национальных ведомств. • Запросите сведения о товаре: сертификаты качества, технические документы, фото, видео, образцы. • Запросите банковские реквизиты и проверяйте, чтобы счёт был открыт в материковом Китае, а не в Гонконге или Макао. • Не работайте с поставщиком, если он не даёт документы, долго отвечает на вопросы, пишет с разных аккаунтов, предлагает перевести деньги на личный счёт.",\n    "statements": [\n        "Для проверки надёжности китайского поставщика перед заключением контракта рекомендованы следующие шаги.",\n        "Необходимо получить документы от китайского поставщика.",\n        "Документы от китайского поставщика могут включать свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара.",\n        "Документы можно перевести на русский язык с помощью Google Translate.",\n        "Для перевода документов следует указать камеру на документ смартфоном.",\n        "Если китайский поставщик предоставил все необходимые документы, это может свидетельствовать о его надёжности.",\n        "Работа с надёжным поставщиком не будет сопровождаться сюрпризами.",\n        "Важно подписать внешнеторговый контракт.",\n        "Внешнеторговый контракт должен содержать все условия сделки.",\n        "Внешнеторговый контракт должен содержать правила разрешения споров.",\n        "Внешнеторговый контракт должен содержать форс-мажорные обстоятельства, которые могут негативно повлиять на исполнение обязательств.",\n        "Контракт может быть адаптирован под себя по типовому варианту контракта.",\n        "Обычно контракт состоит из двух частей на языке покупателя и продавца.",\n        "Две части контракта помогают избежать разного толкования условий сделки.",\n        "Для налаживания общения с китайским поставщиком следует общаться на китайском языке.",\n        "Сотрудники фабрик редко знают иностранные языки, включая английский.",\n        "Для детального обсуждения условий сделки можно найти переводчика.",\n        "Переводчик поможет прописать все подробно в контракте."\n    ]\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-57c9108d-da74-45fb-ad1e-6c2db0b11baa'}
2025-05-12 05:25:13,075 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:25:13,075 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:25:13,075 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:25:13,076 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:25:13,076 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:25:13,076 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:25:40,909 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:25:40 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'27533'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'27536'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9995'), (b'x-ratelimit-remaining-tokens', b'197790'), (b'x-ratelimit-reset-requests', b'37.259s'), (b'x-ratelimit-reset-tokens', b'663ms'), (b'x-request-id', b'req_c75c738b77361cde667a68cf1fee47b1'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5c710eb33c148-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:25:40,912 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:25:40,913 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:25:40,914 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:25:40,914 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:25:40,914 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:25:40,915 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:25:40 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '27533', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '27536', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9995', 'x-ratelimit-remaining-tokens': '197790', 'x-ratelimit-reset-requests': '37.259s', 'x-ratelimit-reset-tokens': '663ms', 'x-request-id': 'req_c75c738b77361cde667a68cf1fee47b1', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5c710eb33c148-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:25:40,915 - openai._base_client - DEBUG - request_id: req_c75c738b77361cde667a68cf1fee47b1
2025-05-12 05:25:40,932 - ragas._analytics - DEBUG - Flushing triggered for 1 events
2025-05-12 05:25:40,932 - ragas._analytics - DEBUG - Grouped events: {('evaluation', ('faithfulness',), 'SINGLE_TURN'): EvaluationEvent(event_type='evaluation', user_id='a-c57b054261b446ec83e28aea108cead0', ragas_version='0.2.15', metrics=['faithfulness'], num_rows=1, evaluation_type='SINGLE_TURN', language='english')}
2025-05-12 05:25:40,935 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:25:41,460 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:25:41,462 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:25:41,874 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:25:41,874 - evaluate.metrics - DEBUG - Результат RAGAS: {'answer_relevancy': 0.9604, 'faithfulness': 0.6111}
2025-05-12 05:25:41,874 - evaluate.metrics - DEBUG - Тип результата RAGAS: <class 'ragas.dataset_schema.EvaluationResult'>
2025-05-12 05:25:41,874 - evaluate.metrics - DEBUG - Ключи в результате RAGAS: нет ключей
2025-05-12 05:25:41,874 - evaluate.metrics - ERROR - Ошибка при извлечении значений из результата RAGAS: 0
2025-05-12 05:25:41,874 - evaluate.metrics - ERROR - Полный результат RAGAS: {'answer_relevancy': 0.9604, 'faithfulness': 0.6111}
2025-05-12 05:25:41,875 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'Ты - точный оценщик качества ответов. Отвечай только числом от 0 до 1.'}, {'role': 'user', 'content': '\n        Вопрос: Как проверить китайского поставщика перед заключением контракта?\n        Ответ: Чтобы проверить надёжность китайского поставщика перед заключением контракта, следующие шаги рекомендованы. Сначала необходимо получить документы от поставщика, такие как свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара. Эти документы можно перевести на русский язык при помощи Google Translate, просто указав камеру на документ смартфоном. Если поставщик предоставил все необходимые документы, это может говорить о том, что он надёжный и в работе с ним не будет сюрпризов.\n\nДалее, важно подписать внешнеторговый контракт, который должен содержать все условия сделки, правила разрешения споров и форс-мажорные обстоятельства, которые могут негативно повлиять на исполнение обязательств. Контракт может быть адаптирован под себя по типовому варианту контракта. Обычно он состоит из двух частей на языке покупателя и продавца, чтобы не было разного толкования условий сделки.\n\nКроме того, для наладить общение с китайским поставщиком следует общаться на китайском языке, так как редко встречаются сотрудники фабрик, которые знают иностранные языки даже английский. Для детального обсуждения условий сделки и прописания всего подробно в контракте можно найти переводчика.\n\n        Насколько данный ответ релевантен вопросу, независимо от контекста? Ответь одним числом от 0 до 1.\n        '}], 'model': 'gpt-3.5-turbo', 'temperature': 0}, 'idempotency_key': 'stainless-python-retry-29a5ccb0-9dc4-47bc-90ff-7494ba9ebad3'}
2025-05-12 05:25:41,876 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:25:41,876 - httpcore.connection - DEBUG - close.started
2025-05-12 05:25:41,876 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:25:41,876 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-05-12 05:25:41,953 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x318d94760>
2025-05-12 05:25:41,953 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x17b17d430> server_hostname='api.openai.com' timeout=5.0
2025-05-12 05:25:42,162 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x318d90f40>
2025-05-12 05:25:42,162 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:25:42,163 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:25:42,163 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:25:42,163 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:25:42,163 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:25:42,800 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:25:42 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'276'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'280'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'199326'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'202ms'), (b'x-request-id', b'req_8642bede2e9df06cef4e19aeb99c3ddc'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5c7c6afb2ad10-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:25:42,801 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:25:42,801 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:25:42,801 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:25:42,802 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:25:42,802 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:25:42,802 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:25:42 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '276', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '280', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '199326', 'x-ratelimit-reset-requests': '8.64s', 'x-ratelimit-reset-tokens': '202ms', 'x-request-id': 'req_8642bede2e9df06cef4e19aeb99c3ddc', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5c7c6afb2ad10-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:25:42,802 - openai._base_client - DEBUG - request_id: req_8642bede2e9df06cef4e19aeb99c3ddc
2025-05-12 05:25:42,803 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'Ты - точный оценщик качества ответов. Отвечай только числом от 0 до 1.'}, {'role': 'user', 'content': '\n        Ответ: Чтобы проверить надёжность китайского поставщика перед заключением контракта, следующие шаги рекомендованы. Сначала необходимо получить документы от поставщика, такие как свидетельство о регистрации в таможенной службе КНР и лицензию на экспорт товара. Эти документы можно перевести на русский язык при помощи Google Translate, просто указав камеру на документ смартфоном. Если поставщик предоставил все необходимые документы, это может говорить о том, что он надёжный и в работе с ним не будет сюрпризов.\n\nДалее, важно подписать внешнеторговый контракт, который должен содержать все условия сделки, правила разрешения споров и форс-мажорные обстоятельства, которые могут негативно повлиять на исполнение обязательств. Контракт может быть адаптирован под себя по типовому варианту контракта. Обычно он состоит из двух частей на языке покупателя и продавца, чтобы не было разного толкования условий сделки.\n\nКроме того, для наладить общение с китайским поставщиком следует общаться на китайском языке, так как редко встречаются сотрудники фабрик, которые знают иностранные языки даже английский. Для детального обсуждения условий сделки и прописания всего подробно в контракте можно найти переводчика.\n        Контекст: Чтобы проверить китайского поставщика, дополнительно запросите:\n• свидетельство о регистрации поставщика в таможенной службе КНР;\n• лицензию КНР на экспорт товара. Лицензии и сертификаты можете перевести на русский через google объектив, наведя камеру смартфона на документ. Если поставщик предоставил все документы, значит, это надёжный поставщик и в работе с ним не будет сюрпризов. • Запросите банковские реквизиты и проверьте, чтобы счёт был открыт на компанию, а не на её директора. Подробнее о том, как проверить надёжность поставщика, читайте в статье Справочной. Как провести переговоры\nЧтобы наладить общение с китайским поставщиком, придерживайтесь таких правил:\n• Общайтесь на китайском. На фабриках редко есть сотрудники, которые знают иностранные языки, даже английский. Наймите переводчика, чтобы вы смогли детально обсудить условия сделки и прописать всё подробно в контракте. • Запросите регистрационные документы компании и проверьте их данные на сайтах национальных ведомств. • Запросите сведения о товаре: сертификаты качества, технические документы, фото, видео, образцы. • Запросите банковские реквизиты и проверяйте, чтобы счёт был открыт в материковом Китае, а не в Гонконге или Макао. • Не работайте с поставщиком, если он не даёт документы, долго отвечает на вопросы, пишет с разных аккаунтов, предлагает перевести деньги на личный счёт.\n\n        Насколько данный ответ соответствует только предоставленному контексту, без добавления лишней информации? Ответь одним числом от 0 до 1.\n        '}], 'model': 'gpt-3.5-turbo', 'temperature': 0}, 'idempotency_key': 'stainless-python-retry-1eaf6183-f96b-4c52-a1f3-6b2fde20ab7c'}
2025-05-12 05:25:42,805 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:25:42,805 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:25:42,806 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:25:42,806 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:25:42,806 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:25:42,806 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:25:43,381 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:25:43 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'310'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'314'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9998'), (b'x-ratelimit-remaining-tokens', b'198712'), (b'x-ratelimit-reset-requests', b'16.645s'), (b'x-ratelimit-reset-tokens', b'386ms'), (b'x-request-id', b'req_7e1370d8eb083d61005137cc90261d23'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5c7cabb62ad10-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:25:43,381 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:25:43,381 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:25:43,386 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:25:43,386 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:25:43,387 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:25:43,387 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:25:43 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '310', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '314', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9998', 'x-ratelimit-remaining-tokens': '198712', 'x-ratelimit-reset-requests': '16.645s', 'x-ratelimit-reset-tokens': '386ms', 'x-request-id': 'req_7e1370d8eb083d61005137cc90261d23', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5c7cabb62ad10-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:25:43,387 - openai._base_client - DEBUG - request_id: req_7e1370d8eb083d61005137cc90261d23
2025-05-12 05:25:43,387 - evaluate - INFO - Оценка вопроса: Как можно проверить подлинность диплома в России?
2025-05-12 05:25:43,389 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:8000
2025-05-12 05:25:43,661 - urllib3.connectionpool - DEBUG - http://localhost:8000 "POST /token HTTP/1.1" 200 173
2025-05-12 05:25:43,662 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:8000
2025-05-12 05:25:56,336 - urllib3.connectionpool - DEBUG - http://localhost:8000 "POST /ask HTTP/1.1" 200 4505
2025-05-12 05:25:56,338 - evaluate - INFO - Получен ответ от API для вопроса: Как можно проверить подлинност...
2025-05-12 05:25:56,339 - evaluate.metrics - DEBUG - Начинаем вычисление ROUGE-L
2025-05-12 05:25:56,339 - absl - INFO - Using default tokenizer.
2025-05-12 05:25:56,339 - evaluate.metrics - DEBUG - ROUGE-L выполнен успешно, значение: 0
2025-05-12 05:25:56,339 - evaluate.metrics - DEBUG - Начинаем вычисление BERTScore
2025-05-12 05:25:56,505 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /bert-base-multilingual-cased/resolve/main/tokenizer_config.json HTTP/1.1" 200 0
2025-05-12 05:25:56,563 - httpcore.connection - DEBUG - close.started
2025-05-12 05:25:56,563 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:25:56,756 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /bert-base-multilingual-cased/resolve/main/config.json HTTP/1.1" 200 0
2025-05-12 05:25:58,336 - httpcore.connection - DEBUG - close.started
2025-05-12 05:25:58,336 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:25:59,447 - evaluate.metrics - DEBUG - BERTScore выполнен успешно, значение: 0.6905
2025-05-12 05:25:59,447 - evaluate.metrics - DEBUG - Начинаем вычисление перекрытия контекста
2025-05-12 05:25:59,541 - evaluate.metrics - DEBUG - Перекрытие контекста выполнено успешно. Recall: 1.5, Precision: 1.0
2025-05-12 05:25:59,541 - evaluate.metrics - DEBUG - Начинаем вычисление семантической достоверности (faithfulness)
2025-05-12 05:25:59,584 - evaluate.metrics - DEBUG - Семантическая достоверность выполнена успешно, значение: 0.9682
2025-05-12 05:25:59,584 - evaluate.metrics - INFO - Начинаем вычисление метрик RAGAS
2025-05-12 05:25:59,584 - evaluate.metrics - DEBUG - Подготовка данных для RAGAS
2025-05-12 05:25:59,584 - evaluate.metrics - DEBUG - Создание датасета из данных
2025-05-12 05:25:59,599 - evaluate.metrics - INFO - RAGAS data: {'question': ['Как можно проверить подлинность диплома в России?'], 'answer': ['В России можно проверить подлинность диплома в Федеральном реестре сведений документов об образовании (ФРДО). Этот реестр содержит данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатам о владении русским языком и дополнительном профессиональном образовании. Однако не все сведения в ФРДО еще полностью внесены, поэтому возможно, что у вас не найдётся нужная информация. В случае отсутствия данных можно направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа составляет 30 дней. Кроме того, некоторые учебные заведения имеют собственные сервисы проверки подлинности документов, например, в ВШЭ или СПбГУ.'], 'contexts': [['Где проверить подлинность диплома\nВ России есть Федеральный реестр сведений документов об образовании (ФРДО), где любой желающий может бесплатно проверить подлинность документа. В базе есть данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатах о владении русским языком и дополнительном профессиональном образовании.', 'Коротко\n• Быстрее всего проверить подлинность диплома можно в реестре ФРДО. Заполняете данные и сразу узнаёте, есть ли у сотрудника заявленное образование. • Данные в ФРДО внесены ещё не полностью и, возможно, вы не найдёте нужную информацию, однако это не опровергает факт выдачи документа. • Самые верные способы проверки — направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа 30 дней. • В некоторых учебных заведениях есть собственные сервисы проверки, например, в ВШЭ или СПбГУ.', 'Запросите копии паспорта, свидетельства о регистрации (ОГРНИП), ИНН, а также лицензию, если она обязательна для ведения его деятельности.']], 'ground_truths': [['Через ФРДО, запрос в Рособрнадзор или вуз.']]}
2025-05-12 05:25:59,599 - evaluate.metrics - DEBUG - Метрики RAGAS: [answer_relevancy, faithfulness]
2025-05-12 05:25:59,599 - evaluate.metrics - DEBUG - Запуск evaluate() с RAGAS метриками
2025-05-12 05:25:59,606 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:26:00,091 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:26:00,099 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:26:00,099 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:26:00,105 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:26:00,105 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:26:00,110 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:26:00,110 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:26:00,116 - httpx - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-05-12 05:26:00,116 - httpx - DEBUG - load_verify_locations cafile='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/certifi/cacert.pem'
2025-05-12 05:26:00,129 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Given a question and an answer, analyze the complexity of each sentence in the answer. Break down each sentence into one or more fully understandable statements. Ensure that no pronouns are used in any statement. Format the outputs in JSON.\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"statements": {"description": "The generated statements", "items": {"type": "string"}, "title": "Statements", "type": "array"}}, "required": ["statements"], "title": "StatementGeneratorOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "question": "Who was Albert Einstein and what is he best known for?",\n    "answer": "He was a German-born theoretical physicist, widely acknowledged to be one of the greatest and most influential physicists of all time. He was best known for developing the theory of relativity, he also made important contributions to the development of the theory of quantum mechanics."\n}\nOutput: {\n    "statements": [\n        "Albert Einstein was a German-born theoretical physicist.",\n        "Albert Einstein is recognized as one of the greatest and most influential physicists of all time.",\n        "Albert Einstein was best known for developing the theory of relativity.",\n        "Albert Einstein also made important contributions to the development of the theory of quantum mechanics."\n    ]\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "question": "Как можно проверить подлинность диплома в России?",\n    "answer": "В России можно проверить подлинность диплома в Федеральном реестре сведений документов об образовании (ФРДО). Этот реестр содержит данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатам о владении русским языком и дополнительном профессиональном образовании. Однако не все сведения в ФРДО еще полностью внесены, поэтому возможно, что у вас не найдётся нужная информация. В случае отсутствия данных можно направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа составляет 30 дней. Кроме того, некоторые учебные заведения имеют собственные сервисы проверки подлинности документов, например, в ВШЭ или СПбГУ."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-92aa9d45-bbd6-442a-98c0-b76720a40b3a'}
2025-05-12 05:26:00,130 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:26:00,130 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:26:00,130 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Generate a question for the given answer and Identify if answer is noncommittal. Give noncommittal as 1 if the answer is noncommittal and 0 if the answer is committal. A noncommittal answer is one that is evasive, vague, or ambiguous. For example, "I don\'t know" or "I\'m not sure" are noncommittal answers\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"question": {"title": "Question", "type": "string"}, "noncommittal": {"title": "Noncommittal", "type": "integer"}}, "required": ["question", "noncommittal"], "title": "ResponseRelevanceOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "response": "Albert Einstein was born in Germany."\n}\nOutput: {\n    "question": "Where was Albert Einstein born?",\n    "noncommittal": 0\n}\n\nExample 2\nInput: {\n    "response": "I don\'t know about the  groundbreaking feature of the smartphone invented in 2023 as am unaware of information beyond 2022. "\n}\nOutput: {\n    "question": "What was the groundbreaking feature of the smartphone invented in 2023?",\n    "noncommittal": 1\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "response": "В России можно проверить подлинность диплома в Федеральном реестре сведений документов об образовании (ФРДО). Этот реестр содержит данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатам о владении русским языком и дополнительном профессиональном образовании. Однако не все сведения в ФРДО еще полностью внесены, поэтому возможно, что у вас не найдётся нужная информация. В случае отсутствия данных можно направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа составляет 30 дней. Кроме того, некоторые учебные заведения имеют собственные сервисы проверки подлинности документов, например, в ВШЭ или СПбГУ."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-ecb4d469-9929-427b-8350-87c4230c7782'}
2025-05-12 05:26:00,131 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:26:00,131 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Generate a question for the given answer and Identify if answer is noncommittal. Give noncommittal as 1 if the answer is noncommittal and 0 if the answer is committal. A noncommittal answer is one that is evasive, vague, or ambiguous. For example, "I don\'t know" or "I\'m not sure" are noncommittal answers\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"question": {"title": "Question", "type": "string"}, "noncommittal": {"title": "Noncommittal", "type": "integer"}}, "required": ["question", "noncommittal"], "title": "ResponseRelevanceOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "response": "Albert Einstein was born in Germany."\n}\nOutput: {\n    "question": "Where was Albert Einstein born?",\n    "noncommittal": 0\n}\n\nExample 2\nInput: {\n    "response": "I don\'t know about the  groundbreaking feature of the smartphone invented in 2023 as am unaware of information beyond 2022. "\n}\nOutput: {\n    "question": "What was the groundbreaking feature of the smartphone invented in 2023?",\n    "noncommittal": 1\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "response": "В России можно проверить подлинность диплома в Федеральном реестре сведений документов об образовании (ФРДО). Этот реестр содержит данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатам о владении русским языком и дополнительном профессиональном образовании. Однако не все сведения в ФРДО еще полностью внесены, поэтому возможно, что у вас не найдётся нужная информация. В случае отсутствия данных можно направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа составляет 30 дней. Кроме того, некоторые учебные заведения имеют собственные сервисы проверки подлинности документов, например, в ВШЭ или СПбГУ."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-b914b7fa-8f46-4d2d-aeae-4bf0cc3ff01e'}
2025-05-12 05:26:00,131 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:26:00,132 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Generate a question for the given answer and Identify if answer is noncommittal. Give noncommittal as 1 if the answer is noncommittal and 0 if the answer is committal. A noncommittal answer is one that is evasive, vague, or ambiguous. For example, "I don\'t know" or "I\'m not sure" are noncommittal answers\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"properties": {"question": {"title": "Question", "type": "string"}, "noncommittal": {"title": "Noncommittal", "type": "integer"}}, "required": ["question", "noncommittal"], "title": "ResponseRelevanceOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "response": "Albert Einstein was born in Germany."\n}\nOutput: {\n    "question": "Where was Albert Einstein born?",\n    "noncommittal": 0\n}\n\nExample 2\nInput: {\n    "response": "I don\'t know about the  groundbreaking feature of the smartphone invented in 2023 as am unaware of information beyond 2022. "\n}\nOutput: {\n    "question": "What was the groundbreaking feature of the smartphone invented in 2023?",\n    "noncommittal": 1\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "response": "В России можно проверить подлинность диплома в Федеральном реестре сведений документов об образовании (ФРДО). Этот реестр содержит данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатам о владении русским языком и дополнительном профессиональном образовании. Однако не все сведения в ФРДО еще полностью внесены, поэтому возможно, что у вас не найдётся нужная информация. В случае отсутствия данных можно направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа составляет 30 дней. Кроме того, некоторые учебные заведения имеют собственные сервисы проверки подлинности документов, например, в ВШЭ или СПбГУ."\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-c8f317a8-13a4-4c3a-b485-5537489503b5'}
2025-05-12 05:26:00,132 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:26:00,132 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:26:00,132 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:26:00,132 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:26:00,133 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x318db8e80>
2025-05-12 05:26:00,134 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x318443f20> server_hostname='api.openai.com' timeout=None
2025-05-12 05:26:00,135 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x318db8790>
2025-05-12 05:26:00,135 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x318443f20> server_hostname='api.openai.com' timeout=None
2025-05-12 05:26:00,136 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x318d94f70>
2025-05-12 05:26:00,136 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x318443f20> server_hostname='api.openai.com' timeout=None
2025-05-12 05:26:00,136 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x318d945e0>
2025-05-12 05:26:00,136 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x318443f20> server_hostname='api.openai.com' timeout=None
2025-05-12 05:26:00,344 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x30b3b9be0>
2025-05-12 05:26:00,344 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:26:00,344 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:26:00,345 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:26:00,345 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:26:00,345 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:26:00,354 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x30fe20610>
2025-05-12 05:26:00,355 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:26:00,355 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:26:00,355 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:26:00,355 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:26:00,355 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:26:00,358 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x318d90ac0>
2025-05-12 05:26:00,358 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:26:00,358 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:26:00,358 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:26:00,358 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:26:00,358 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:26:00,363 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x318d90460>
2025-05-12 05:26:00,364 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:26:00,364 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:26:00,364 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:26:00,364 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:26:00,364 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:26:01,383 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:26:01 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'759'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'763'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9997'), (b'x-ratelimit-remaining-tokens', b'198036'), (b'x-ratelimit-reset-requests', b'25.901s'), (b'x-ratelimit-reset-tokens', b'589ms'), (b'x-request-id', b'req_9d57bd537ebc58c5e3eb5e67b989dae9'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=q4jxAN6jP3RBB8Wc68f2b14v0ibSb9WFPbk3EcRQyBc-1747009561-1.0.1.1-kHg34yJrgoYzGG6LQdC2rbFzbMrfK_RiXyBT.lPbH7QZyDkU0cQh6iHV9IKjKLMnmYuFWhbD.W7qgpChCG1d56YH7vVgj0jWqncPZMfHnsw; path=/; expires=Mon, 12-May-25 00:56:01 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=rOaQl9lV4OVR8mKSYQ0qCC4xm0pONN..cLbDf.5T8.Y-1747009561334-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5c8386db76632-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:26:01,385 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:26:01,385 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:26:01,386 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:26:01,386 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:26:01,387 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:26:01,387 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:26:01 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '759'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '763'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9997'), ('x-ratelimit-remaining-tokens', '198036'), ('x-ratelimit-reset-requests', '25.901s'), ('x-ratelimit-reset-tokens', '589ms'), ('x-request-id', 'req_9d57bd537ebc58c5e3eb5e67b989dae9'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=q4jxAN6jP3RBB8Wc68f2b14v0ibSb9WFPbk3EcRQyBc-1747009561-1.0.1.1-kHg34yJrgoYzGG6LQdC2rbFzbMrfK_RiXyBT.lPbH7QZyDkU0cQh6iHV9IKjKLMnmYuFWhbD.W7qgpChCG1d56YH7vVgj0jWqncPZMfHnsw; path=/; expires=Mon, 12-May-25 00:56:01 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=rOaQl9lV4OVR8mKSYQ0qCC4xm0pONN..cLbDf.5T8.Y-1747009561334-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5c8386db76632-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:26:01,387 - openai._base_client - DEBUG - request_id: req_9d57bd537ebc58c5e3eb5e67b989dae9
2025-05-12 05:26:01,391 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:26:01 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'772'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'783'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9997'), (b'x-ratelimit-remaining-tokens', b'198616'), (b'x-ratelimit-reset-requests', b'17.28s'), (b'x-ratelimit-reset-tokens', b'414ms'), (b'x-request-id', b'req_10af0d5d2264413dd0036e6dab9ef50f'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=DV_eJhp3FscXW0Uq.ZK16mlOtLsr1M8PtrivnzLiuew-1747009561-1.0.1.1-YBZP7FUxMwaWdOEP0nNAZmacfEhBe2gyT7gnPEYY6jS1x8HtH8ZGpspZLwWvapOwu_BxMitqhMyaWxq_uirucw2vuUinF7TmPGDoGOUJYO0; path=/; expires=Mon, 12-May-25 00:56:01 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=TI3gnfRejr58TRdIC61IMSJGyKxftP8.dmGBMpDYFBM-1747009561343-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5c8385ba9fb9b-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:26:01,392 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:26:01,392 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:26:01,394 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:26:01 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'765'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'770'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9996'), (b'x-ratelimit-remaining-tokens', b'197405'), (b'x-ratelimit-reset-requests', b'34.538s'), (b'x-ratelimit-reset-tokens', b'778ms'), (b'x-request-id', b'req_d436af89933e917576b30fb4e318ce99'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=mWDRqcybdMf8RKrApr9XEs9G3SJ_NKQEnyP3tj3RPLQ-1747009561-1.0.1.1-up6qTuVW_.sXfAlEQjNYSzNDPRRWf2xztZyZxHiWBwweVd4mB26OV6TQ99D5p1k7JwChrmCMwiRR31aFKCBr5ElPLOsSgp0sJ.mLfa7xeQA; path=/; expires=Mon, 12-May-25 00:56:01 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=TI3gnfRejr58TRdIC61IMSJGyKxftP8.dmGBMpDYFBM-1747009561343-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5c8386e82d7a1-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:26:01,395 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:26:01,395 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:26:01,395 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:26:01,395 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:26:01,396 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:26:01,396 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:26:01 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '772'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '783'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9997'), ('x-ratelimit-remaining-tokens', '198616'), ('x-ratelimit-reset-requests', '17.28s'), ('x-ratelimit-reset-tokens', '414ms'), ('x-request-id', 'req_10af0d5d2264413dd0036e6dab9ef50f'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=DV_eJhp3FscXW0Uq.ZK16mlOtLsr1M8PtrivnzLiuew-1747009561-1.0.1.1-YBZP7FUxMwaWdOEP0nNAZmacfEhBe2gyT7gnPEYY6jS1x8HtH8ZGpspZLwWvapOwu_BxMitqhMyaWxq_uirucw2vuUinF7TmPGDoGOUJYO0; path=/; expires=Mon, 12-May-25 00:56:01 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=TI3gnfRejr58TRdIC61IMSJGyKxftP8.dmGBMpDYFBM-1747009561343-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5c8385ba9fb9b-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:26:01,396 - openai._base_client - DEBUG - request_id: req_10af0d5d2264413dd0036e6dab9ef50f
2025-05-12 05:26:01,398 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:26:01,398 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:26:01,398 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:26:01,399 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:26:01 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '765'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '770'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9996'), ('x-ratelimit-remaining-tokens', '197405'), ('x-ratelimit-reset-requests', '34.538s'), ('x-ratelimit-reset-tokens', '778ms'), ('x-request-id', 'req_d436af89933e917576b30fb4e318ce99'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=mWDRqcybdMf8RKrApr9XEs9G3SJ_NKQEnyP3tj3RPLQ-1747009561-1.0.1.1-up6qTuVW_.sXfAlEQjNYSzNDPRRWf2xztZyZxHiWBwweVd4mB26OV6TQ99D5p1k7JwChrmCMwiRR31aFKCBr5ElPLOsSgp0sJ.mLfa7xeQA; path=/; expires=Mon, 12-May-25 00:56:01 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=TI3gnfRejr58TRdIC61IMSJGyKxftP8.dmGBMpDYFBM-1747009561343-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5c8386e82d7a1-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:26:01,401 - openai._base_client - DEBUG - request_id: req_d436af89933e917576b30fb4e318ce99
2025-05-12 05:26:01,408 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'post_parser': <function Embeddings.create.<locals>.parser at 0x30aea8a60>, 'json_data': {'input': [[27435, 16248, 91398, 69556, 18264, 40842, 11320, 2156, 61379, 7952, 48445, 3114, 12507, 1506, 5927, 49520, 23630, 2297, 47273, 30]], 'model': 'text-embedding-ada-002', 'encoding_format': 'base64'}, 'idempotency_key': 'stainless-python-retry-b6c2d036-8361-4bf6-b54b-34b89e63c653'}
2025-05-12 05:26:01,409 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/embeddings
2025-05-12 05:26:01,409 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-05-12 05:26:01,411 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x30b3b9f40>
2025-05-12 05:26:01,411 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x318443cf0> server_hostname='api.openai.com' timeout=None
2025-05-12 05:26:01,652 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x30fe20100>
2025-05-12 05:26:01,652 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:26:01,652 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:26:01,652 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:26:01,653 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:26:01,653 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:26:02,560 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:26:02 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-model', b'text-embedding-ada-002-v2'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'146'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'via', b'envoy-router-54bcdf4cb9-b8lwl'), (b'x-envoy-upstream-service-time', b'149'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'1000000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'999980'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'1ms'), (b'x-request-id', b'req_de11c78ab8d55da1860ff85534ad925a'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=TaRGZJ1lTTzEqsRhhkwFUcjqoKqMZmkCEI51Uk8AUyM-1747009562-1.0.1.1-1bkh4nrfZrYI2J0_3V0MH09zDrpkhR21qX88TI9bw1nmyA12GLy96K7yp9LRDTv7WPun8QdmNVrCgtGR7Ybfx3UQ3f7RmvBHPXs7M6zVxuc; path=/; expires=Mon, 12-May-25 00:56:02 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=7boCXymaX.CgZHzkyG0zYi9QvrabYwqMKEZhHSQ4uBk-1747009562437-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5c8407d1c0be1-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:26:02,561 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 05:26:02,561 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:26:02,561 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:26:02,561 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:26:02,562 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:26:02,562 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/embeddings "200 OK" Headers([('date', 'Mon, 12 May 2025 00:26:02 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-allow-origin', '*'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-model', 'text-embedding-ada-002-v2'), ('openai-organization', 'tochka'), ('openai-processing-ms', '146'), ('openai-version', '2020-10-01'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('via', 'envoy-router-54bcdf4cb9-b8lwl'), ('x-envoy-upstream-service-time', '149'), ('x-ratelimit-limit-requests', '3000'), ('x-ratelimit-limit-tokens', '1000000'), ('x-ratelimit-remaining-requests', '2999'), ('x-ratelimit-remaining-tokens', '999980'), ('x-ratelimit-reset-requests', '20ms'), ('x-ratelimit-reset-tokens', '1ms'), ('x-request-id', 'req_de11c78ab8d55da1860ff85534ad925a'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=TaRGZJ1lTTzEqsRhhkwFUcjqoKqMZmkCEI51Uk8AUyM-1747009562-1.0.1.1-1bkh4nrfZrYI2J0_3V0MH09zDrpkhR21qX88TI9bw1nmyA12GLy96K7yp9LRDTv7WPun8QdmNVrCgtGR7Ybfx3UQ3f7RmvBHPXs7M6zVxuc; path=/; expires=Mon, 12-May-25 00:56:02 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=7boCXymaX.CgZHzkyG0zYi9QvrabYwqMKEZhHSQ4uBk-1747009562437-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5c8407d1c0be1-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:26:02,562 - openai._base_client - DEBUG - request_id: req_de11c78ab8d55da1860ff85534ad925a
2025-05-12 05:26:02,564 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/embeddings', 'files': None, 'post_parser': <function Embeddings.create.<locals>.parser at 0x30aea8a60>, 'json_data': {'input': [[27435, 16248, 91398, 69556, 18264, 40842, 11320, 2156, 61379, 7952, 48445, 3114, 12507, 1506, 5927, 49520, 23630, 2297, 47273, 30], [27435, 16248, 91398, 69556, 18264, 40842, 11320, 2156, 61379, 7952, 48445, 3114, 12507, 1506, 5927, 49520, 23630, 2297, 47273, 30], [27435, 16248, 91398, 69556, 18264, 40842, 11320, 2156, 61379, 7952, 48445, 3114, 12507, 1506, 5927, 49520, 23630, 2297, 47273, 30]], 'model': 'text-embedding-ada-002', 'encoding_format': 'base64'}, 'idempotency_key': 'stainless-python-retry-a1c8da04-d459-49c3-a6b5-5fd9c1dc7699'}
2025-05-12 05:26:02,565 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/embeddings
2025-05-12 05:26:02,565 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:26:02,565 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:26:02,566 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:26:02,566 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:26:02,566 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:26:03,495 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:26:03 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-allow-origin', b'*'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-model', b'text-embedding-ada-002-v2'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'53'), (b'openai-version', b'2020-10-01'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'via', b'envoy-router-84b456966f-znddh'), (b'x-envoy-upstream-service-time', b'55'), (b'x-ratelimit-limit-requests', b'3000'), (b'x-ratelimit-limit-tokens', b'1000000'), (b'x-ratelimit-remaining-requests', b'2999'), (b'x-ratelimit-remaining-tokens', b'999939'), (b'x-ratelimit-reset-requests', b'20ms'), (b'x-ratelimit-reset-tokens', b'3ms'), (b'x-request-id', b'req_1813fbd4986ab1bf3040a65b8fd5632d'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5c8463f7f0be1-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:26:03,496 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-05-12 05:26:03,497 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:26:03,576 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:26:03,576 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:26:03,576 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:26:03,576 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/embeddings "200 OK" Headers({'date': 'Mon, 12 May 2025 00:26:03 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-allow-origin': '*', 'access-control-expose-headers': 'X-Request-ID', 'openai-model': 'text-embedding-ada-002-v2', 'openai-organization': 'tochka', 'openai-processing-ms': '53', 'openai-version': '2020-10-01', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'via': 'envoy-router-84b456966f-znddh', 'x-envoy-upstream-service-time': '55', 'x-ratelimit-limit-requests': '3000', 'x-ratelimit-limit-tokens': '1000000', 'x-ratelimit-remaining-requests': '2999', 'x-ratelimit-remaining-tokens': '999939', 'x-ratelimit-reset-requests': '20ms', 'x-ratelimit-reset-tokens': '3ms', 'x-request-id': 'req_1813fbd4986ab1bf3040a65b8fd5632d', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5c8463f7f0be1-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:26:03,577 - openai._base_client - DEBUG - request_id: req_1813fbd4986ab1bf3040a65b8fd5632d
2025-05-12 05:26:03,910 - ragas._analytics - DEBUG - Flushing triggered for 1 events
2025-05-12 05:26:03,911 - ragas._analytics - DEBUG - Grouped events: {('evaluation', ('answer_relevancy',), 'SINGLE_TURN'): EvaluationEvent(event_type='evaluation', user_id='a-c57b054261b446ec83e28aea108cead0', ragas_version='0.2.15', metrics=['answer_relevancy'], num_rows=1, evaluation_type='SINGLE_TURN', language='english')}
2025-05-12 05:26:03,913 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:26:04,348 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 402 78
2025-05-12 05:26:06,775 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:26:06 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'6168'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'6172'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'199257'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'222ms'), (b'x-request-id', b'req_5f838f831bddf8c6c9fbd5643c9c546d'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=PSDZKxbcfEL1xS7MofKYAqd0XF8v0bZUzAo2ZnAcEso-1747009566-1.0.1.1-tZURDo.w1lEvSU2i1xopcHp6utL7qDE4oD2SjnYnHCoMGxVIu6AYYLxJUiBjQbgwonPrjAiJCTNYuRYcdIA2oIjiMo0iQQ3KAlr8RRyeER4; path=/; expires=Mon, 12-May-25 00:56:06 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=3xxd_d9fXQw88yYfdsSTQfTWKwVX63rE.Bkj7oFY9oE-1747009566725-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5c8385ded4f72-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:26:06,776 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:26:06,777 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:26:06,777 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:26:06,778 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:26:06,778 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:26:06,778 - httpcore.connection - DEBUG - close.started
2025-05-12 05:26:06,778 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:26:06,778 - httpcore.connection - DEBUG - close.started
2025-05-12 05:26:06,778 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:26:06,778 - httpcore.connection - DEBUG - close.started
2025-05-12 05:26:06,778 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:26:06,779 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 12 May 2025 00:26:06 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'tochka'), ('openai-processing-ms', '6168'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '6172'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '199257'), ('x-ratelimit-reset-requests', '8.64s'), ('x-ratelimit-reset-tokens', '222ms'), ('x-request-id', 'req_5f838f831bddf8c6c9fbd5643c9c546d'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=PSDZKxbcfEL1xS7MofKYAqd0XF8v0bZUzAo2ZnAcEso-1747009566-1.0.1.1-tZURDo.w1lEvSU2i1xopcHp6utL7qDE4oD2SjnYnHCoMGxVIu6AYYLxJUiBjQbgwonPrjAiJCTNYuRYcdIA2oIjiMo0iQQ3KAlr8RRyeER4; path=/; expires=Mon, 12-May-25 00:56:06 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=3xxd_d9fXQw88yYfdsSTQfTWKwVX63rE.Bkj7oFY9oE-1747009566725-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '93e5c8385ded4f72-AMS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-05-12 05:26:06,779 - openai._base_client - DEBUG - request_id: req_5f838f831bddf8c6c9fbd5643c9c546d
2025-05-12 05:26:06,784 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'Your task is to judge the faithfulness of a series of statements based on a given context. For each statement you must return verdict as 1 if the statement can be directly inferred based on the context or 0 if the statement can not be directly inferred based on the context.\nPlease return the output in a JSON format that complies with the following schema as specified in JSON Schema:\n{"$defs": {"StatementFaithfulnessAnswer": {"properties": {"statement": {"description": "the original statement, word-by-word", "title": "Statement", "type": "string"}, "reason": {"description": "the reason of the verdict", "title": "Reason", "type": "string"}, "verdict": {"description": "the verdict(0/1) of the faithfulness.", "title": "Verdict", "type": "integer"}}, "required": ["statement", "reason", "verdict"], "title": "StatementFaithfulnessAnswer", "type": "object"}}, "properties": {"statements": {"items": {"$ref": "#/$defs/StatementFaithfulnessAnswer"}, "title": "Statements", "type": "array"}}, "required": ["statements"], "title": "NLIStatementOutput", "type": "object"}Do not use single quotes in your response but double quotes,properly escaped with a backslash.\n\n--------EXAMPLES-----------\nExample 1\nInput: {\n    "context": "John is a student at XYZ University. He is pursuing a degree in Computer Science. He is enrolled in several courses this semester, including Data Structures, Algorithms, and Database Management. John is a diligent student and spends a significant amount of time studying and completing assignments. He often stays late in the library to work on his projects.",\n    "statements": [\n        "John is majoring in Biology.",\n        "John is taking a course on Artificial Intelligence.",\n        "John is a dedicated student.",\n        "John has a part-time job."\n    ]\n}\nOutput: {\n    "statements": [\n        {\n            "statement": "John is majoring in Biology.",\n            "reason": "John\'s major is explicitly mentioned as Computer Science. There is no information suggesting he is majoring in Biology.",\n            "verdict": 0\n        },\n        {\n            "statement": "John is taking a course on Artificial Intelligence.",\n            "reason": "The context mentions the courses John is currently enrolled in, and Artificial Intelligence is not mentioned. Therefore, it cannot be deduced that John is taking a course on AI.",\n            "verdict": 0\n        },\n        {\n            "statement": "John is a dedicated student.",\n            "reason": "The context states that he spends a significant amount of time studying and completing assignments. Additionally, it mentions that he often stays late in the library to work on his projects, which implies dedication.",\n            "verdict": 1\n        },\n        {\n            "statement": "John has a part-time job.",\n            "reason": "There is no information given in the context about John having a part-time job.",\n            "verdict": 0\n        }\n    ]\n}\n\nExample 2\nInput: {\n    "context": "Photosynthesis is a process used by plants, algae, and certain bacteria to convert light energy into chemical energy.",\n    "statements": [\n        "Albert Einstein was a genius."\n    ]\n}\nOutput: {\n    "statements": [\n        {\n            "statement": "Albert Einstein was a genius.",\n            "reason": "The context and statement are unrelated",\n            "verdict": 0\n        }\n    ]\n}\n-----------------------------\n\nNow perform the same with the following input\ninput: {\n    "context": "Где проверить подлинность диплома\\nВ России есть Федеральный реестр сведений документов об образовании (ФРДО), где любой желающий может бесплатно проверить подлинность документа. В базе есть данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатах о владении русским языком и дополнительном профессиональном образовании.\\nКоротко\\n• Быстрее всего проверить подлинность диплома можно в реестре ФРДО. Заполняете данные и сразу узнаёте, есть ли у сотрудника заявленное образование. • Данные в ФРДО внесены ещё не полностью и, возможно, вы не найдёте нужную информацию, однако это не опровергает факт выдачи документа. • Самые верные способы проверки — направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа 30 дней. • В некоторых учебных заведениях есть собственные сервисы проверки, например, в ВШЭ или СПбГУ.\\nЗапросите копии паспорта, свидетельства о регистрации (ОГРНИП), ИНН, а также лицензию, если она обязательна для ведения его деятельности.",\n    "statements": [\n        "В России можно проверить подлинность диплома в Федеральном реестре сведений документов об образовании (ФРДО).",\n        "Федеральный реестр сведений документов об образовании (ФРДО) содержит данные по дипломам об общем образовании.",\n        "Федеральный реестр сведений документов об образовании (ФРДО) содержит данные по дипломам о среднем профессиональном образовании.",\n        "Федеральный реестр сведений документов об образовании (ФРДО) содержит данные по дипломам о высшем образовании.",\n        "Федеральный реестр сведений документов об образовании (ФРДО) содержит данные по сертификатам о владении русским языком.",\n        "Федеральный реестр сведений документов об образовании (ФРДО) содержит данные по дополнительному профессиональному образованию.",\n        "Не все сведения в Федеральном реестре сведений документов об образовании (ФРДО) еще полностью внесены.",\n        "Возможно, что нужная информация не найдётся.",\n        "В случае отсутствия данных можно направить письменные запросы в Рособрнадзор.",\n        "В случае отсутствия данных можно направить письменные запросы в учебное заведение.",\n        "Срок ответа на письменные запросы составляет 30 дней.",\n        "Некоторые учебные заведения имеют собственные сервисы проверки подлинности документов.",\n        "Примеры учебных заведений с собственными сервисами проверки подлинности документов включают ВШЭ и СПбГУ."\n    ]\n}\nOutput: ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 1e-08}, 'idempotency_key': 'stainless-python-retry-3364fbb7-cb0d-440c-a5d1-66be20a114f1'}
2025-05-12 05:26:06,785 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:26:06,785 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:26:06,785 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:26:06,785 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:26:06,786 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:26:06,786 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:26:20,797 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:26:20 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'13643'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'13651'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9995'), (b'x-ratelimit-remaining-tokens', b'198033'), (b'x-ratelimit-reset-requests', b'36.746s'), (b'x-ratelimit-reset-tokens', b'589ms'), (b'x-request-id', b'req_5813ae4f67c0155322c3b3a8d2435c96'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5c8609d934f72-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:26:20,799 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:26:20,800 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:26:20,801 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:26:20,801 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:26:20,801 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:26:20,802 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:26:20 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '13643', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '13651', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9995', 'x-ratelimit-remaining-tokens': '198033', 'x-ratelimit-reset-requests': '36.746s', 'x-ratelimit-reset-tokens': '589ms', 'x-request-id': 'req_5813ae4f67c0155322c3b3a8d2435c96', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5c8609d934f72-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:26:20,802 - openai._base_client - DEBUG - request_id: req_5813ae4f67c0155322c3b3a8d2435c96
2025-05-12 05:26:20,808 - ragas._analytics - DEBUG - Flushing triggered for 1 events
2025-05-12 05:26:20,808 - ragas._analytics - DEBUG - Grouped events: {('evaluation', ('faithfulness',), 'SINGLE_TURN'): EvaluationEvent(event_type='evaluation', user_id='a-c57b054261b446ec83e28aea108cead0', ragas_version='0.2.15', metrics=['faithfulness'], num_rows=1, evaluation_type='SINGLE_TURN', language='english')}
2025-05-12 05:26:20,810 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:26:21,240 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:26:21,242 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): t.explodinggradients.com:443
2025-05-12 05:26:21,655 - urllib3.connectionpool - DEBUG - https://t.explodinggradients.com:443 "POST / HTTP/1.1" 200 11
2025-05-12 05:26:21,656 - evaluate.metrics - DEBUG - Результат RAGAS: {'answer_relevancy': 0.0000, 'faithfulness': 1.0000}
2025-05-12 05:26:21,656 - evaluate.metrics - DEBUG - Тип результата RAGAS: <class 'ragas.dataset_schema.EvaluationResult'>
2025-05-12 05:26:21,656 - evaluate.metrics - DEBUG - Ключи в результате RAGAS: нет ключей
2025-05-12 05:26:21,656 - evaluate.metrics - ERROR - Ошибка при извлечении значений из результата RAGAS: 0
2025-05-12 05:26:21,656 - evaluate.metrics - ERROR - Полный результат RAGAS: {'answer_relevancy': 0.0000, 'faithfulness': 1.0000}
2025-05-12 05:26:21,657 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'Ты - точный оценщик качества ответов. Отвечай только числом от 0 до 1.'}, {'role': 'user', 'content': '\n        Вопрос: Как можно проверить подлинность диплома в России?\n        Ответ: В России можно проверить подлинность диплома в Федеральном реестре сведений документов об образовании (ФРДО). Этот реестр содержит данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатам о владении русским языком и дополнительном профессиональном образовании. Однако не все сведения в ФРДО еще полностью внесены, поэтому возможно, что у вас не найдётся нужная информация. В случае отсутствия данных можно направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа составляет 30 дней. Кроме того, некоторые учебные заведения имеют собственные сервисы проверки подлинности документов, например, в ВШЭ или СПбГУ.\n\n        Насколько данный ответ релевантен вопросу, независимо от контекста? Ответь одним числом от 0 до 1.\n        '}], 'model': 'gpt-3.5-turbo', 'temperature': 0}, 'idempotency_key': 'stainless-python-retry-fcbd52c4-f0d6-4c13-9c1a-1726860e7d4b'}
2025-05-12 05:26:21,658 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:26:21,658 - httpcore.connection - DEBUG - close.started
2025-05-12 05:26:21,659 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:26:21,659 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-05-12 05:26:21,662 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x30b52f6a0>
2025-05-12 05:26:21,662 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x17b17d430> server_hostname='api.openai.com' timeout=5.0
2025-05-12 05:26:21,886 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x30b579790>
2025-05-12 05:26:21,886 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:26:21,887 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:26:21,887 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:26:21,887 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:26:21,887 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:26:22,424 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:26:22 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'204'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'209'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'199577'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'126ms'), (b'x-request-id', b'req_32de6153292bcb35ed1d4d662eea1993'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5c8beffaf0b52-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:26:22,425 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:26:22,426 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:26:22,426 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:26:22,426 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:26:22,426 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:26:22,426 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:26:22 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '204', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '209', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '199577', 'x-ratelimit-reset-requests': '8.64s', 'x-ratelimit-reset-tokens': '126ms', 'x-request-id': 'req_32de6153292bcb35ed1d4d662eea1993', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5c8beffaf0b52-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:26:22,427 - openai._base_client - DEBUG - request_id: req_32de6153292bcb35ed1d4d662eea1993
2025-05-12 05:26:22,428 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'Ты - точный оценщик качества ответов. Отвечай только числом от 0 до 1.'}, {'role': 'user', 'content': '\n        Ответ: В России можно проверить подлинность диплома в Федеральном реестре сведений документов об образовании (ФРДО). Этот реестр содержит данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатам о владении русским языком и дополнительном профессиональном образовании. Однако не все сведения в ФРДО еще полностью внесены, поэтому возможно, что у вас не найдётся нужная информация. В случае отсутствия данных можно направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа составляет 30 дней. Кроме того, некоторые учебные заведения имеют собственные сервисы проверки подлинности документов, например, в ВШЭ или СПбГУ.\n        Контекст: Где проверить подлинность диплома\nВ России есть Федеральный реестр сведений документов об образовании (ФРДО), где любой желающий может бесплатно проверить подлинность документа. В базе есть данные по дипломам об общем, среднем профессиональном и высшем образовании, сертификатах о владении русским языком и дополнительном профессиональном образовании. Коротко\n• Быстрее всего проверить подлинность диплома можно в реестре ФРДО. Заполняете данные и сразу узнаёте, есть ли у сотрудника заявленное образование. • Данные в ФРДО внесены ещё не полностью и, возможно, вы не найдёте нужную информацию, однако это не опровергает факт выдачи документа. • Самые верные способы проверки — направить письменные запросы в Рособрнадзор или учебное заведение, срок ответа 30 дней. • В некоторых учебных заведениях есть собственные сервисы проверки, например, в ВШЭ или СПбГУ. Запросите копии паспорта, свидетельства о регистрации (ОГРНИП), ИНН, а также лицензию, если она обязательна для ведения его деятельности.\n\n        Насколько данный ответ соответствует только предоставленному контексту, без добавления лишней информации? Ответь одним числом от 0 до 1.\n        '}], 'model': 'gpt-3.5-turbo', 'temperature': 0}, 'idempotency_key': 'stainless-python-retry-c5ad3232-7179-4f38-886b-b4e5194cf09d'}
2025-05-12 05:26:22,430 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-05-12 05:26:22,430 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 05:26:22,431 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 05:26:22,431 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 05:26:22,431 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 05:26:22,431 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 05:26:22,919 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 12 May 2025 00:26:22 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'tochka'), (b'openai-processing-ms', b'217'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'221'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9998'), (b'x-ratelimit-remaining-tokens', b'199122'), (b'x-ratelimit-reset-requests', b'16.742s'), (b'x-ratelimit-reset-tokens', b'263ms'), (b'x-request-id', b'req_ba010880da4780dc0a26c5abea84764f'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'93e5c8c258c60b52-AMS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-05-12 05:26:22,919 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-12 05:26:22,920 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 05:26:22,920 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 05:26:22,920 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 05:26:22,920 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 05:26:22,920 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 12 May 2025 00:26:22 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'tochka', 'openai-processing-ms': '217', 'openai-version': '2020-10-01', 'x-envoy-upstream-service-time': '221', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '200000', 'x-ratelimit-remaining-requests': '9998', 'x-ratelimit-remaining-tokens': '199122', 'x-ratelimit-reset-requests': '16.742s', 'x-ratelimit-reset-tokens': '263ms', 'x-request-id': 'req_ba010880da4780dc0a26c5abea84764f', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '93e5c8c258c60b52-AMS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-05-12 05:26:22,920 - openai._base_client - DEBUG - request_id: req_ba010880da4780dc0a26c5abea84764f
2025-05-12 05:26:22,922 - evaluate - INFO - 
Сохранены результаты оценки в evaluation/results/eval_subset_results.json
2025-05-12 05:26:22,922 - evaluate - INFO - 
--- Сводка по метрикам ---
2025-05-12 05:26:22,939 - evaluate - INFO -                             mean
rouge_l                   0.0000
bertscore                 0.6502
context_recall_manual     1.3333
context_precision_manual  1.0000
faithfulness_semantic     0.9351
ragas_answer_relevance       NaN
ragas_faithfulness           NaN
llm_relevance             0.8333
llm_faithfulness          1.0000
2025-05-12 05:26:22,942 - evaluate - INFO - 
Сохранена сводка в evaluation/results/eval_subset_results_summary.csv
2025-05-12 05:26:23,014 - matplotlib.pyplot - DEBUG - Loaded backend macosx version unknown.
2025-05-12 05:26:23,283 - matplotlib.font_manager - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2025-05-12 05:26:23,284 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,284 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-05-12 05:26:23,284 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-05-12 05:26:23,284 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,284 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,284 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,284 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,284 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,284 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,284 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,284 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,284 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,284 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,284 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,284 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,284 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,284 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,284 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,284 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-05-12 05:26:23,284 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,284 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,284 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,285 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,286 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:26:23,287 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,288 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,288 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,288 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,288 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,288 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,288 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,288 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,288 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:26:23,288 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,288 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,288 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-05-12 05:26:23,288 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,288 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,288 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,288 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:26:23,288 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2025-05-12 05:26:23,288 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,288 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:26:23,288 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,288 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,288 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,289 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,289 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,289 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,289 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,289 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,289 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-05-12 05:26:23,289 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,289 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,289 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,289 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,289 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,289 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,289 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,291 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,291 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/PingFang.ttc', name='PingFang HK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,291 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,291 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,291 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,291 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.ttf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,291 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,291 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,291 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,291 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,291 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,291 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-12 05:26:23,291 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,291 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,291 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,291 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-05-12 05:26:23,291 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,291 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,292 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,293 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,293 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,293 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,293 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,293 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
2025-05-12 05:26:23,293 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,293 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,293 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-05-12 05:26:23,293 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,293 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,293 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,293 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,293 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,293 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,293 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,293 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,293 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,293 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,293 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,293 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-05-12 05:26:23,293 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,293 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,293 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,293 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,293 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,293 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:26:23,294 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,294 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,294 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-12 05:26:23,294 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,295 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,295 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,295 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2025-05-12 05:26:23,295 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,295 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,295 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,295 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,295 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,295 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,295 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,295 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,295 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,296 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,297 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,297 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,297 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:26:23,297 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,297 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,297 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:26:23,297 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,297 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,297 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,297 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,297 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,297 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,297 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,297 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-12 05:26:23,297 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:26:23,297 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,297 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-05-12 05:26:23,297 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,297 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2025-05-12 05:26:23,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:26:23,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-05-12 05:26:23,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:26:23,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,298 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,299 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,299 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,299 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,299 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,299 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,299 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2025-05-12 05:26:23,299 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,299 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,299 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,299 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,299 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,299 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,299 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,299 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,299 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,299 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,299 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,299 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:26:23,299 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,299 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,300 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,300 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,300 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,300 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,300 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,300 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,300 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,300 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
2025-05-12 05:26:23,300 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:26:23,300 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,300 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,300 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:26:23,300 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,300 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,300 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,300 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,300 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,300 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:26:23,300 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,300 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.ttf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,301 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,302 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,302 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,302 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,302 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,302 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,302 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,302 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,302 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,302 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-12 05:26:23,302 - matplotlib.font_manager - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2025-05-12 05:26:23,305 - httpcore.connection - DEBUG - close.started
2025-05-12 05:26:23,305 - httpcore.connection - DEBUG - close.complete
2025-05-12 05:26:23,339 - matplotlib.font_manager - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2025-05-12 05:26:23,339 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,339 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-05-12 05:26:23,339 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-05-12 05:26:23,339 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,340 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,340 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,340 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,340 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,340 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,340 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,340 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,340 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,341 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,341 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,341 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,341 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,341 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,341 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,341 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-05-12 05:26:23,341 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,341 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,341 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,341 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,341 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,341 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:26:23,341 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:26:23,341 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:26:23,341 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,342 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,342 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,342 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:26:23,344 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-05-12 05:26:23,344 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,344 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,344 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,345 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,346 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,346 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,347 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,347 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:26:23,347 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,347 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,347 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:26:23,347 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,347 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,347 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,348 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,348 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2025-05-12 05:26:23,348 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,348 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,348 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,348 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,348 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-12 05:26:23,349 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,349 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,349 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,349 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,349 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:26:23,349 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,349 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,349 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-12 05:26:23,349 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,349 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,349 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,350 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,350 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,350 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,350 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,350 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,350 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,350 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,350 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2025-05-12 05:26:23,350 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,350 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,350 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,350 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,350 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,350 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:26:23,350 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,350 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,351 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,351 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,351 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,351 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,352 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,352 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:26:23,352 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,352 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2025-05-12 05:26:23,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,353 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:26:23,354 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,354 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,354 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,354 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,354 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,354 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,354 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,354 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,354 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:26:23,354 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,354 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,354 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2025-05-12 05:26:23,354 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,354 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,354 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,354 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:26:23,355 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2025-05-12 05:26:23,355 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,355 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:26:23,355 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,355 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,355 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,355 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,355 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,355 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,355 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,355 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,355 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-05-12 05:26:23,355 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,355 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,355 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,355 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,355 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,355 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,355 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,355 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,355 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/PingFang.ttc', name='PingFang HK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,355 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,355 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,355 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,355 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.ttf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,355 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,355 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,358 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,358 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,358 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,359 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-12 05:26:23,359 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,359 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,359 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,359 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2025-05-12 05:26:23,359 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,359 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,359 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,359 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,360 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,360 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,360 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,360 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,360 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-05-12 05:26:23,360 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,360 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,360 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,360 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,360 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,360 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,360 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,360 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,360 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,360 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-05-12 05:26:23,360 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,360 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:26:23,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
2025-05-12 05:26:23,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-05-12 05:26:23,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,361 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2025-05-12 05:26:23,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,371 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:26:23,376 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,376 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,376 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-12 05:26:23,376 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,377 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,377 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,377 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2025-05-12 05:26:23,377 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,377 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,377 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,377 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,377 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,377 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,377 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,377 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,377 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,377 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,377 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,377 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,377 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,377 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,378 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,379 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:26:23,379 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,379 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,379 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,379 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,379 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,379 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,379 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,379 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-05-12 05:26:23,379 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:26:23,379 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,379 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-05-12 05:26:23,379 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,379 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,379 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,379 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,379 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,380 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,380 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,380 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,380 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,380 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,380 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2025-05-12 05:26:23,380 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,380 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:26:23,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2025-05-12 05:26:23,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:26:23,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2025-05-12 05:26:23,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,381 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,382 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,382 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,382 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,382 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,384 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,384 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,384 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,384 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-05-12 05:26:23,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
2025-05-12 05:26:23,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:26:23,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:26:23,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-05-12 05:26:23,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2025-05-12 05:26:23,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.ttf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:26:23,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,392 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,392 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,392 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,392 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
2025-05-12 05:26:23,392 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,392 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-05-12 05:26:23,392 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,392 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,392 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,392 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,392 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,392 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,392 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,392 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2025-05-12 05:26:23,392 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,392 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,392 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2025-05-12 05:26:23,393 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,393 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,393 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,393 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,393 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,393 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,393 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,393 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-05-12 05:26:23,393 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,393 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-05-12 05:26:23,393 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,393 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,393 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,393 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,393 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-05-12 05:26:23,393 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-05-12 05:26:23,393 - matplotlib.font_manager - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/Users/tochka/Documents/RAG/rag/venv/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2025-05-12 05:26:23,580 - evaluate - INFO - График метрик сохранен в evaluation/results/eval_subset_results_metrics.png/svg
2025-05-12 05:26:23,843 - evaluate - INFO - Диаграмма размаха сохранена в evaluation/results/eval_subset_results_boxplot.png/svg
2025-05-12 05:26:24,000 - evaluate - INFO - Диаграмма рассеяния LLM сохранена в evaluation/results/eval_subset_results_llm_scatter.png/svg
2025-05-12 05:26:24,000 - evaluate - INFO - Сохранены визуализации в evaluation/results/eval_subset_results_*.svg/.png
2025-05-12 05:26:24,000 - evaluate - INFO - 
--- Лучшие и худшие примеры по метрикам ---
2025-05-12 05:26:24,000 - evaluate - INFO - 
rouge_l:
2025-05-12 05:26:24,000 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:26:24,000 - evaluate - INFO -     0.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:26:24,000 - evaluate - INFO -     0.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:26:24,000 - evaluate - INFO -     0.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:26:24,000 - evaluate - INFO -   Худшие 3:
2025-05-12 05:26:24,000 - evaluate - INFO -     0.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:26:24,000 - evaluate - INFO -     0.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:26:24,000 - evaluate - INFO -     0.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:26:24,000 - evaluate - INFO - 
bertscore:
2025-05-12 05:26:24,000 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:26:24,000 - evaluate - INFO -     0.6905 — Как можно проверить подлинность диплома в России?
2025-05-12 05:26:24,000 - evaluate - INFO -     0.6459 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:26:24,000 - evaluate - INFO -     0.6143 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:26:24,000 - evaluate - INFO -   Худшие 3:
2025-05-12 05:26:24,000 - evaluate - INFO -     0.6905 — Как можно проверить подлинность диплома в России?
2025-05-12 05:26:24,000 - evaluate - INFO -     0.6459 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:26:24,000 - evaluate - INFO -     0.6143 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:26:24,000 - evaluate - INFO - 
context_recall_manual:
2025-05-12 05:26:24,000 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:26:24,000 - evaluate - INFO -     1.5000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:26:24,000 - evaluate - INFO -     1.5000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:26:24,000 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:26:24,000 - evaluate - INFO -   Худшие 3:
2025-05-12 05:26:24,000 - evaluate - INFO -     1.5000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:26:24,000 - evaluate - INFO -     1.5000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:26:24,000 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:26:24,000 - evaluate - INFO - 
context_precision_manual:
2025-05-12 05:26:24,001 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:26:24,001 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:26:24,001 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:26:24,001 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:26:24,001 - evaluate - INFO -   Худшие 3:
2025-05-12 05:26:24,001 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:26:24,001 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:26:24,001 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:26:24,001 - evaluate - INFO - 
faithfulness_semantic:
2025-05-12 05:26:24,001 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:26:24,001 - evaluate - INFO -     0.9682 — Как можно проверить подлинность диплома в России?
2025-05-12 05:26:24,001 - evaluate - INFO -     0.9313 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:26:24,001 - evaluate - INFO -     0.9058 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:26:24,001 - evaluate - INFO -   Худшие 3:
2025-05-12 05:26:24,001 - evaluate - INFO -     0.9682 — Как можно проверить подлинность диплома в России?
2025-05-12 05:26:24,001 - evaluate - INFO -     0.9313 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:26:24,001 - evaluate - INFO -     0.9058 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:26:24,001 - evaluate - INFO - 
llm_relevance:
2025-05-12 05:26:24,001 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:26:24,001 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:26:24,001 - evaluate - INFO -     0.8000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:26:24,001 - evaluate - INFO -     0.7000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:26:24,001 - evaluate - INFO -   Худшие 3:
2025-05-12 05:26:24,001 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:26:24,001 - evaluate - INFO -     0.8000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:26:24,001 - evaluate - INFO -     0.7000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:26:24,001 - evaluate - INFO - 
llm_faithfulness:
2025-05-12 05:26:24,001 - evaluate - INFO -   Лучшие 3:
2025-05-12 05:26:24,001 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:26:24,001 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:26:24,001 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:26:24,001 - evaluate - INFO -   Худшие 3:
2025-05-12 05:26:24,001 - evaluate - INFO -     1.0000 — Что проверяет налоговая при оценке надежности компании?
2025-05-12 05:26:24,001 - evaluate - INFO -     1.0000 — Как проверить китайского поставщика перед заключением контракта?
2025-05-12 05:26:24,001 - evaluate - INFO -     1.0000 — Как можно проверить подлинность диплома в России?
2025-05-12 05:26:24,003 - ragas._analytics - DEBUG - AnalyticsBatcher shutdown complete
