#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –±—ç–∫–µ–Ω–¥ –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python -m scripts.run_app  # –ó–∞–ø—É—Å–∫ –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    python -m scripts.run_app --backend-only  # –¢–æ–ª—å–∫–æ –±—ç–∫–µ–Ω–¥
    python -m scripts.run_app --frontend-only  # –¢–æ–ª—å–∫–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
"""
import argparse
import os
import signal
import subprocess
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
backend_process = None
frontend_process = None
ollama_process = None


def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞"""
    print("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã...")
    stop_processes()
    sys.exit(0)


def start_ollama():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä Ollama, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω"""
    global ollama_process
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ Ollama
    try:
        result = subprocess.run(
            ["curl", "-s", "http://localhost:11434/api/tags"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        if result.returncode == 0:
            print("‚úÖ Ollama —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return True
    except Exception:
        pass
    
    print("–ó–∞–ø—É—Å–∫–∞–µ–º Ollama...")
    try:
        # –ù–∞ —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –∑–∞–ø—É—Å–∫ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
        if sys.platform == "darwin":  # macOS
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            try:
                subprocess.run(["open", "-a", "Ollama"], check=True)
                time.sleep(2)
                return True
            except Exception:
                pass
            
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
            ollama_process = subprocess.Popen(
                ["ollama", "serve"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
        elif sys.platform == "linux":
            ollama_process = subprocess.Popen(
                ["ollama", "serve"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
        elif sys.platform == "win32":
            # –ù–∞ Windows –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞
            ollama_process = subprocess.Popen(
                ["ollama", "serve"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Ollama
        print("–û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞ Ollama...")
        max_retries = 10
        for i in range(max_retries):
            time.sleep(1)
            try:
                result = subprocess.run(
                    ["curl", "-s", "http://localhost:11434/api/tags"],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE
                )
                if result.returncode == 0:
                    print("‚úÖ Ollama —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                    return True
            except Exception:
                pass
            
            print(f"–û–∂–∏–¥–∞–Ω–∏–µ Ollama... {i+1}/{max_retries}")
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Ollama")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Ollama: {e}")
        return False


def start_backend():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ç–∫–µ–Ω–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global backend_process
    
    print("–ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫–µ–Ω–¥...")
    logs_dir = Path("logs")
    logs_dir.mkdir(exist_ok=True)
    
    backend_log = open("logs/backend.log", "a")
    backend_process = subprocess.Popen(
        ["python", "-m", "app.main"],
        stdout=backend_log,
        stderr=backend_log
    )
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –±—ç–∫–µ–Ω–¥–∞
    print("–û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞ –±—ç–∫–µ–Ω–¥–∞...")
    max_retries = 10
    for i in range(max_retries):
        time.sleep(1)
        try:
            result = subprocess.run(
                ["curl", "-s", "http://localhost:8000/api/healthcheck"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            if result.returncode == 0:
                print("‚úÖ –ë—ç–∫–µ–Ω–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                return True
        except Exception:
            pass
        
        print(f"–û–∂–∏–¥–∞–Ω–∏–µ –±—ç–∫–µ–Ω–¥–∞... {i+1}/{max_retries}")
    
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫–µ–Ω–¥")
    return False


def start_frontend():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global frontend_process
    
    print("–ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥...")
    logs_dir = Path("logs")
    logs_dir.mkdir(exist_ok=True)
    
    frontend_log = open("logs/frontend.log", "a")
    
    frontend_dir = Path("frontend")
    if not frontend_dir.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    frontend_process = subprocess.Popen(
        ["npm", "start"],
        cwd=str(frontend_dir),
        stdout=frontend_log,
        stderr=frontend_log,
        env={**os.environ, "BROWSER": "none"}  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
    )
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    print("–û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
    max_retries = 20
    for i in range(max_retries):
        time.sleep(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        if frontend_process.poll() is not None:
            print("‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º:", frontend_process.returncode)
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç –ª–∏ –ø–æ—Ä—Ç 3000
        try:
            result = subprocess.run(
                ["lsof", "-i", ":3000"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            if result.returncode == 0:
                print("‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
                return True
        except Exception:
            pass
        
        print(f"–û–∂–∏–¥–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞... {i+1}/{max_retries}")
    
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥")
    return False


def stop_processes():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"""
    global backend_process, frontend_process, ollama_process
    
    if backend_process is not None:
        print("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—ç–∫–µ–Ω–¥...")
        try:
            backend_process.terminate()
            backend_process.wait(timeout=5)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±—ç–∫–µ–Ω–¥–∞: {e}")
            try:
                backend_process.kill()
            except Exception:
                pass
    
    if frontend_process is not None:
        print("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥...")
        try:
            frontend_process.terminate()
            frontend_process.wait(timeout=5)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: {e}")
            try:
                frontend_process.kill()
            except Exception:
                pass
    
    # Ollama –æ–±—ã—á–Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω–æ–π, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–ª–∞–≥ –¥–ª—è –µ–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    if ollama_process is not None:
        print("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Ollama...")
        try:
            ollama_process.terminate()
            ollama_process.wait(timeout=5)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Ollama: {e}")
            try:
                ollama_process.kill()
            except Exception:
                pass


def main():
    parser = argparse.ArgumentParser(description="Run RAG application")
    parser.add_argument("--backend-only", action="store_true", help="Run only the backend")
    parser.add_argument("--frontend-only", action="store_true", help="Run only the frontend")
    parser.add_argument("--stop-ollama", action="store_true", help="Stop Ollama when exiting")
    args = parser.parse_args()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if args.frontend_only:
            start_frontend()
        elif args.backend_only:
            start_ollama()
            start_backend()
        else:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å—ë
            start_ollama()
            backend_started = start_backend()
            
            if backend_started:
                frontend_started = start_frontend()
                
                if not frontend_started:
                    print("–§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –Ω–æ –±—ç–∫–µ–Ω–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print("–ë—ç–∫–µ–Ω–¥ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å—ë")
                stop_processes()
                return 1
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
        print("\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        
        # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª - –ø—Ä–æ—Å—Ç–æ –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏–ª–∏ —Å–∏–≥–Ω–∞–ª–∞
        while True:
            if backend_process is not None and backend_process.poll() is not None:
                print(f"‚ö†Ô∏è –ë—ç–∫–µ–Ω–¥ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –∫–æ–¥–æ–º {backend_process.returncode}")
                backend_process = None
            
            if frontend_process is not None and frontend_process.poll() is not None:
                print(f"‚ö†Ô∏è –§—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –∫–æ–¥–æ–º {frontend_process.returncode}")
                frontend_process = None
            
            # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å, –≤—ã—Ö–æ–¥–∏–º
            if (args.backend_only and backend_process is None) or \
               (args.frontend_only and frontend_process is None) or \
               (not args.backend_only and not args.frontend_only and 
                backend_process is None and frontend_process is None):
                print("–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å, –≤—ã—Ö–æ–¥–∏–º")
                break
            
            time.sleep(1)
        
        return 0
    except KeyboardInterrupt:
        print("\n–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ Ctrl+C")
    finally:
        stop_processes()
    
    return 0


if __name__ == "__main__":
    sys.exit(main()) 